QuestionId,QuestionTitle,QuestionBody,AcceptedAnswerId,AcceptedAnswerBody
28658735,What are Keycloak's OAuth2 / OpenID Connect endpoints?,"We are trying to evaluate Keycloak as an SSO solution, and it looks good in many respects, but the documentation is painfully lacking in the basics.

For a given Keycloak installation on `http://localhost:8080/` for realm `test`, what are the [OAuth2 Authorization Endpoint](https://www.rfc-editor.org/rfc/rfc6749#section-3.1), [OAuth2 Token Endpoint](https://www.rfc-editor.org/rfc/rfc6749#section-3.2) and [OpenID Connect UserInfo Endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) ?

We are not interested in using Keycloak's own client library, we want to use standard OAuth2 / OpenID Connect client libraries, as the client applications using the keycloak server will be written in a wide range of languages (PHP, Ruby, Node, Java, C#, Angular). Therefore the examples that use the Keycloak client aren't of use for us.",30449500,"For Keycloak 1.2 the above information can be retrieved via the url

    
```
http://keycloakhost:keycloakport/auth/realms/{realm}/.well-known/openid-configuration
```

For example, if the realm name is _demo_:

```
http://keycloakhost:keycloakport/auth/realms/demo/.well-known/openid-configuration
```

An example output from above url:

```json
{
    ""issuer"": ""http://localhost:8080/auth/realms/demo"",
    ""authorization_endpoint"": ""http://localhost:8080/auth/realms/demo/protocol/openid-connect/auth"",
    ""token_endpoint"": ""http://localhost:8080/auth/realms/demo/protocol/openid-connect/token"",
    ""userinfo_endpoint"": ""http://localhost:8080/auth/realms/demo/protocol/openid-connect/userinfo"",
    ""end_session_endpoint"": ""http://localhost:8080/auth/realms/demo/protocol/openid-connect/logout"",
    ""jwks_uri"": ""http://localhost:8080/auth/realms/demo/protocol/openid-connect/certs"",
    ""grant_types_supported"": [
        ""authorization_code"",
        ""refresh_token"",
        ""password""
    ],
    ""response_types_supported"": [
        ""code""
    ],
    ""subject_types_supported"": [
        ""public""
    ],
    ""id_token_signing_alg_values_supported"": [
        ""RS256""
    ],
    ""response_modes_supported"": [
        ""query""
    ]
}
```

Found information at https://issues.jboss.org/browse/KEYCLOAK-571

Note: You might need to add your client to the _Valid Redirect URI_ list"
42186537,"Resources, scopes, permissions and policies in keycloak","I want to create a fairly simple role-based access control system using Keycloak's authorizaion system. The system Keycloak is replacing allows us to create a ""user"", who is a member of one or more ""groups"". In this legacy system, a user is given ""permission"" to access each of about 250 ""capabilities"" either through group membership (where groups are assigned permissions) or a direct grant of a permission to the user.

I would like to map the legacy system to keycloak authorizations.

It should be simple for me to map each ""capability"" in the existing system to a keycloak resource and a set of keycloak scopes. For example, a ""viewAccount"" capability would obviously map to an ""account"" resource and a ""view"" scope; and ""viewTransaction"" maps to a ""transaction"" resource... but is it best practice to create just one ""view"" scope, and use it across multiple resources (account, transaction, etc)? Or should I create a ""viewAccount"" scope, a ""viewTransaction"" scope, etc?

Similarly, I'm a little confused about permissions. For each practical combination of resource and scope, is it usual practice to create a permission? If there are multiple permissions matching a given resource/scope, what does Keycloak do? I'm guessing that the intention of Keycloak is to allow me to configure a matrix of permissions against resources and scopes, so for example I could have permission to access ""accounts"" and permission for ""view"" scope, so therefore I would have permission to view accounts?

I ask because the result of all this seems to be that my old ""viewAccount"" capability ends up creating an ""Account"" resource, with ""View"" scope, and a ""viewAccount"" permission, which seems to get me back where I was. Which is fine, if it's correct.

Finally, obviously I need a set of policies that determine if viewAccount should be applied. But am I right that this means I need a policy for each of the legacy groups that a user could belong to? For example, if I have a ""helpdesk"" role, then I need a ""helpdesk membership"" policy, which I could then add to the ""viewAccount"" permission. Is this correct?

Thanks,

Mark",58906945,"Full transparency- I am by no means a Keycloak/OAuth/OIDC expert and what I know is mostly from reading the docs, books, good ol' YouTube and playing around with the tool. 

This post will be comprised of two parts: 

1. I'll attempt to answer all your questions to the best of my ability 
2. I'll show you all how you can play around with policies/scopes/permissions in Keycloak without needing to deploy a separate app in order to better understand some of the core concepts in this thread. Do note though that this is mostly meant to get you all started. I'm using `Keycloak 8.0.0`.

# Part I

Some terminology before we get started: 

* In Keycloak, you can create 2 types of permissions: [Resource-Based](https://www.keycloak.org/docs/latest/authorization_services/#_permission_create_resource) and [Scope-Based](https://www.keycloak.org/docs/latest/authorization_services/#_permission_create_scope).
* Simply put, for `Resource-Based` permissions, you apply it directly to your resource 
* For `Scoped-Based` permission, you apply it to your scope(s) or scope(s) **and** resource. 

> is it best practice to create just one ""view"" scope, and use it across multiple resources (account, transaction, etc)? Or should I create a ""viewAccount"" scope, a ""viewTransaction"" scope, etc?

Scopes represent a set of rights at a protected resource. In your case, you have 2 resources: `account` and `transaction`, so I would lean towards the second approach. 

In the long run, having a global `view` scope associated with all your resources (e.g. `account`, `transaction`, `customer`, `settlement`...) makes authorization difficult to both manage and adapt to security requirement changes. 

Here are a few examples that you can check out to get a feel for design

* [Slack API](https://api.slack.com/docs/oauth-scopes)
* [Box API](https://developer.box.com/en/guides/api-calls/permissions-and-errors/scopes/)
* [Stripe](https://stripe.com/docs/connect/oauth-reference) 

Do note though - I am not claiming that you shouldn't share scopes across resources. Matter of fact, `Keycloak` allows this for resources with the same `type`. You could for instance need both `viewAccount` and `viewTransaction` scope to read a transaction under a given account (after all you might need access to the account to view transactions). Your requirements and standards will heavily influence your design. 

> For each practical combination of resource and scope, is it usual practice to create a permission?

Apologies, I don't fully understand the question so I'll be a bit broad. In order to grant/deny access to a `resource`, you need to: 

* Define your [policies](https://www.keycloak.org/docs/latest/authorization_services/index.html#_policy_overview) 
* Define your [permissions](https://www.keycloak.org/docs/latest/authorization_services/index.html#_permission_overview)
* Apply your policies to your permissions
* Associate your permissions to a `scope` or `resource` (or both)

for policy enforcement to take effect. See [Authorization Process](https://www.keycloak.org/docs/latest/authorization_services/index.html#the-authorization-process). 

How you go about setting all this up is entirely up to you. You could for instance: 

 * Define individual policies, and tie each policy under the appropriate permission.
 
 * Better yet, define individual policies, then group all your related policies under an `aggregated` policy (a policy of policies) and then associate that aggregated policy with the `scope-based` permission. You could have that `scoped-based` permission apply to both the resource and all its associated scope.

 * Or, you could further break apart your permissions by leveraging the two separate types. You could create permissions solely for your resources via the `resource-based` permission type, and separately associate other permissions solely with a scope via the `scope-based` permission type. 

You have options.  

>  If there are multiple permissions matching a given resource/scope, what does Keycloak do? 

This depends on 

1. The resource server's  `Decision Strategy`
2. Each permission's `Decision Strategy`
3. Each policy's `Logic` value. 

The `Logic` value is similar with Java's `!` operator. It can either be `Positive` or `Negative`. When the `Logic` is `Positive`, the policy's final evaluation remains unchanged. When its `Negative`, the final result is negated (e.g. if a policy evaluates to false and its `Logic` is `Negative`, then it will be `true`). To keep things simple, let's assume that the `Logic` is always set to `Positive`. 

The `Decision Strategy` is what we really want to tackle. The `Decision Strategy` can either be `Unanimous` or `Affirmative`. From the docs, 

> **Decision Strategy**

> This configurations changes how the policy evaluation engine decides whether or not a resource or scope should be granted based on the outcome from all evaluated permissions. **Affirmative** means that at least one permission must evaluate to a positive decision in order grant access to a resource and its scopes. **Unanimous** means that all permissions must evaluate to a positive decision in order for the final decision to be also positive. As an example, if two permissions for a same resource or scope are in conflict (one of them is granting access and the other is denying access), the permission to the resource or scope will be granted if the chosen strategy is Affirmative. Otherwise, a single deny from any permission will also deny access to the resource or scope.

Let's use an example to better understand the above. Suppose you have a resource with 2 permissions and someone is trying to access that resource (remember, the `Logic` is `Positive` for all policies). Now: 

1. `Permission One` has a `Decision Strategy` set to `Affirmative`. It also has 3 policies where they each evaluate to: 
  * `true` 
  * `false` 
  * `false` 

Since one of the policies is set to `true`, `Permission One` is set to `true` (Affirmative - only 1 needs to be `true`).
 
2. `Permission Two` has a `Decision Strategy` set to `Unanimous` with 2 policies: 
  * `true` 
  * `false` 

In this case `Permission Two` is `false` since one policy is false (Unanimous - they all need to be `true`). 

3. Now comes the **final** evaluation. If the resource server's `Decision Strategy` is set to `Affirmative`, access to that resource would be granted because `Permission One` is `true`. If on the other hand, the resource server's `Decision Strategy` is set to `Unanimous`, access would be denied.

See: 

* [Resource Server Settings](https://www.keycloak.org/docs/latest/authorization_services/index.html#resource_server_settings)
* [Managing Permissions](https://www.keycloak.org/docs/latest/authorization_services/index.html#_permission_overview) 

We'll keep revisiting this. I explain how to set the resource sever's `Decision Strategy`  in Part II. 

> so for example I could have permission to access ""accounts"" and permission for ""view"" scope, so therefore I would have permission to view accounts? 

The short answer is yes. Now, let's expand on this a bit :)

If you have the following scenario: 

 1. Resource server's `Decision Strategy` set to `Unanimous` or `Affirmative` 
 2. Permission to access the `account/{id}` resource is `true` 
 3. Permission to access the `view` scope is `true`

You will be granted access to view the account. 
 
 * `true` + `true` is equal to `true` under the `Affirmative` or `Unanimous` `Decision Strategy`.  

Now if you have this 

 1. Resource server's `Decision Strategy` set to `Affirmative` 
 2. Permission to access the `account/{id}` resource is `true`
 3. Permission to access the `view` scope is `false` 

You will *also* be granted access to view the account. 

 * `true` + `false` is `true` under the `Affirmative` strategy. 

The point here is that access to a given resource also depends on your setup so be careful as you may not want the second scenario. 

> But am I right that this means I need a policy for each of the legacy groups that a user could belong to?  

I'm not sure how Keycloak behaved 2 years ago, but you can specify a [Group-Based policy](https://www.keycloak.org/docs/latest/authorization_services/#_policy_group) and simply add all your groups under that policy. You certainly do not need to create one policy per group. 

> For example, if I have a ""helpdesk"" role, then I need a ""helpdesk membership"" policy, which I could then add to the ""viewAccount"" permission. Is this correct?

Pretty much. There are many ways you can set this up. For instance, you can: 

1. Create your resource (e.g. `/account/{id}`) and associate it with the `account:view` scope. 
2. create a [Role-Based Policy](https://www.keycloak.org/docs/latest/authorization_services/#_policy_rbac) and add the `helpdesk` role under that policy 
3. Create a `Scope-Based` permission called `viewAccount` and tie it with `scope`, `resource` and `policy`

We'll set up something similar in Part II. 

# Part II 

Keycloak has a neat little tool which allows you test all your policies. Better yet, you actually do not need to spin up another application server and deploy a separate app for this to work.  

Here's the scenario that we'll set up: 

 1. We'll create a new realm called `stackoverflow-demo`
 2. We'll create a `bank-api` client under that realm 
 3. We will define a resource called `/account/{id}` for that client 
 4. The `account/{id}` will have the `account:view` scope
 5. We'll create a user called `bob` under the new realm 
 6. We'll also create three roles: `bank_teller`, `account_owner` and `user` 
   * We will not associate `bob` with any roles. This is not needed right now. 
 7. We'll set up the following two `Role-Based` policies: 
   * `bank_teller` and `account_owner` have access to the `/account/{id}` resource 
   * `account_owner` has access to the `account:view` scope 
   *  `user` does not have access to the resource or scope
 8. We'll play around with the `Evaluate` tool to see how access can be granted or 
    denied. 

Do forgive me, this example is unrealistic but I'm not familiar with the banking sector :) 


## Keycloak setup 

### Download and run Keycloak 
```
cd tmp
wget https://downloads.jboss.org/keycloak/8.0.0/keycloak-8.0.0.zip 
unzip keycloak-8.0.0.zip
cd keycloak-8.0.0/bin
./standalone.sh 
```

### Create initial admin user 
1. Go to ` http://localhost:8080/auth`
2. Click on the `Administration Console` link  
3. Create the admin user and login 

Visit [Getting Started](https://www.keycloak.org/docs/latest/getting_started/) for more information. For our purposes, the above is enough. 

## Setting up the stage 

### Create a new realm 
1. Hover your mouse around the `master` realm and click on the `Add Realm` button.
2. Enter `stackoverflow-demo` as the name. 
3. Click on `Create`. 
4. The top left should now say `stackoverflow-demo` instead of the `master` realm. 

See [Creating a New Realm](https://www.keycloak.org/docs/latest/getting_started/index.html#_create-realm) 

### Create a new user 
1. Click on the `Users` link on the left
2. Click on the `Add User` button 
3. Enter the `username` (e.g. `bob`) 
4. Ensure that `User Enabled` is turned on 
5. Click `Save` 

See [Creating a New User](https://www.keycloak.org/docs/latest/getting_started/index.html#_create-new-user)

### Create new roles 
1. Click on the `Roles` link 
2. Click on `Add Role` 
3. Add the following roles: `bank_teller`, `account_owner` and `user`

Again, do **not** associate your user with the roles. For our purposes, this is not needed. 

See [Roles](https://www.keycloak.org/docs/latest/server_admin/#roles)

### Create a client 
1. Click on the `Clients` link 
2. Click on `Create`
3. Enter `bank-api` for the `Client ID` 
4. For the `Root URL` enter `http://127.0.0.1:8080/bank-api`
5. Click on `Save` 
6. Ensure that `Client Protocol` is `openid-connect` 
7. Change the `Access Type` to `confidential` 
8. Change `Authorization Enabled` to `On`
9. Scroll down and hit `Save`. A new `Authorization` tab should appear at the top. 
10. Click on the `Authorization` tab and then `Settings` 
11. Ensure that the `Decision Strategy` is set to `Unanimous` 
   * This is the resource server's `Decision Strategy`

See:

 * [Creating a Client Application](https://www.keycloak.org/docs/latest/authorization_services/#_resource_server_create_client)
 * [Enabling Authorization Services](https://www.keycloak.org/docs/latest/authorization_services/#_resource_server_enable_authorization)

### Create Custom Scopes
1. Click on the `Authorization` tab 
2. Click on `Authorization Scopes` > `Create` to bring up `Add Scope` page 
3. Enter `account:view` in the name and hit enter. 

### Create ""View Account Resource"" 
1. Click on `Authorization` link above 
2. Click on `Resources`
3. Click on `Create` 
4. Enter `View Account Resource` for both the `Name` and `Display name` 
5. Enter `account/{id}` for the `URI` 
6. Enter `account:view` in the `Scopes` textbox
7. Click `Save`

See [Creating Resources](https://www.keycloak.org/docs/latest/authorization_services/#_resource_create)
 
### Create your policies 
1. Again under the `Authorization` tab, click on `Policies` 
2. Select `Role` from the the `Create Policy` dropdown 
3. In the `Name` section, type `Only Bank Teller and Account Owner Policy` 
4. Under `Realm Roles` select both the `bank_teller` and `account_owner` role
5. Ensure that `Logic` is set to `Positive` 
5. Click `Save` 
6. Click on the `Policies` link  
7. Select `Role` again from the `Create Policy` dropdown. 
8. This time use `Only Account Owner Policy` for the `Name` 
9. Under `Realm Roles` select `account_owner`
10. Ensure that `Logic` is set to `Positive`
11. Click `Save` 
12. Click on the `Policies` link at the top, you should now see your newly created policies. 

See [Role-Based Policy](https://www.keycloak.org/docs/latest/authorization_services/#_policy_rbac) 

Do note that Keycloak has much more powerful policies. See [Managing Policies](https://www.keycloak.org/docs/latest/authorization_services/#_policy_overview)

### Create Resource-Based Permission
1. Again under the `Authorization` tab, click on `Permissions`
2. Select `Resource-Based` 
3. Type `View Account Resource Permission` for the `Name` 
4. Under `Resources` type `View Account Resource Permission` 
5. Under `Apply Policy` select `Only Bank Teller and Account Owner Policy` 
6. Ensure that the `Decision Strategy` is set to `Unanimous`
7. Click `Save` 

See [Create Resource-Based Permissions](https://www.keycloak.org/docs/latest/authorization_services/#_permission_create_resource) 

*Phew...* 

### Evaluating the Resource-Based permission 
1. Again under the `Authorization` tab, select `Evaluate` 
2. Under `User` enter `bob`  
3. Under `Roles` select `user` 
   * This is where we will associate our user with our created roles. 
4. Under `Resources` select `View Account Resource` and click `Add` 
5. Click on Evaluate. 
6. Expand the `View Account Resource with scopes [account:view]` to see the results and you should see `DENY`. 

[![enter image description here][1]][1]


7. This makes sense because we only allow two roles access to that resource via the `Only Bank Teller and Account Owner Policy`. Let's test this to make sure this is true! 
8. Click on the `Back` link right above the evaluation result 
9. Change bob's role to `account_owner` and click on `Evaluate`. You should now see the result as `PERMIT`. Same deal if you go back and change the role to `bank_teller` 

See [Evaluating and Testing Policies](https://www.keycloak.org/docs/latest/authorization_services/#_policy_evaluation_overview)

### Create Scope-Based Permission 
1. Go back to the `Permissions` section 
2. Select `Scope-Based` this time under the `Create Permission` dropdown. 
3. Under `Name`, enter `View Account Scope Permission` 
4. Under `Scopes`, enter `account:view` 
5. Under `Apply Policy`, enter `Only Account Owner Policy` 
6. Ensure that the `Decision Strategy` is set to `Unanimous`
7. Click `Save`

See [Creating Scope-Based Permissions](https://www.keycloak.org/docs/latest/authorization_services/index.html#_permission_create_scope) 

Second test run 

### Evaluating our new changes 
1. Go back to the `Authorization` section 
2. Click on `Evaluate`
3. User should be `bob` 
4. Roles should be `bank_teller` 
5. Resources should be `View Account Resource` and click `Add` 
6. Click on `Evaluate` and we should get `DENY`. 
    * Again this should come as no surprise as the `bank_teller` has access to the `resource` but not the `scope`. Here one permission evaluates to true, and the other to false. Given that the resource server's `Decision Strategy` is set to `Unanimous`, the final decision is `DENY`. 
7. Click on `Settings` under the `Authorization` tab, and change the `Decision Strategy` to `Affirmative` and go back to steps 1-6 again. This time, the final result should be `PERMIT` (one permission is true, so final decision is true). 
8. For the sake of completeness, turn the resource server's `Decision Strategy` back to `Unanimous`. Again, go back to steps 1 through 6 but this time, set the role as `account_owner`.  This time, the final result is again `PERMIT` which makes sense, given that the `account_owner` has access to both the `resource` and `scope`.


  [1]: https://i.stack.imgur.com/MyKMU.png"
66662820,M1 docker preview and keycloak 'image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8)' Issue,"I just downloaded Docker Preview v3.1 https://docs.docker.com/docker-for-mac/apple-m1/ and tried running keycloak.

Anyone else running into this issue?

```
docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:12.0.4
WARNING: The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested
```",66664440,"Just found this post:
https://github.com/docker/for-mac/issues/5310#issuecomment-779791882

Using this image, I am now able to startup keycloak.
https://hub.docker.com/r/wizzn/keycloak"
44752273,Do Keycloak Clients have a Client Secret?,"Does keycloak client id has a client secret? I tried to create a client in keycloak admin but I was not able to spot client secret.

Is it auto generated? Where can I get the secret?",44753547,"Your client need to have the `access-type` set to `confidential` , then you will have a new tab `credentials` where you will see the client secret.  
https://wjw465150.gitbooks.io/keycloak-documentation/content/server_admin/topics/clients/oidc/confidential.html"
52040265,How to specify refresh tokens lifespan in Keycloak,"Keycloak refresh token lifetime is 1800 seconds:

> ""refresh_expires_in"": 1800 

How to specify different expiration time? In Keycloak admin UI, only access token lifespan can be specified:

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/18KSI.png",54679852,The refresh token lifetime is controlled by the SSO Session Idle Setting.  30 minutes = 30 * 60 = 1800 seconds (the refresh_expires_in value)
53795179,Keycloak Missing form parameter: grant_type,"I have keycloak standalone running on my local machine.

I created new realm called 'spring-test', then new client called 'login-app'

According to the rest documentation:

    POST: http://localhost:8080/auth/realms/spring-test/protocol/openid-connect/token
    
    {
        ""client_id"": ""login-app"",
        ""username"": ""user123"",
        ""password"": ""pass123"",
        ""grant_type"": ""password""
    }

should give me the jwt token but I get bad request with response

    {
        ""error"": ""invalid_request"",
        ""error_description"": ""Missing form parameter: grant_type""
    }

I am assuming that something is missing in my configuration.


EDIT:
I was using json body but it should be `application/x-www-form-urlencoded`:
the following body works:

    token_type_hint:access_token&token:{token}&client_id:{client_id}&client_secret:{client_secret}

",53795226,"You should send your data in a POST request with `Content-Type` header value set to `application/x-www-form-urlencoded`, not json."
51386337,Refresh access_token via refresh_token in Keycloak,"I need to make the user keep login in the system if the user's `access_token` get expired and user want to keep login. How can I get newly updated `access_token` with the use of `refresh_token` on [Keycloak][1]?

I am using [vertx-auth][2] for the auth implementation with [Keycloak][1] on [vert.x][3]. Is it possible to refresh `access_token` with [vertx-auth][2] or [Keycloak][1]'s REST API itself? Or what will be another implementation of this?


  [1]: https://www.keycloak.org
  [2]: https://github.com/vert-x3/vertx-auth
  [3]: http://vertx.io",51387379,"keycloak has REST API for creating an `access_token` using `refresh_token`. It is a `POST endpoint with application/x-www-form-urlencoded`

Here is how it looks: 

    Method: POST
    URL: https://keycloak.example.com/auth/realms/myrealm/protocol/openid-connect/token
    Body type: x-www-form-urlencoded
    Form fields:	
    client_id : <my-client-name>
    grant_type : refresh_token
    refresh_token: <my-refresh-token>

This will give you new access token using refresh token.

**NOTE:** if your refresh token is expired it will throw 400 exception in that you can make user login again. 

Check out a sample in Postman, you can develop and corresponding API using this.

[![Sample in Postman][1]][1]


  


  [1]: https://i.stack.imgur.com/3cvvt.png"
46689034,Logout user via Keycloak REST API doesn't work,"I have issue while calling Keycloak's **logout** endpoint from an (mobile) application. 

This scenario is supported as stated in [its documentation](http://www.keycloak.org/docs/latest/securing_apps/topics/oidc/oidc-generic.html):

> /realms/{realm-name}/protocol/openid-connect/logout

> The logout endpoint logs out the authenticated user.

> The user agent can be redirected to the endpoint, in which case the active user session is logged out. Afterward the user agent is redirected back to the application.

> **The endpoint can also be invoked directly by the application. To invoke this endpoint directly the refresh token needs to be included as well as the credentials required to authenticate the client**.

My request has following format:

    POST http://localhost:8080/auth/realms/<my_realm>/protocol/openid-connect/logout
    Authorization: Bearer <access_token>
    Content-Type: application/x-www-form-urlencoded
    
    refresh_token=<refresh_token>

but this error always occurs:

    HTTP/1.1 400 Bad Request
    Connection: keep-alive
    X-Powered-By: Undertow/1
    Server: WildFly/10
    Content-Type: application/json
    Content-Length: 123
    Date: Wed, 11 Oct 2017 12:47:08 GMT
    
    {
      ""error"": ""unauthorized_client"",
      ""error_description"": ""UNKNOWN_CLIENT: Client was not identified by any client authenticator""
    }

It seems that Keycloak is unable to detect the current client's identity event if I've provided **access_token**. I've the used same **access_token** to access other Keycloak's APIs without any problems, like **userinfo**
 (*/auth/realms/<my_realm>/protocol/openid-connect/userinfo*). 

My request was based on this [Keycloak's issue][1]. The author of the issue got it worked but it is not my case. 

I'm using Keycloak **3.2.1.Final**.  


  [1]: https://issues.jboss.org/browse/KEYCLOAK-2476

Do you have that same problem? Have you got any idea how to solve it?",46769801,"Finally, I've found the solution by looking at the Keycloak's source code: https://github.com/keycloak/keycloak/blob/9cbc335b68718443704854b1e758f8335b06c242/services/src/main/java/org/keycloak/protocol/oidc/endpoints/LogoutEndpoint.java#L169. It says:

> If the client is a public client, then you must include a ""client_id"" form parameter.

So what I was missing is the **client_id** form parameter. My request should have been:

    POST http://localhost:8080/auth/realms/<my_realm>/protocol/openid-connect/logout
    Authorization: Bearer <access_token>
    Content-Type: application/x-www-form-urlencoded
    
    client_id=<my_client_id>&refresh_token=<refresh_token>

The session should be destroyed correctly."
32678883,Keycloak retrieve custom attributes to KeycloakPrincipal,"In my rest service i can obtain the principal information after authentication using 

    KeycloakPrincipal kcPrincipal = (KeycloakPrincipal) servletRequest.getUserPrincipal();

statement.

Keycloak principal doesn't contain all the information i need about the authenticated user.
Is it possible to customize my own principal type?
On the keycloak-server-end I've developed a user federation provider. I saw that UserModel makes possible to add a set of custom attributes to my user.

Is it possible to insert my custom principal in that code? 

Is it possible to retrieve this attributes from keycloak principal?

What is the way?
",32890003,"To add custom attributes you need to do three things:

  1. Add attributes to admin console
  2. Add claim mapping
  3. Access claims

The first one is explained pretty good here: https://www.keycloak.org/docs/latest/server_admin/index.html#user-attributes

**Add claim mapping:**

  1. Open the admin console of your realm.
  2. Go to Clients and open your client
  3. This only works for Settings > Access Type confidential or public (not bearer-only)
  4. Go to Mappers
  5. Create a mapping from your attribute to json
  6. Check ""Add to ID token""

**Access claims:**

	final Principal userPrincipal = httpRequest.getUserPrincipal();

	if (userPrincipal instanceof KeycloakPrincipal) {

		KeycloakPrincipal<KeycloakSecurityContext> kp = (KeycloakPrincipal<KeycloakSecurityContext>) userPrincipal;
		IDToken token = kp.getKeycloakSecurityContext().getIdToken();

		Map<String, Object> otherClaims = token.getOtherClaims();

		if (otherClaims.containsKey(""YOUR_CLAIM_KEY"")) {
			yourClaim = String.valueOf(otherClaims.get(""YOUR_CLAIM_KEY""));
		}
	} else {
		throw new RuntimeException(...);
	}



I used this for a custom attribute I added with a custom theme."
47181821,Using Keycloak behind a reverse proxy: Could not open Admin loginpage because mixed Content,"so I have a problem getting keycloak 3.2.1 to work behind kong (0.10.3), a reverse proxy based on nginx. 

Scenario is:

I call keycloak via my gateway-route via `https://{gateway}/auth` and it shows me the entrypoint with keycloak logo, link to admin console etc. - so far so good. 

But when clicking on administration console -> calling `https://{gateway}/auth/admin/master/console/` , keycloak tries to load its css/js via http (see screenie below), which my browser blocks because mixed content.

I searched around and found this thread: https://stackoverflow.com/questions/35169503/keycloak-apache-server-configuration-with-mixed-content-problems which lead to this github repo: https://github.com/dukecon/keycloak_postgres_https

From there on, I tried to integrate its' cli into my dockerfile with success (did not change the files' contents, just copied them into my repo and add/run them from dockerfile). This is my dockerfile right now:

    FROM jboss/keycloak-postgres:3.2.1.Final
    
    USER root
    
    ADD config.sh /tmp/
    ADD batch.cli /tmp/
    
    RUN bash /tmp/config.sh
    
    #Give correct permissions when used in an OpenShift environment.
    RUN chown -R jboss:0 $JBOSS_HOME/standalone && \
        chmod -R g+rw $JBOSS_HOME/standalone
    
    USER jboss
    EXPOSE 8080

Sadly, my problem still exists:
[![error][1]][1]

So I am out of ideas for now and hope you could help me out:

- How do I tell keycloak to call its' css-files via https here? 

- do I have to change something in the cli script? 

Here's the content of the script:

config.sh:
    
    #!/bin/bash -x
    
    set -e
    
    JBOSS_HOME=/opt/jboss/keycloak
    JBOSS_CLI=$JBOSS_HOME/bin/jboss-cli.sh
    JBOSS_MODE=${1:-""standalone""}
    JBOSS_CONFIG=${2:-""$JBOSS_MODE.xml""}
    
    echo ""==> Executing...""
    cd /tmp
    
    $JBOSS_CLI --file=`dirname ""$0""`/batch.cli
    
    # cf. http://stackoverflow.com/questions/34494022/permissions-error-when-using-cli-in-jboss-wildfly-and-docker
    /bin/rm -rf ${JBOSS_HOME}/${JBOSS_MODE}/configuration/${JBOSS_MODE}_xml_history/current

and batch.cli:

    embed-server --std-out=echo
    
    # http://keycloak.github.io/docs/userguide/keycloak-server/html/server-installation.html
    # 3.2.7.2. Enable SSL on a Reverse Proxy
    # First add proxy-address-forwarding and redirect-socket to the http-listener element.
    # Then add a new socket-binding element to the socket-binding-group element.
    
    batch
    
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=proxy-address-forwarding,value=true)
    
    /subsystem=undertow/server=default-server/http-listener=default:write-attribute(name=redirect-socket,value=proxy-https)
    
    /socket-binding-group=standard-sockets/socket-binding=proxy-https:add(port=443)
    
    run-batch
    
    stop-embedded-server


It may be of interest too, that kong is deployed on openshift with a route using a redirect from http to https ( ""insecureEdgeTerminationPolicy"": ""Redirect"" ).


  [1]: https://i.stack.imgur.com/K2qVE.png
",47187279,"This sounds somehow like a duplicate of https://stackoverflow.com/questions/47068266/keycloak-docker-behind-loadbalancer-with-https-fails

Set the request headers ``X-Forwarded-For`` and ``X-Forwarded-Proto`` in _nginx_. Then you have to configure Keycloak (Wildfly, Undertow) to work together with the SSL terminating reverse proxy (aka load balancer). See http://www.keycloak.org/docs/latest/server_installation/index.html#_setting-up-a-load-balancer-or-proxy for a detailed description.

The point is that _nginx_ is terminating SSL and is forwarding the requests to _Keycloak_ as pure _http_. Therefore _Keycloak/Wildfly_ must be told that the incoming _http_ requests from _nginx_ must be handled like they were _https_."
53550321,Keycloak-gatekeeper: 'aud' claim and 'client_id' do not match,"What is the correct way to set the `aud` claim to avoid the error below?

    unable to verify the id token	{""error"": ""oidc: JWT claims invalid: invalid claims, 'aud' claim and 'client_id' do not match, aud=account, client_id=webapp""}

I kinda worked around this error message by hardcoding `aud` claim to be the same as my `client_id`. Is there any better way?

Here is my `docker-compose.yml`:

    version: '3'
    services:
      keycloak-proxy:
        image: ""keycloak/keycloak-gatekeeper""
        environment:
         - PROXY_LISTEN=0.0.0.0:3000
         - PROXY_DISCOVERY_URL=http://keycloak.example.com:8181/auth/realms/realmcom
         - PROXY_CLIENT_ID=webapp
         - PROXY_CLIENT_SECRET=0b57186c-e939-48ff-aa17-cfd3e361f65e
         - PROXY_UPSTREAM_URL=http://test-server:8000
        ports:
          - ""8282:3000""
        command:
          - ""--verbose""
          - ""--enable-refresh-tokens=true""
          - ""--enable-default-deny=true""
          - ""--resources=uri=/*""
          - ""--enable-session-cookies=true""
          - ""--encryption-key=AgXa7xRcoClDEU0ZDSH4X0XhL5Qy2Z2j""
      test-server:
        image: ""test-server""",53627747,"With recent keycloak version 4.6.0 the client id is apparently no longer automatically added to the audience field 'aud' of the access token. 
Therefore even though the login succeeds the client rejects the user.
To fix this you need to configure the audience for your clients (compare doc [2]). 
## Configure audience in Keycloak
- Add realm or configure existing
- Add client my-app or use existing
- Goto to the newly added ""Client Scopes"" menu [1]
  - Add Client scope 'good-service' 
    - Within the settings of the 'good-service' goto Mappers tab
      - Create Protocol Mapper 'my-app-audience'
         * Name: my-app-audience
         * Choose Mapper type: Audience
         * Included Client Audience: my-app
         * Add to access token: on
- Configure client my-app in the ""Clients"" menu
  - Client Scopes tab in my-app settings
    - Add available client scopes ""good-service"" to assigned default client scopes

If you have more than one client repeat the steps for the other clients as well and add the good-service scope.
The intention behind this is to isolate client access. The issued access token will only be valid for the intended audience.
This is thoroughly described in Keycloak's documentation [1,2].


### Links to recent master version of keycloak documentation:
  - [1] https://github.com/keycloak/keycloak-documentation/blob/master/server_admin/topics/clients/client-scopes.adoc</b>
  - [2] https://github.com/keycloak/keycloak-documentation/blob/master/server_admin/topics/clients/oidc/audience.adoc

### Links with git tag:
- [1] https://github.com/keycloak/keycloak-documentation/blob/f490e1fba7445542c2db0b4202647330ddcdae53/server_admin/topics/clients/oidc/audience.adoc
- [2] https://github.com/keycloak/keycloak-documentation/blob/5e340356e76a8ef917ef3bfc2e548915f527d093/server_admin/topics/clients/client-scopes.adoc
"
54884938,Generate JWT Token in Keycloak and get public key to verify the JWT token on a third party platform,"There is an Endpoint to a backend server which gives a JSON response on pinging and is protected by an *Apigee Edge Proxy*. Currently, this endpoint has no security and we want to implement Bearer only token authentication for all the clients making the request. 
All the clients making the requests to API will send that JWT token in *Authorization Bearer* and Apigee Edge will be used to verify the JWT Token.

How do I use Keycloak to generate this JWT token?

Also, Apigee needs a **public key** of **the origin of the JWT token** (the server which signed the JWT token, in this case, I believe that is Keycloak).
So my second doubt is, while I use Keycloak to generate the JWT token, how to get the public key using which the server will verify if the token is valid?",55002225,"This got figured out with the help of [this medium article][1]. All the steps I have mentioned below have a detailed description in the article (Refer step 1 to 9 for token part, other steps are related to Spring Boot application) but I would like to give a overview of those in reference to my question.

### Generating a JWT token using KeyCloak
1. Install and run KeyCloak server and go to the endpoint (e.g http://localhost:8080/auth). Log in with an initial admin login and password (username=admin, password=admin).
2. Create a Realm and a Client with `openid-connect` as the `Client Protocol`.
3. Create users, roles and map Client Role To User.
4. Assuming the server being on `localhost`, visiting the http://localhost:8080/auth/realms/dev/.well-known/openid-configuration gives details about all security endpoints
5. http://localhost:8080/auth/realms/dev/protocol/openid-connect/token sending a POST request with valid details to this URL gives the JWTtoken with.

### Getting the public key of the KeyCloak server
* Going to `Realm Settings` and click on `Public key` pops up with the Public key of the server for that Realm. Refer to [this image][2] for better understanding. 
* Add `-----BEGIN PUBLIC KEY-----` and append `-----END PUBLIC KEY-----` to this copied public key to use it anywhere to verify the JWTtoken. You public key should finally look something like this:
```
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhAj9OCZd0XjzOIad2VbUPSMoVK1X8hdD2Ad+jUXCzhZJf0RaN6B+79AW5jSgceAgyAtLXiBayLlaqSjZM6oyti9gc2M2BXzoDKLye+Tgpftd72Zreb4HpwKGpVrJ3H3Ip5DNLSD4a1ovAJ6Sahjb8z34T8c1OCnf5j70Y7i9t3y/j076XIUU4vWpAhI9LRAOkSLqDUE5L/ZdPmwTgK91Dy1fxUQ4d02Ly4MTwV2+4OaEHhIfDSvakLBeg4jLGOSxLY0y38DocYzMXe0exJXkLxqHKMznpgGrbps0TPfSK0c3q2PxQLczCD3n63HxbN8U9FPyGeMrz59PPpkwIDAQAB
-----END PUBLIC KEY-----
```

### Validating the token on a third party platform
* [jwt.io][3] is a great website for validating JWTtokens. All 
we have to do is paste the token and public key. Read the introduction of the website [here][4] to know more about validating the tokens.


  [1]: https://medium.com/@bcarunmail/securing-rest-api-using-keycloak-and-spring-oauth2-6ddf3a1efcc2
  [2]: https://cdn-images-1.medium.com/max/800/1*iNoFToPsy0-rf8uLaqjPjg.png
  [3]: https://jwt.io/
  [4]: https://jwt.io/introduction/"
34410707,Enabling remote access to Keycloak,"I'm using the Keycloak authorization server in order to manage my application permissions. However, I've found out the standalone server can be accessed locally only.

`http://localhost:8080/auth` works, but not it does `http://myhostname:8080/auth`. This issue doesn't permit accessing the server from the internal network.",34410749,"The standalone Keycloak server runs on the top of a JBoss Wildfly instance and this server doesn't allow accessing it externally by default, for security reasons (it should be only for the administration console, but seems to affect every url in case of Keycloak). It has to be booted with the `-b=0.0.0.0` option to enable it.

> However, if your Wildfly is running on a remote machine and you try to
> access your administrative page through the network by it’s IP address
> or hostname, let’s say, at http://54.94.240.170:8080/, you will
> probably see a graceful This webpage is not available error, in
> another words, Wildfly said “No, thanks, I’m not allowing requests
> from another guys than the ones at my local machine”.

**See also:**

 - [Enable Wildfly remote access][1]
 - https://stackoverflow.com/questions/29150643/wildfly-remotely-access-administration-console-doesnt-work

  [1]: http://bgasparotto.com/enable-wildfly-remote-access/"
44624844,Configure reverse-proxy for Keycloak docker with custom base URL,"How can I set the `docker keycloak base url` as parameter ?

I have the following nginx reverse proxy configuration:

    server {
        listen 80;
        server_name example.com;

        location /keycloak {
            proxy_pass http://example.com:8087/;
        }
    }

When I try to access http://example.com/keycloak/ I got a keycloak http redirect to http://example.com/auth/ instead of http://example.com/keycloak/auth/

Any ideas?",44627360,"Just tested that @home, and actually multiple configuration additions are needed:

1/ Run the keycloak container with env **[`-e PROXY_ADDRESS_FORWARDING=true`][1]** as explained in the docs, this is required in a proxy way of accessing to keycloak:

    docker run -it --rm -p 8087:8080 --name keycloak -e PROXY_ADDRESS_FORWARDING=true jboss/keycloak:latest

Also explained in this [SO question][2]

2/ Change the **web-context** inside keycloak's configuration file `$JBOSS_HOME/standalone/configuration/standalone.xml`

Default keycloak configuration points to `auth`

    <web-context>auth</web-context>

Then you could change it to `keycloak/auth`

    <web-context>keycloak/auth</web-context>

If you need to automate this for docker, just create a new keycloak image :

    FROM jboss/keycloak:latest

    USER jboss

    RUN sed -i -e 's/<web-context>auth<\/web-context>/<web-context>keycloak\/auth<\/web-context>/' $JBOSS_HOME/standalone/configuration/standalone.xml

3/ Add some proxy information to nginx configuration (mostly for http / https handling)

    location /keycloak {
        proxy_pass http://example.com:8087;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

If you are proxying requests from nginx to keycloak on same server, I recommend using `proxy_pass http://localhost:8087;`, and if not try to use a private network to avoid proxying through external web requests.

Hope this helps

  [1]: https://hub.docker.com/r/jboss/keycloak/
  [2]: https://stackoverflow.com/questions/40388028/configuring-iis-as-reverse-proxy-for-keycloak"
47837613,How are Keycloak roles managed?,"Keycloak is a great tool, but it lacks proper documentation.

So we have Realm.roles, Client.roles and User.roles

How do there 3 work together when accessing an application using a specific client?

Sincerely,",47857926,"In KeyCloak we have those 3 roles:

 1. **Realm** **Role**
 2. **Client** **Role**
 3. **Composite** **Role**

There are no User Roles in KeyCloak. You most likely confused that with User Role Mapping, which is basically mapping a role (realm, client, or composite) to the specific user

In order to find out how these roles actually work, let's first take a look at a simple Realm model I created. As you can see in picture below, every **Realm** has one or multiple **Clients**. And every **Client** can have multiple **Users** attached to it. 

[![enter image description here][1]][1]

Now from this it should be easy to conclude how role mappings work. 

**Realm Role:** It is a global role, belonging to that specific realm. You can access it from any client and map to any user. *Ex Role:* 'Global Admin, Admin'

**Client Role:** It is a role which belongs only to that specific client. You cannot access that role from a different client. You can only map it to the Users from that client. *Ex Roles:* 'Employee, Customer'

**Composite Role:** It is a role that has one or more roles (realm or client ones) associated to it. 



  [1]: https://i.stack.imgur.com/6ugq3.png"
53318134,Unable to use Keycloak in Spring Boot 2.1 due to duplicated Bean Registration httpSessionManager,"I want to secure my Spring Boot 2.1 app with Keycloak 4.5.

Currently I cannot start the application due to the following error:

    Exception encountered during context initialization - cancelling refresh attempt: 
    org.springframework.beans.factory.support.BeanDefinitionOverrideException: 
      Invalid bean definition with name 'httpSessionManager' defined in class path resource [dummy/service/SecurityConfig.class]: 
        Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=securityConfig; factoryMethodName=httpSessionManager; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [dummy/SecurityConfig.class]] for bean 'httpSessionManager': 
    There is already [Generic bean: class [org.keycloak.adapters.springsecurity.management.HttpSessionManager]; scope=singleton; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in URL [jar:file:/.m2/repository/org/keycloak/keycloak-spring-security-adapter/4.5.0.Final/keycloak-spring-security-adapter-4.5.0.Final.jar!/org/keycloak/adapters/springsecurity/management/HttpSessionManager.class]] bound.

My class SecurityConfig (see below) extends from KeycloakWebSecurityConfigurerAdapter. This adapter already defines the bean httpSessionManager.

I understand why this is a problem. Question is, how can I prevent this or fix my conflict? 

The Steps I have done so far:

 - Built my pom (see below) using:
  - spring-boot-starter-web
  - spring-boot-starter-security
  - keycloak-spring-boot-starter
  - keycloak-adapter-bom in dependencyManagement
 - Defined an own SecurityConfig extending KeycloakWebSecurityConfigurerAdapter

**pom.xml**

<!-- language: lang-xml -->

    ...
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.0.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<java.version>11</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>

		<keycloak.version>4.5.0.Final</keycloak.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-spring-boot-starter</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.keycloak.bom</groupId>
				<artifactId>keycloak-adapter-bom</artifactId>
				<version>${keycloak.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
    ...

**SecurityConfig.java**

<!-- language: lang-java -->

    @KeycloakConfiguration
    @EnableGlobalMethodSecurity(prePostEnabled = true)
    @Import(KeycloakWebSecurityConfigurerAdapter.class)
    class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
    
        @Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) {
            KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
            keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(new SimpleAuthorityMapper());
            auth.authenticationProvider(keycloakAuthenticationProvider);
        }

        @Bean
        @Override
        protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
        }

        @Bean
        public KeycloakConfigResolver keycloakConfigResolver() {
            return new KeycloakSpringBootConfigResolver();
        }
    
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            super.configure(http);
            http.csrf().ignoringAntMatchers(""/**/*"");
            http.authorizeRequests()
                    .anyRequest().permitAll();
        }
    }



**Update**
There is a known issue ([KEYCLOAK-8725](https://issues.jboss.org/browse/KEYCLOAK-8725?focusedCommentId=13660313&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-13660313)). The fix is planned for 5.x of Keycloak. However, there was a workaround in the comments. Just replace the annotation @KeyCloakConfiguration with:


<!-- language: lang-java -->

    @Configuration
    @ComponentScan(
        basePackageClasses = KeycloakSecurityComponents.class,
        excludeFilters = @ComponentScan.Filter(type = FilterType.REGEX, pattern = ""org.keycloak.adapters.springsecurity.management.HttpSessionManager""))
    @EnableWebSecurity",53318548,"It looks like there's a bug in Keycloak's Spring Security integration which means that an application that subclasses `KeycloakWebSecurityConfigurerAdapter` will try to create two beans named `httpSessionManager`. When two beans are defined with the same name, the second definition that is encountered will attempt to override the first. This overriding is prohibited by default in Spring Boot 2.1. I would recommend reporting this as a bug against Keycloak's Spring Security integration. While you are waiting for the bug to be resolved, you can work around the problem by setting `spring.main.allow-bean-definition-overriding=true` in `application.properties`."
45051923,Keycloak angular No 'Access-Control-Allow-Origin' header is present,"I Have integrated keycloak with an angular app. Basically, both frontend and backend are on different server.Backend app is running on apache tomcat 8. Frontend app is running on JBoss welcome content folder.

**Angular config**

    angular.element(document).ready(function ($http) {
        var keycloakAuth = new Keycloak('keycloak.json');
        auth.loggedIn = false;
        keycloakAuth.init({ onLoad: 'login-required' }).success(function () {
        	keycloakAuth.loadUserInfo().success(function (userInfo) {
        		console.log(userInfo);  
            });
            auth.loggedIn = true;
            auth.authz = keycloakAuth;
            auth.logoutUrl = keycloakAuth.authServerUrl + ""/realms/app1/protocol/openid-connect/logout?redirect_uri=http://35.154.214.8/hrms-keycloak/index.html"";
            module.factory('Auth', function() {
                return auth;
            });
            angular.bootstrap(document, [""themesApp""]);
        }).error(function () {
                window.location.reload();
            });
    
    });
    module.factory('authInterceptor', function($q, Auth) {
        return {
            request: function (config) {
                var deferred = $q.defer();
                if (Auth.authz.token) {
                    Auth.authz.updateToken(5).success(function() {
                        config.headers = config.headers || {};
                        config.headers.Authorization = 'Bearer ' + Auth.authz.token;
                        deferred.resolve(config);
                    }).error(function() {
                            deferred.reject('Failed to refresh token');
                        });
                }
                return deferred.promise;
            }
        };
    });
    module.config([""$httpProvider"", function ($httpProvider)  {
        $httpProvider.interceptors.push('authInterceptor');
    }]);





**Request Header**

    Accept:*/*
    Accept-Encoding:gzip, deflate
    Accept-Language:en-US,en;q=0.8
    Access-Control-Request-Headers:authorization
    Access-Control-Request-Method:GET
    Connection:keep-alive
    Host:35.154.214.8:8080
    Origin:http://35.154.214.8
    Referer:http://35.154.214.8/accounts-keycloak/
    User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36

**Error on web console.**

    XMLHttpRequest cannot load http://35.154.214.8:8080/company/loadCurrencyList. Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://35.154.214.8' is therefore not allowed access.

**Cors filter on backend**

    @Component
    public class CORSFilter implements Filter {
    	static Logger logger = LoggerFactory.getLogger(CORSFilter.class);
    
    	@Override
    	public void init(FilterConfig filterConfig) throws ServletException {
    	}
    
    	@Override
    	public void doFilter(ServletRequest request, ServletResponse res,
    			FilterChain chain) throws IOException, ServletException {
    		HttpServletResponse response = (HttpServletResponse) res;
    		response.setHeader(""Access-Control-Allow-Origin"", ""*"");
    		response.setHeader(""Access-Control-Allow-Methods"", ""*"");
    		response.setHeader(""Access-Control-Max-Age"", ""3600"");
    		response.setHeader(""Access-Control-Allow-Headers"", ""*"");
    		chain.doFilter(request, response);
    	}
    
    	public void destroy() {
    	}
    }",45440955,"I was fighting with KeyCloak and CORS and all of this for about two weeks, and this is my solution (for keycloak 3.2.1):

Its all about configuring KeyCloak server.
It seems to be, that WebOrigin of your Realm needs to be <pre>&#42;</pre>
Only one origin ""&#42;"".

Thats all, what was needed for me.

If you enter your server as WebOrigin, the trouble begins.
When you call keycloak.init in JavaScript, keycloak does not generate CORS headers, so you have to configure them manually, and as soon as you do so, and call keycloak.getUserInfo after successful init - you get double CORS headers, which is not allowed.

Somewhere deep inside of keycloak mailing lists is stated, that you need to set enable-cors=true in your keycloak.json, but there is nothing about that on keycloak.gitbooks.io. So it seems not to be true.

They also don't mention CORS when describing JavaScript and Node.Js adapters, and I don't know why, seems not to be important at all.

It also seems to be, that you should not touch WildFly configuration to provide CORS headers.

Besides, CORS in OIDC is a special KeyCloak feature (and not a bug).

Hopefully this answer serves you well."
54305880,How can I restrict client access to only one group of users in keycloak?,"I have a client in `keycloak` for my awx(ansible tower) webpage.

I need only the users from one specific `keycloak` group to be able to log in through this client. 

How can I forbid all other users(except from one particular group) from using this `keycloak` client?",54384513,"I solved it like this:

1. Create a new role in Keycloak.
2. Assign this role to the group.
3. Create a new authentication script in Kycloak. Configure which role is allowed upon login (e.g. `user.hasRole(realm.getRole(""yourRoleName""))`).
4. In the client's settings, under ""Authentication Flow Overrides"", choose the authentication script that was just created."
42524153,"Keycloak, not returning access token if update password action selected","I am calling `/auth/realms/master/protocol/openid-connect/token` to get access token by sending below content in body,
`grant_type=password&client_id=example-docker-jaxrs-app&username=user&password=password&client_secret=1d27aedd-11c2-4ed2-97d5-c586e1f9b3cd`

but when I put update password as required action to user from keycloak admin console getting following error when try to get token by above mentioned api,


    {
        ""error"": ""invalid_grant"",
        ""error_description"": ""Account is not fully set up""
    }



one more thing, What is difference in 2 setting, Temporary password and Update password Required action ? 

[![Temporary flag here in users credential tab][2]][2]

[![Update password as required action in user details tab][3]][2]


  
  [2]: https://i.stack.imgur.com/TeLzf.png
  [3]: https://i.stack.imgur.com/TDYeH.png",42602411,"If you mark the password as temporary a user action to `update password` is marked as required. 

And until the password has been updated/set by the user i.e. this action has been completed, you won't be able to get an access token using this user since the account is not ""fully setup"" and is in a kind of intermediate state where an action is required to complete the setup."
48855122,Keycloak adaptor for golang application,"I am going to secure my golang application using keycloak, but keycloak itself does not support go language. 

There are some go adaptor as an open project in github that has implemented openId connect protocol as a provider service, but they do not provide an example or documentation on how to integrate libraries with an application. 

How can i interact with keycloak using golang?",51456282,"As you have pointed out, there is no official keycloak adapter for golang.
But it is pretty straight forward to implement it. Here is a little walk through.

## Keycloak server

For this example, I will use the official keycloak docker image to start the server.
The version used is 4.1.0.Final. I think this will work with older KeyCloak versions too though.

    docker run -d -p 8080:8080 -e KEYCLOAK_USER=keycloak -e KEYCLOAK_PASSWORD=k --name keycloak jboss/keycloak:4.1.0.Final

After the server is up and running, you can open `localhost:8080/auth` in your browser, navigate to the administration console and login with username `keycloak` and `k` as the corresponding password.

I will not go through the complete process of creating a realm/clients/users. You can look this up under 
https://www.keycloak.org/docs/latest/server_admin/index.html#admin-console

Here is just an outline for what I did to reproduce this example:

1. create a realm named `demo`
2. turn off the requirement of ssl for this realm (realmsettings -> login -> require ssl) 
3. create a client named `demo-client` (change the ""Access Type"" to confidential)
4. create a user named demo with password demo (users -> add user). Make sure to activate and impersonate this user.
5. configure the demo-client to be confidential and use `http://localhost:8181/demo/callback` as a valid redirect URI.

The resulting keycloak.json (obtained from the installation tab) looks like this:

    {
        ""realm"": ""demo"",
        ""auth-server-url"": ""http://localhost:8080/auth"",
        ""ssl-required"": ""none"",
        ""resource"": ""demo-client"",
        ""credentials"": {
            ""secret"": ""cbfd6e04-a51c-4982-a25b-7aaba4f30c81""
        },
        ""confidential-port"": 0
    }

Beware that your secret will be different though. 

## The Go Server

Let's go over to the go server. I use the `github.com/coreos/go-oidc` package for the heavy lifting:

    package main

    import (
        ""context""
        ""encoding/json""
        ""log""
        ""net/http""
        ""strings""

        oidc ""github.com/coreos/go-oidc""
        ""golang.org/x/oauth2""
    )

    func main() {
        configURL := ""http://localhost:8080/auth/realms/demo""
        ctx := context.Background()
        provider, err := oidc.NewProvider(ctx, configURL)
        if err != nil {
            panic(err)
        }

        clientID := ""demo-client""
        clientSecret := ""cbfd6e04-a51c-4982-a25b-7aaba4f30c81""

        redirectURL := ""http://localhost:8181/demo/callback""
        // Configure an OpenID Connect aware OAuth2 client.
        oauth2Config := oauth2.Config{
            ClientID:     clientID,
            ClientSecret: clientSecret,
            RedirectURL:  redirectURL,
            // Discovery returns the OAuth2 endpoints.
            Endpoint: provider.Endpoint(),
            // ""openid"" is a required scope for OpenID Connect flows.
            Scopes: []string{oidc.ScopeOpenID, ""profile"", ""email""},
        }
        state := ""somestate""

        oidcConfig := &oidc.Config{
            ClientID: clientID,
        }
        verifier := provider.Verifier(oidcConfig)

        http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {
            rawAccessToken := r.Header.Get(""Authorization"")
            if rawAccessToken == """" {
                http.Redirect(w, r, oauth2Config.AuthCodeURL(state), http.StatusFound)
                return
            }

            parts := strings.Split(rawAccessToken, "" "")
            if len(parts) != 2 {
                w.WriteHeader(400)
                return
            }
            _, err := verifier.Verify(ctx, parts[1])

            if err != nil {
                http.Redirect(w, r, oauth2Config.AuthCodeURL(state), http.StatusFound)
                return
            }

            w.Write([]byte(""hello world""))
        })

        http.HandleFunc(""/demo/callback"", func(w http.ResponseWriter, r *http.Request) {
            if r.URL.Query().Get(""state"") != state {
                http.Error(w, ""state did not match"", http.StatusBadRequest)
                return
            }

            oauth2Token, err := oauth2Config.Exchange(ctx, r.URL.Query().Get(""code""))
            if err != nil {
                http.Error(w, ""Failed to exchange token: ""+err.Error(), http.StatusInternalServerError)
                return
            }
            rawIDToken, ok := oauth2Token.Extra(""id_token"").(string)
            if !ok {
                http.Error(w, ""No id_token field in oauth2 token."", http.StatusInternalServerError)
                return
            }
            idToken, err := verifier.Verify(ctx, rawIDToken)
            if err != nil {
                http.Error(w, ""Failed to verify ID Token: ""+err.Error(), http.StatusInternalServerError)
                return
            }

            resp := struct {
                OAuth2Token   *oauth2.Token
                IDTokenClaims *json.RawMessage // ID Token payload is just JSON.
            }{oauth2Token, new(json.RawMessage)}

            if err := idToken.Claims(&resp.IDTokenClaims); err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }
            data, err := json.MarshalIndent(resp, """", ""    "")
            if err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }
            w.Write(data)
        })

        log.Fatal(http.ListenAndServe(""localhost:8181"", nil))
    }

This program starts a regular http server with two endpoints. The first one (""/"") is your regular endpoint that handles
application logic. In this case, it only returns ""hello world"" to your client.

The second endpoint (""/demo/callback"") is used as a callback for keycloak. This endpoint needs to be registered on your
keycloak server. Keycloak will issue a redirect to this callback URL upon successful user authentication. The redirect contains some additional query parameters. These parameters contain a code that can be used to obtain access/id tokens.

## Verify your setup

In order to test this setup you can open a webbrowser and navitage to `http://localhost:8181`. 
The request should reach your go server, which tries to authenticate you. Since you did not send a token, the go server
will redirecty you to keycloak to authenticate. 
You should see the login screen of keycloak. Login with the demo user you have created for this realm (demo/demo).
If you have configured your keycloak correctly, it will authenticate you and redirect you to your go server callback.

The end result should be a json like this

    {
        ""OAuth2Token"": {
            ""access_token"": ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJsc1hHR2VxSmx3UUZweWVYR0x6b2plZXBYSEhXUngtTHVJTVVLdDBmNmlnIn0.eyJqdGkiOiI5ZjAxNjM2OC1lYmEwLTRiZjMtYTU5Ni1kOGU1MzdmNTNlZGYiLCJleHAiOjE1MzIxNzM2NTIsIm5iZiI6MCwiaWF0IjoxNTMyMTczMzUyLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvZGVtbyIsImF1ZCI6ImRlbW8tY2xpZW50Iiwic3ViIjoiMzgzMzhjOGItYWQ3Zi00NjlmLTgzOTgtMTc5ODk1ODFiYTEyIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiZGVtby1jbGllbnQiLCJhdXRoX3RpbWUiOjE1MzIxNzMzNTIsInNlc3Npb25fc3RhdGUiOiJjZTg2NWFkZC02N2I4LTQ5MDUtOGYwMy05YzE2MDNjMWJhMGQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInByZWZlcnJlZF91c2VybmFtZSI6ImRlbW8iLCJlbWFpbCI6ImRlbW9AZGVtby5jb20ifQ.KERz8rBddxM9Qho3kgigX-fClWqbKY-3JcWT3JOQDoLa-prkorfa40BWlyf9ULVgjzT2d8FLJpqQIQYvucKU7Q7vFBVIjTGucUZaE7b6JGMea5H34A1i-MNm7L2CzDJ2GnBONhNwLKoftTSl0prbzwkzcVrps-JAZ6L2gssSa5hBBGJYBKAUfm1OIb57Jq0vzro3vLghZ4Ay7iNunwfcHUrxiFJfUjaU6PQwzrA5pnItOPuavJFUgso7-3JLtn3X9GQuyyZKrkDo6-gzU0JZmkQQzAXXgt43NxooryImuacwSB5xbIKY6qFkedldoOPehld1-oLv0Yy_FIwEad3uLw"",
            ""token_type"": ""bearer"",
            ""refresh_token"": ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJsc1hHR2VxSmx3UUZweWVYR0x6b2plZXBYSEhXUngtTHVJTVVLdDBmNmlnIn0.eyJqdGkiOiI0MjdmMTlhYy1jMTkzLTQ2YmQtYWFhNi0wY2Q1OTI5NmEwMGQiLCJleHAiOjE1MzIxNzUxNTIsIm5iZiI6MCwiaWF0IjoxNTMyMTczMzUyLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvZGVtbyIsImF1ZCI6ImRlbW8tY2xpZW50Iiwic3ViIjoiMzgzMzhjOGItYWQ3Zi00NjlmLTgzOTgtMTc5ODk1ODFiYTEyIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImRlbW8tY2xpZW50IiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiY2U4NjVhZGQtNjdiOC00OTA1LThmMDMtOWMxNjAzYzFiYTBkIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIn0.FvvDW6ZSH8mlRR2zgaN1zesX14SmkCs9RrIVU4Jn1-SHVdKEA6YKur0-RUAFTObQDMLVhFFJ05AjGVGWpBrgVDcAwW2pI9saM-OHlyTJ3VfFoylgfzakVOIpbIDnHO12UaJrkOI9NWPAJdbBOzBHfsDhKbxhjg4ZX8SwlKr42rV4WWuSRcNu4_YDVO19SiXSCKXVldZ1_2S-qPvViq7VZfaoRLHuYyDvma_ByMsmib9JUkevJ8dxsYxVQ5FWaAfFanh1a1f8HxNRI-Cl180oPn1_Tqq_SYwxzBCw7Q_ENkMirwRS1a4cX9yMVEDW2uvKz2D-OiNAUK8d_ONuPEkTGQ"",
            ""expiry"": ""2018-07-21T13:47:28.986686385+02:00""
        },
        ""IDTokenClaims"": {
            ""jti"": ""f4d56526-37d9-4d32-b99d-81090e92d3a7"",
            ""exp"": 1532173652,
            ""nbf"": 0,
            ""iat"": 1532173352,
            ""iss"": ""http://localhost:8080/auth/realms/demo"",
            ""aud"": ""demo-client"",
            ""sub"": ""38338c8b-ad7f-469f-8398-17989581ba12"",
            ""typ"": ""ID"",
            ""azp"": ""demo-client"",
            ""auth_time"": 1532173352,
            ""session_state"": ""ce865add-67b8-4905-8f03-9c1603c1ba0d"",
            ""acr"": ""1"",
            ""email_verified"": true,
            ""preferred_username"": ""demo"",
            ""email"": ""demo@demo.com""
        }
    }


You can copy your access token and use curl to verify if the server is able to accept your tokens:

    # use your complete access token here
    export TOKEN=""eyJhbG...""
    curl -H ""Authorization: Bearer $TOKEN"" localhost:8181
    # output hello world

You can try it again after the token has expired - or temper with the token. In case you do it, you should get a redirect to 
your keycloak server again."
49810326,How to Create a Client in Keycloak to use with AWS Cognito Identity Federation,"I have a user base with identity and authentication managed by keycloak. I would like to allow these users to login and use AWS API Gateway services with Cognito using an OpenID Connect federation.

The AWS documentation on using an OpenID Connect provider is somewhat lacking. I found an [old reference][1] using SAML but would prefer to avoid this and use OpenID Connect.

If anybody has achieved this would they mind writing up some simple instructions from the keycloak admin perspective?

  [1]: https://stories.scandiweb.com/sign-in-to-amazon-aws-using-saml-protocol-and-keycloak-as-identity-provider-e3798387de99",50343585,"Answering my own question for future searchers based on advice I have received from AWS Support:

The question itself was based on a misunderstanding. AWS Cognito does not authenticate users with Keycloak - the client application does that. 

Cognito Identity Federation is about granting access to AWS resources by creating AWS Access credentials to an identity with a token from an external identity provider.

The OpenID client in keycloak is the one and same client that is used by the end-user application. Redirection URLs send the user back to the application, which then passes the JWT token to AWS to exchange for AWS credentials.

Cognito relies on the client app first directing the user to the authentication provider of their choice (in this case Keycloak), and then passing the access token from Keycloak to Cognito which uses it to 1) create an identity if required, and 2) generate AWS credentials for access to the AWS role for ""Authenticated"" users in Cognito.

An example using the AWS CLI
----------------------------

*Prerequisite: client app obtains JWT access token for the end user using any OpenID authentication method*
    
Create or retrieve an identity from cognito:

    aws cognito-identity get-id --cli-input-json file://test.json
    
Returns the identity:

    {
        ""IdentityId"": ""ap-southeast-2:<identity_uuid>""
    }
*(substitute `ap-southeast-2` in the examples with your local region)*

`test.json` contains the details of the AWS Account, the Cognito pool and the user's JWT access token from Keycloak:
    
    {
        ""AccountId"": ""123456789012"",
        ""IdentityPoolId"": ""ap-southeast-2:<cognito-identity-pool-uuid>"",
        ""Logins"": {
            ""keycloak.url/auth/realms/realmname"": ""<access_token_jwt>""
         }
    }

The app can then use this returned identity, along with the JWT access token to obtain AWS Credentials with which to consume AWS services...

    aws cognito-identity get-credentials-for-identity --identity-id ap-southeast-2:<identity_uuid> --cli-input-json file://test2.json

Returns an AccessKeyId, a SecretKey and an AWS SessionToken along with an expiry time. These can be used to access AWS services depending on the permissions of the authenticated role that was established in the setting for the Cognito Federated Identity Pool:

    {
        ""Credentials"": {
            ""SecretKey"": ""<secret_key>"",
            ""SessionToken"": ""<aws_cli_session_token>"",
            ""Expiration"": 1567891234.0,
            ""AccessKeyId"": ""<access_key>""
        },
        ""IdentityId"": ""ap-southeast-2:<identity_uuid>""
    }

The contents of `test2.json`

    {
        ""IdentityId"": ""ap-southeast-2:<identity_uuid>"",
        ""Logins"": {
            ""keycloak.url/auth/realms/realmname"": ""<keycloak_access_token_jwt>""
        }
    }

I hope this provides context and assistance to people that stumble across this question in future."
57787768,Example keycloak spring-boot app fails to find bean KeycloakSpringBootConfigResolver,"I'm trying to run example app from:

https://github.com/keycloak/keycloak-quickstarts/tree/latest/app-springboot

I'm getting error:

    ***************************
    APPLICATION FAILED TO START
    ***************************

    Description:

    Parameter 1 of method setKeycloakSpringBootProperties in org.keycloak.adapters.springboot.KeycloakBaseSpringBootConfiguration required a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' that could not be found.


    Action:

    Consider defining a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' in your configuration.


    Process finished with exit code 1",57796450,"I don't have a solution at the moment, but I can see that the exact same issue has been registered on the Keycloak Jira a couple of months ago: https://issues.jboss.org/browse/KEYCLOAK-10595. The problem seems to be caused by the code delivered with this PR: https://github.com/keycloak/keycloak/pull/6075.

The author of the PR described the problem in this way:
""The only remaining problem is, that the resolver is usually contained in the configuration using the KeycloakAutoConfiguration (in my example the SharedConfiguration) so you are trying to access the bean while the configuration is stil being created. This can be solved by moving the resolver bean into another configuration which has to be loaded before the KeycloakAutoConfiguration.""
(source: https://issues.jboss.org/browse/KEYCLOAK-10334?focusedCommentId=13738518&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-13738518)

----------
**UPDATE (OLD)**

On the issue from the Keycloak Jira (https://issues.jboss.org/browse/KEYCLOAK-11282), a temporary workaround has been suggested.

    @Configuration
    public class MyKeycloakSpringBootConfigResolver extends KeycloakSpringBootConfigResolver {
        private final KeycloakDeployment keycloakDeployment;
    
        public MyKeycloakSpringBootConfigResolver(KeycloakSpringBootProperties properties) {
            keycloakDeployment = KeycloakDeploymentBuilder.build(properties);
        }
    
        @Override
        public KeycloakDeployment resolve(HttpFacade.Request facade) {
            return keycloakDeployment;
        }
    }


----------
**LATEST UPDATE**

A simpler way to solve the problem is to declare a `KeycloakSpringBootConfigResolver` in a separate configuration class. This option will fix issues with both Spring Boot and Spring Security.

    @Configuration
    public class KeycloakConfig {
    
        @Bean
        public KeycloakSpringBootConfigResolver keycloakConfigResolver() {
            return new KeycloakSpringBootConfigResolver();
        }
    }"
46729330,Copy entire directory from container to host,"I'm trying to copy an entire directory from my docker image to my local machine.

The image is a keycloak image, and I'd like to copy the themes folder so I can work on a custom theme.

I am running the following command -

    docker cp 143v73628670f:keycloak/themes ~/Development/Code/Git/keycloak-recognition-login-branding

However I am getting the following response -

    Error response from daemon: Could not find the file keycloak/themes in container 143v73628670f

When I connect to my container using -

     docker exec -t -i 143v73628670f /bin/bash

I can navigate to the themes by using -

    cd keycloak/themes/

I can see it is located there and the files are as expected in the terminal.

I'm running the instance locally on a Mac.

How do I copy that entire themes folder to my local machine? What am I doing wrong please?",46729739,"**EDIT**

As a result of running 'pwd' your should run the Docker cp command as follows:

    docker cp 143v73628670f:/opt/jboss/keycloak/themes ~/Development/Code/Git/keycloak-recognition-login-branding



You are forgetting the trailing ' / '. Therefore your command should look like this:

    docker cp 143v73628670f:/keycloak/themes/ ~/Development/Code/Git/keycloak-recognition-login-branding

Also, you could make use of Docker volumes, which allows you to pass a local directory into the container when you *run* the container"
41721032,Keycloak client for ASP.NET Core,"Is there any existing Keycloak client for Asp.net Core? [I have found a NuGet package for .net][1] but it doesn't work with Core. Do you have any ideas how to easily integrate with this security server (or maybe using any other alternatives)?


  [1]: https://www.nuget.org/packages/Owin.Security.Keycloak",43875291,"I've played a bit with this today. The most straightforward way is too use OpenId standard.

In Startup.cs I used OpenIdConnect Authentication:

        public void Configure(...)
        { (...)
             app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationScheme = CookieAuthenticationDefaults.AuthenticationScheme,
                AutomaticAuthenticate = true,
                CookieHttpOnly = true,
                CookieSecure = CookieSecurePolicy.SameAsRequest
            });
            app.UseOpenIdConnectAuthentication(CreateKeycloakOpenIdConnectOptions());`(...)
     }`

OpenIdConnectOptions method:

    private OpenIdConnectOptions CreateKeycloakOpenIdConnectOptions()
        {
            var options = new OpenIdConnectOptions
            {
                AuthenticationScheme = ""oidc"",
                SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme,
                Authority = Configuration[""Authentication:KeycloakAuthentication:ServerAddress""]+""/auth/realms/""+ Configuration[""Authentication:KeycloakAuthentication:Realm""],
                RequireHttpsMetadata = false, //only in development
                PostLogoutRedirectUri = Configuration[""Authentication:KeycloakAuthentication:PostLogoutRedirectUri""],
                ClientId = Configuration[""Authentication:KeycloakAuthentication:ClientId""],
                ClientSecret = Configuration[""Authentication:KeycloakAuthentication:ClientSecret""],
                ResponseType = OpenIdConnectResponseType.Code,
                GetClaimsFromUserInfoEndpoint = true,
                SaveTokens = true

            };
            options.Scope.Add(""openid"");
            return options;
        }

In appsettings.json add configuration for Keycloak:

<!-- begin snippet: js hide: false console: false babel: false -->

<!-- language: lang-js -->

    {
      (...),
      ""Authentication"": {
        ""KeycloakAuthentication"": {
          ""ServerAddress"": ""http://localhost:8180"",
          ""Realm"": ""demo"",
          ""PostLogoutRedirectUri"": ""http://localhost:57630/"",
          ""ClientId"": ""KeycloakASPNETCore"",
          ""ClientSecret"": ""secret-get-it-in-keycloakConsole-client-credentials""
        }
      }
    }

<!-- end snippet -->

Keycloak  client is configuerd as followed:

 

- [Client settings][1],
- [I've added 'accounting' role for test][2],
- [I added mapper 'member_of' of type 'User Client Role' for roles so that roles are added in the claims][3]


If I want to Authorize user by role I do something like this:

Add [authorization by claims][4] in ConfigureServices method:

    public void ConfigureServices(IServiceCollection services)
        {
            (...)

            services.AddAuthorization(options =>
            {
                options.AddPolicy(""Accounting"", policy =>
                policy.RequireClaim(""member_of"", ""[accounting]"")); //this claim value is an array. Any suggestions how to extract just single role? This still works.
            });
        }

I've edited get method in ValuesController (Default Web API template):

    [Authorize(Policy = ""Accounting"")]
    [Route(""api/[controller]"")]
    public class ValuesController : Controller
    {
        // GET api/values        
        [HttpGet]
        public Dictionary<string,string> Get()
        {
            var userPrinciple = User as ClaimsPrincipal;
            var claims = new Dictionary<string, string>();
            
            foreach (var claim in userPrinciple.Claims)
            {
                var key = claim.Type;
                var value = claim.Value;

                claims.Add(key, value);
            }
            

            return claims;
        }

If I login with user that has accounting role or is in group that has accounting role, it should display my user claims on address localhost:57630/api/values.
  
  [1]: https://i.stack.imgur.com/4VINc.png
  [2]: https://i.stack.imgur.com/EVE5h.png
  [3]: https://i.stack.imgur.com/DK848.png
  [4]: https://learn.microsoft.com/en-us/aspnet/core/security/authorization/claims

I hope this works for you.

**Edit: .NET Core 2**
Hi everyone! The way my app works changed quite a bit and I have not fully tested .NET Core 2 yet, but you can still try connecting to Keycloak like this in ConfigureServices:

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    
                    options.Authority = Configuration[""Authentication:KeycloakAuthentication:ServerAddress""] + ""/auth/realms/"" + Configuration[""Authentication:KeycloakAuthentication:Realm""];
                    options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
                    {
                        ValidAudiences = new string[] { ""curl"", ""financeApplication"", ""accountingApplication"", ""swagger""}
                    };
                    options.RequireHttpsMetadata = false; //for test only!
                    options.SaveToken = true;
                    options.Validate();
                    
                });

And in Configure:

    app.UseAuthentication();

You can access your token later with IHttpContextAccessor httpContextAccessor, for example:

    public KeycloakAuthorizationRequirementHandler(IConfiguration config,
                IHttpContextAccessor httpContextAccessor,
                IMemoryCache memoryCache)
            {
                _config = config;
                _httpContextAccessor = httpContextAccessor;
                _memoryCache = memoryCache;
            }

//get accessToken

    var accessToken = _httpContextAccessor.HttpContext.GetTokenAsync(""access_token"");

    _httpContextAccessor.HttpContext.Items[""username""] = username;

Tell me how it goes. "
46470477,How to get Keycloak users via REST without admin account,"Is there a way to get a list of users on a Keycloak realm via REST **WITHOUT** using an admin account? Maybe some sort of assignable role from the admin console? Looking for any ideas.

Right now I'm using admin credentials to grab an access token, then using that token to pull users from the `realm/users` endpoint.

Getting the token (from node.js app via `request`):

    uri: `${keycloakUri}/realms/master/protocol/openid-connect/token`,
    form: {
      grant_type: 'password',
      client_id: 'admin-cli',
      username: adminUsername,
      password: adminPassword,
    }

Using the token:

    uri: `${keycloakUri}/admin/realms/${keycloakRealm}/users`,
    headers: {
      'authorization': `bearer ${passwordGrantToken}`,
    }

I want to be able to use generic user info (usernames, emails, fullnames) from a client application.

",46558530,"You need to assign the `view-users` role from the `realm-management` client, for the desired user. That would be the configuration for the user:

[![enter image description here][1]][1]

Then you can grab all the users from the `${keycloakUri}/admin/realms/${keycloakRealm}/users` endpoint. That's the info retrieved from the enpoint, accesed via Postman:

[![enter image description here][2]][2]

Also, unrelated to the asked question, I strongly encourage you not to use `grant_type=password` unless you absolutelly need to. From the [keycloak blog][3]:

    RESULT=`curl --data ""grant_type=password&client_id=curl&username=user&password=password"" http://localhost:8180/auth/realms/master/protocol/openid-connect/token`

> This is a bit cryptic and luckily this is not how you should really be obtaining tokens. Tokens should be obtained by web applications by redirecting to the Keycloak login page. We're only doing this so we can test the service as we don't have an application that can invoke the service yet. Basically what we are doing here is invoking Keycloaks OpenID Connect token endpoint with grant type set to password which is the Resource Owner Credentials flow that allows swapping a username and a password for a token.

See also the [Oauth2 spec][4].


  [1]: https://i.stack.imgur.com/Oaz0k.png
  [2]: https://i.stack.imgur.com/sUqxd.png
  [3]: https://planet.jboss.org/post/getting_started_with_keycloak_securing_a_rest_service
  [4]: https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2"
67044893,M1 mac cannot run jboss/keycloak docker image,"Switched to m1 mac a week ago and I cannot get my application up and running with docker because of the jboss/keycloak image not working as expected. Getting the following message from the container when trying to access localhost:8080

    12:08:12,456 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-5) MSC000001: Failed to start service org.wildfly.network.interface.private: org.jboss.msc.service.StartException in service org.wildfly.network.interface.private: WFLYSRV0082: failed to resolve interface private

    12:08:12,526 ERROR [org.jboss.as.controller.management-operation] (Controller Boot Thread) WFLYCTL0013: Operation (""add"") failed - address: ([(""interface"" => ""private"")]) - failure description: {""WFLYCTL0080: Failed services"" => {""org.wildfly.network.interface.private"" => ""WFLYSRV0082: failed to resolve interface private""}}

    12:08:13,463 ERROR [org.jboss.as] (Controller Boot Thread) WFLYSRV0026: Keycloak 12.0.4 (WildFly Core 13.0.3.Final) started (with errors) in 20826ms - Started 483 of 925 services (54 services failed or missing dependencies, 684 services are lazy, passive or on-demand)

Tried with all image versions and all behave the same. Has anyone managed to run this image without issues? Thanks",67283879,"Using this image, I am now able to startup keycloak. https://hub.docker.com/r/wizzn/keycloak"
56561554,Keycloak Realm VS Keycloak Client,"I am recently working on Keycloak 6.0.1 for SSO for authentication for multiple applications in organisation.  I am confused in difference between clients and realm.  

If I have 5 different application to be managed for SSO then do I have to create 5 different clients or 5 different realm ?

If I say I have to create 5 different Clients under 1 realm then could I execute different authentication flow for different client in same realm ?

",59385683,"According to Keycloak documentation 

 1. Realm - A realm manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control.

 2. Clients are entities that can request Keycloak to authenticate a user. Most often, clients are applications and services that want to use Keycloak to secure themselves and provide a single sign-on solution. Clients can also be entities that just want to request identity information or an access token so that they can securely invoke other services on the network that are secured by Keycloak.

For your scenario you can create 5 different clients under one realm. Keycloak provides out of the box support for Single Sign On. For more information refer to Keycloak documentation [keycloak documentation link][1]


  [1]: https://www.keycloak.org/docs/latest/getting_started/"
48146410,unable to get oauth token from Keycloak,"I have an application which is getting Auth from Keycloak.

My Access Type is public so I do not have any client secret.

I have given access to ""**Direct Access Grants Enabled**"" as **ON**

Refer below:

[![enter image description here][1]][1]

I am getting error from postman as below:

    {
        ""error"": ""invalid_grant"",
        ""error_description"": ""Invalid user credentials""
    }

Note : My credentials is right as I am using same to login on keycloak

I have also check the key and they seems correct as per below reference:

https://gist.github.com/rac021/623e4f4c87069acd0c38d952568f8a3d

while I have setup as per my understanding.

References:

[![enter image description here][2]][2]


[![enter image description here][3]][3]

Please let me know if I missing anything or you need any more details.

Any workaround will be appreciated !!!!

  [1]: https://i.stack.imgur.com/EMQ3x.jpg
  [2]: https://i.stack.imgur.com/lX2yy.jpg
  [3]: https://i.stack.imgur.com/hTZu8.jpg",48147104,"The error message ``""Invalid user credentials""`` is reliable. That is, you either specified a wrong username or password.  
Check that the user really exists in the realm you are addressing with the URL. Particularly if it is not the _master_ realm which usually will be used to login to keycloak admin console."
53118828,Keycloak public client and authorization,"We are using keycloak-adapter with Jetty for authentication and authorization using Keycloak.
As per [Keycloak doc for OIDC Auth flow][1]:

> **Another important** aspect of this flow is the concept of a **public vs. a confidential** client.   Confidential clients are required to
> provide a client secret when they exchange the temporary codes for
> tokens. Public clients are not required to provide this client secret.
> Public clients are perfectly fine so long as HTTPS is strictly
> enforced and you are very strict about what redirect URIs are
> registered for the client.
> 
> HTML5/JavaScript clients always have to be public clients because
> there is no way to transmit the client secret to them in a secure
> manner.

We have webapps which connect to Jetty and use auth. So, we have created a public client and it works awesome for webapp/REST authentication.  
The problem is as soon as we enable authorization, client type gets converted to Confidential from Public and it does not allow the reset it as Public. Now, we are in soup. We cannot have public clients due to authorization and we cannot connect webapps to confidential client.  
This seems to be contradictory to us. Any idea why client needs to be confidential for authorization? Any help on this how can we overcome this issue?  
Thanks.


  [1]: https://www.keycloak.org/docs/latest/server_admin/index.html#_oidc-auth-flows",56824022,"As far as I understood, you have your frontend and backend applications separated. If your frontend is a static web-app and not being served by the same backend application (server), and your backend is a simple REST API - then you would have two Keycloak clients configured:

* ``public`` client for the frontend app. It would be responsible for acquiring JWT tokens. 
* ``bearer-only`` client, which would be attached to your backend application.

To enable authorization you would create roles (either realm or client scoped, start on the realm level as it's easier to comprehend). Every user would then be assigned a role/s in the Keycloak admin UI. Based on this you should configure your keycloak adapter configuration (on the backend).

All things considered, in order to talk to your REST API, you would attach a JWT token to each HTTP request in the Authorization header. Depending on your frontend framework, you can use either of these:

* [Keycloak js adapter][1]
* Other bindings ([angular][2], [react][3])

> P.S. For debugging I have just written a CLI tool called [brauzie][4]
> that would help you fetch and analyse your JWT tokens (scopes, roles, etc.). It could be used for both public and confidential clients. You
> could as well use [Postman][5] and https://jwt.io

HTH :)

  [1]: https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter
  [2]: https://www.npmjs.com/package/keycloak-angular
  [3]: https://www.npmjs.com/package/react-keycloak
  [4]: https://github.com/maslick/brauzie
  [5]: https://www.getpostman.com/"
48274251,Keycloak: Access token validation end point,"Running keycloak on standalone mode.and created a micro-service by using node.js adapter for authenticating api calls.

jwt token from the keyclaok is sending along with each api calls. it will only respond if the token sent is a valid one.

 - how can i validate the access token from the micro service?
 - is there any token validation availed by keycloak?

",51047525,"To expand on [troger19's answer][1]:

> Question 1: How can I validate the access token from the micro service?

Implement a function to inspect each request for a bearer token and send that token off for validation by your keycloak server at the userinfo endpoint before it is passed to your api's route handlers.

You can find your keycloak server's specific endpoints (like the userinfo route) by requesting its [well-known configuration][2].

If you are using expressjs in your node api this might look like the following:

    const express = require(""express"");
    const request = require(""request"");
    
    const app = express();
    
    /*
     * additional express app config
     * app.use(bodyParser.json());
     * app.use(bodyParser.urlencoded({ extended: false }));
     */
    
    const keycloakHost = 'your keycloak host';
    const keycloakPort = 'your keycloak port';
    const realmName = 'your keycloak realm';
    
    // check each request for a valid bearer token
    app.use((req, res, next) => {
      // assumes bearer token is passed as an authorization header
      if (req.headers.authorization) {
        // configure the request to your keycloak server
        const options = {
          method: 'GET',
          url: `https://${keycloakHost}:${keycloakPort}/auth/realms/${realmName}/protocol/openid-connect/userinfo`,
          headers: {
            // add the token you received to the userinfo request, sent to keycloak
            Authorization: req.headers.authorization,
          },
        };
    
        // send a request to the userinfo endpoint on keycloak
        request(options, (error, response, body) => {
          if (error) throw new Error(error);
    
          // if the request status isn't ""OK"", the token is invalid
          if (response.statusCode !== 200) {
            res.status(401).json({
              error: `unauthorized`,
            });
          }
          // the token is valid pass request onto your next function
          else {
            next();
          }
        });
      } else {
        // there is no token, don't process request further
        res.status(401).json({
        error: `unauthorized`,
      });
    });
    
    // configure your other routes
    app.use('/some-route', (req, res) => {
      /*
      * api route logic
      */
    });
    
    
    // catch 404 and forward to error handler
    app.use((req, res, next) => {
      const err = new Error('Not Found');
      err.status = 404;
      next(err);
    });

> Question 2: Is there any token validation availed by Keycloak?

Making a request to Keycloak's userinfo endpoint is an easy way to verify that your token is valid.

Userinfo response from **valid token**:

> Status: 200 OK

    {
        ""sub"": ""xxx-xxx-xxx-xxx-xxx"",
        ""name"": ""John Smith"",
        ""preferred_username"": ""jsmith"",
        ""given_name"": ""John"",
        ""family_name"": ""Smith"",
        ""email"": ""john.smith@example.com""
    }

Userinfo response from **invalid valid token**:

> Status: 401 Unauthorized

    {
        ""error"": ""invalid_token"",
        ""error_description"": ""Token invalid: Token is not active""
    }

**Additional Information:**

Keycloak provides its own npm package called [keycloak-connect][3]. The documentation describes simple authentication on routes, requiring users to be logged in to access a resource:

    app.get( '/complain', keycloak.protect(), complaintHandler );

I have not found this method to work using bearer-only authentication. In my experience, implementing this simple authentication method on a route results in an ""access denied"" response. [This question][4] also asks about how to authenticate a rest api using a Keycloak access token. [The accepted answer][5] recommends using the simple authentication method provided by keycloak-connect as well but as Alex states in the comments:

> ""The keyloak.protect() function (doesn't) get the bearer token from
> the header. I'm still searching for this solution to do bearer only
> authentication – alex Nov 2 '17 at 14:02


  [1]: https://stackoverflow.com/a/49856835/4488232
  [2]: https://stackoverflow.com/a/30449500/4488232
  [3]: https://www.keycloak.org/docs/3.3/securing_apps/topics/oidc/nodejs-adapter.html
  [4]: https://stackoverflow.com/questions/42394475/authenticate-a-rest-api-using-keycloak-access-token-received-from-authorization
  [5]: https://stackoverflow.com/a/42436437/4488232"
48400812,"SSO with SAML, Keycloak and Nextcloud","I am trying to setup Keycloak as a IdP (Identity Provider) and Nextcloud as a service. I want to setup Keycloak as to present a SSO (single-sign-on) page.

I am running a Linux-Server with a Intel compatible CPU. What is the correct configuration?

- Keycloak will be running as `https://kc.example.com`
- Nextcloud will be running as `https://nc.example.com`
",48400813,"*Prerequisite:*

To use this answer you will need to replace `example.com` with an **actual** domain you *own*. Also, replace `email@example.com` with your working e-mail address.

It is assumed you have docker and docker-compose installed and running.

# Setup your services with Docker
In addition to keycloak and nextcloud I use:

- **nginx** as a reverse-proxy
- **letsencyrpt** to generate the SSL-certificates for the sub-domains.

I'm setting up all the needed services with docker and docker-compose. This is how the `docker-compose.yml` looks like this:

    version: '2'

      nginx-proxy:
        image: jwilder/nginx-proxy
        restart: unless-stopped
        ports:
          - ""80:80""
          - ""443:443""
        volumes:
          - ""/etc/nginx/vhost.d""
          - ""./proxy-default.conf:/etc/nginx/conf.d/my-proxy.default.conf:ro""
          - ""/usr/share/nginx/html""
          - ""/var/run/docker.sock:/tmp/docker.sock:ro""
          - ""./le-cert:/etc/nginx/certs:ro""
        labels:
          com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: ""true""

      letsencrypt-nginx-proxy-companion:
        image: jrcs/letsencrypt-nginx-proxy-companion
        restart: unless-stopped
        depends_on:
          - nginx-proxy
        container_name: le-proxy-companion
        volumes:
          - ""/var/run/docker.sock:/var/run/docker.sock:ro""
          - ""./le-cert:/etc/nginx/certs:rw""
        volumes_from:
          - nginx-proxy

      keycloak:
        image: jboss/keycloak
        links:
          - keycloak-postgres:postgres
        ports:
          - 8080:8080
        volumes:
          - ./keycloak:/opt/jboss/keycloak
        environment:
          - KEYCLOAK_USER=admin
          - KEYCLOAK_PASSWORD=admin
          - ""PROXY_ADDRESS_FORWARDING=true""
          - VIRTUAL_PORT=8080
          - VIRTUAL_HOST=kc.example.com
          - LETSENCRYPT_HOST=kc.example.com
          - LETSENCRYPT_EMAIL=email@example.com

      keycloak-postgres:
        image: postgres
        environment:
          - POSTGRES_DB=keycloak
          - POSTGRES_USER=keycloak
          - POSTGRES_PASSWORD=keycloak

      nextcloud:
        image: hoellen/nextcloud
        environment:
          - UPLOAD_MAX_SIZE=10G
          - APC_SHM_SIZE=128M
          - OPCACHE_MEM_SIZE=128
          - CRON_PERIOD=15m
          - TZ=Europe/Berlin
          - DOMAIN=nc.example.com
          - ADMIN_USER=admin
          - ADMIN_PASSWORD=admin
          - DB_TYPE=mysql
          - DB_NAME=nextcloud
          - DB_USER=nextcloud
          - DB_PASSWORD=nextcloud
          - DB_HOST=nc-db
        volumes:
          - ./nc/nc-data:/data
          - ./nc/nc-config:/config
          - ./nc/nc-apps:/apps2
          - ./nc/nc-themes:/nextcloud/themes
        environment:
          - VIRTUAL_HOST=nc.example.com
          - LETSENCRYPT_HOST=nc.example.com
          - LETSENCRYPT_EMAIL=email@example.com

      nc-db:
        image: mariadb
        volumes:
          - ./nc/nc-db:/var/lib/mysql
        environment:
          - MYSQL_ROOT_PASSWORD=nextcloud
          - MYSQL_PASSWORD=nextcloud
          - MYSQL_DATABASE=nextcloud
          - MYSQL_USER=nextcloud

I put my docker-files in a folder `docker` and within this folder a project-specific folder. Here `keycloak`. Create them with:

    mkdir -p ~/docker/keycloak

Create the `docker-compose.yml`-File with your preferred editor in this folder. Start the services with:

    cd ~/docker/keycloak
    docker-compose up -d

Wait a moment to let the services download and start. Check if everything is running with:

    docker-compose ps

If a service isn't running. Issue a second `docker-compose up -d` and check again.

# Configure Keycloak, add a new Realm

Open a browser and go to `https://kc.example.com`. Click on *Administration Console*. As specified in your `docker-compose.yml`, Username and Password is `admin`.

On the top-left of the page, you need to create a new *Realm*. Click `Add`. Enter *my-realm* as the name. Click `Save`.

Click on the `Keys`-tab. Look at the `RSA`-entry. We will need to copy the Certificate of that line. Click on `Certificate` and copy-paste the content to a text editor for later use.

# Prepare a Private Key and Certificate for Nextcloud

Open a terminal and issue:

    openssl req  -nodes -new -x509  -keyout private.key -out public.cert

This creates two files: `private.key` and `public.cert` which we will need later for the nextcloud service.

# Configure Nextcloud

Open a browser and go to `https://nc.example.com`. As specified in your `docker-compose.yml`, Username and Password is `admin`.

You need to activate the `SSO & Saml Authenticate` which is disabled by default.

**Important** From here on **don't close** your *current* browser window until the setup is tested and running. If you close the browser before everything works you probably not be able to change your settings in nextcloud anymore. In such a case you will need to stop the nextcloud- and nextcloud-db-container, delete their respective folders, recreate them and start all over again.

Click on the top-right gear-symbol and then on the `+ Apps`-sign. On the left now see a Menu-bar with the entry `Security`. Click it. You now see all security-related apps. Click on the `Activate` button below the `SSO & SAML authentication` App.

Click on the top-right gear-symbol again and click on `Admin`. Click on `SSO & SAML authentication`.

Use the following values:

 - Attribute to map UID to: *username*
 - Enable ""Use SAML auth for the Nextcloud desktop clients (requires user re-authentication)""
 - Copy the content of `public.cert` into the 'X.509 Certificate'-field
 - Copy the content of `private.key` into the 'Private key of Service Provider'-field.
 - Identifier of the IdP: `https://kc.example.com/auth/realms/my-realm`
 - URL Target of the IdP where the SP will send the Authentication Request Message: `https://kc.example.com/auth/realms/my-realm/protocol/saml`
 - URL Location of IdP where the SP will send the SLO Request: `https://kc.example.com/auth/realms/my-realm/protocol/saml`
 - Public X.509 certificate of the IdP: Copy the certificate from Keycloak from the `Keys`-tab of `my-realm`. You will need to add '-----BEGIN CERTIFICATE-----' in front of the key and '-----END CERTIFICATE-----' to the end of it.
 - In-Service Provider Data:
   - Attribute, displayname: *username*
   - Attribute, email address: *email*
 - Security Settings, *enable* the following options:
   - Indicates whether the `<samlp:AuthnRequest>` messages sent by this SP will be signed. [Metadata of the SP will offer this info]
   - Indicates whether the `<samlp:logoutRequest>` messages sent by this SP will be signed.
   - Indicates whether the `<samlp:logoutResponse>` messages sent by this SP will be signed.
   - Indicates a requirement for the `<samlp:Response>`, `<samlp:LogoutRequest>` and `<samlp:LogoutResponse>` elements received by this SP to be signed.
   - Indicates a requirement for the `<saml:Assertion>` elements received by this SP to be signed. [Metadata of the SP will offer this info]
 - Check there is a `Metadata valid` beside the `Download metadata XML`-Button
[![This part of the configuration should look like this][1]][1]
 - Click the `Download metadata XML`-Button. This generates and sends an XML file. Save it for use in the next step.

# Configure Keycloak, Client

Access the Administrator Console again. Click on `Clients` and on the top-right click on the `Create`-Button.

Next to Import, click the `Select File`-Button. Select the XML-File you've created on the last step in Nextcloud.

Change:

- Client SAML Endpoint: `https://kc.example.com/auth/realms/my-realm`

and click `Save`.

You are presented with a new screen. Change the following fields:

- Name: *Nextcloud*
- Valid Redirect URIs: `https://nc.example.com/` *
- Click `Save`

On the Tab `Mappers`:

- Click `Delete`-Button on the preassigned `role list` (if it exists)
- Click `Create`
  - Name: *username*
  - Mapper Type: *User Property*
  - Property: *username*
  - SAML Attribute Name: *username*
  - SAML Attribute NameFormat: *Basic*
  - Click `Save`
- Click `Create`
  - Name: *email*
  - Mapper Type: *User Property*
  - Property: *email*
  - SAML Attribute Name: *email*
  - SAML Attribute NameFormat: *Basic*
  - Click `Save`
- Click `Create`
  - Name: *Roles*
  - Mapper Type: *Role List*
  - Role attribute name: *Roles*
  - Friendly Name: *roles*
  - SAML Attribute NameFormat: Basic
  - Single Role Attrubute: On
  - Click `Save`

# Configure Keycloak, Add user

- On the left side, click on `Users`
- On the top-right, click `Add users`
- Set the following values:
  - Username: *user*
  - Email: `user@example.com`
  - Click `Save`
- On the tab `Credentials`:
  - New Password: *user*
  - Password Confirmation: *user*
  - Temporary: *Off*
  - Click `Reset Password`
- A Window pops up:
  - Click `Change Password`

# Test run

Open a new browser window in incognito/private mode. Eg. for google-chrome press `Ctrl-Shift-N`, in Firefox press `Ctrl-Shift-P`. **Keep** the other browser window with the nextcloud setup page **open**. Else you might lock yourself out.

Access `https://nc.example.com` with the incognito/private browser window. You are presented with the keycloak username/password page. Enter `user` as a name and password. You should be greeted with the nextcloud welcome screen.

# Acknowledgement

- This guide wouldn't have been possible without the wonderful http://int128.hatenablog.com/entry/2018/01/16/194048 blog entry. I've read it with [google-translator](https://translate.google.com/translate?hl=en&sl=auto&tl=en&u=http%3A%2F%2Fint128.hatenablog.com%2Fentry%2F2018%2F01%2F16%2F194048) in English.
- Thanks goes also to [RMM][2]. His [wiki entry](https://rmm.li/wiki/doku.php?id=linux_server_manuals:nextcloud_saml_authentication_against_keycloak) allowed me to create correct keys for nextcloud and enable message-signing, thus improving this answer.

  [1]: https://i.stack.imgur.com/vT3f3.png
  [2]: https://stackoverflow.com/users/3048796/rmm"
48507224,Cant access keycloak rest API methods *404*,"I am using the latest keycloak image in docker and can access the standard admin console at http://localhost:9080. However, I cant seem to access any of the paths specified in the [documentation][1] for Admin REST api. For instance, the base path */auth* and Resource *Get clients belonging to the realm Returns a list of clients belonging to the realm:* **/{realm}/clients** I am getting a 404. So is for any other method in the [documentation][1]. The only path returning a valid 200 json response is *http://localhost:9080/auth/realms/{realm-name}/* which according to the documentation be reachable at basepath + ""/{realm-name}"". Am I missing something or trying to access with a wrong base path. The keycloak version in docker is 3.4.3.Final which is the latest version of keycloak according to the documentation.

  [1]: http://www.keycloak.org/docs-api/3.4/rest-api/index.html",48519311,"I'm almost sure you are trying to call the endpoint like this:

> http://localhost:9080/auth/admin/realms/demo/clients

However, you've missed this part`/auth/admin/realms`

Please, don't forget to authorize your call first as stated [here][1]

**UPDATE**

Here are my steps to see the results:

    $ docker run -d -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin jboss/keycloak

Getting `access_token`:

    $ curl -X POST \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -d 'username=admin&password=admin&client_id=admin-cli&grant_type=password' \
        http://localhost:9080/auth/realms/master/protocol/openid-connect/token  

*EDIT:* With keycloak 17.0+ the `/auth` path segment should be omitted, so the correct URL is `http://localhost:9080/realms/master/protocol/openid-connect/token`
Reference: https://stackoverflow.com/a/71634718/3692110

Copy and paste obtained `access_token` to `Authorization` header:

    $ curl -X GET \
        -H 'Authorization: Bearer <access_token_goes_here>' \
        http://localhost:9080/auth/admin/realms/master/clients
        


  [1]: https://stackoverflow.com/a/35345291/4956989"
53283281,How to activate the REST API of keycloak?,"I have installed keycloack server 4.3.4.
How to activate the REST API of keycloak (Add a user, enabled  user, disabled a user ...) ?

Regards",53292944,"First step to do that is create an admin account (which you would have been prompted to do as soon as you would have opened [{keycloak-url}/auth][1] ).

Next steps depend on how you want to create config. Through Admin console GUI or through Rest API.

Steps to do this through Admin Rest API.
----------------------------------------

1. First , you will have to get a token from [{keycloak-url}/auth/realms/master/protocol/openid-connect/token][2] like this: 

Note that only change you have to do in below call is your keycloak server address and value of admin username and password.

[![enter image description here][3]][3]


2. Once you obtain a token from above call, you can use it on other [Admin Rest API][4] calls by setting `Authorization` header, with `Bearer token_value`. (replace token_value with one obtained in step 1 above)

(Sharing an example below of sample rest call which gets list of users - https://www.keycloak.org/docs-api/10.0/rest-api/index.html#_users_resource )


{{SERVER}}/auth/admin/realms/myRealm/users


------------------------------------------

[![enter image description here][5]][5]


----------

EDIT:
-----

**As pointed out by @Shane : as of Keycloak version 19.0.1 the `/auth` part of the urls have been removed.** 

  [1]: http://keycloak-server-url/auth
  [2]: http://your_keycloak_server/auth/realms/master/protocol/openid-connect/token
  [3]: https://i.stack.imgur.com/6TKPf.png
  [4]: https://www.keycloak.org/docs-api/4.5/rest-api/index.html#_realms_admin_resource
  [5]: https://i.stack.imgur.com/oUbMa.png"
49313554,Access the keycloak API from postman,"I have tried to access the keycloak API from the postman. but it is showing 400 bad request.

I was calling api in the below format. 

    http://{hostname}:8080/auth/realms/master/protocol/openid-connect/token?username=admin&password=admin&client_id=admin-cli&grant_type=password

In the headers I have set the `content_type as application/x-www-form-urlencoded`


I am getting the response as below.

    {
        ""error"": ""invalid_request"",
        ""error_description"": ""Missing form parameter: grant_type""
    }

Can any one help me.Any help will be appreciated. thanks in advance",49382250,"A bit late for this question, but you did ask about postman and not curl.
So you have to put the options in x-www-form-urlencoded
[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/5aFgH.png"
50589548,"Keycloak cookies : KEYCLOAK_SESSION,Oauth_token_request_state, KEYCLOAK_IDENTITY","Can someone please explain the cookies set by Keycloak:
KEYCLOAK_SESSION,Oauth_token_request_state, KEYCLOAK_IDENTITY.

What is the relevance of each cookies?",50840122,"They are cookies for internal use of Keycloak.

**KEYCLOAK_IDENTITY** contains a token (JWT) with the user ids. You can view its content using [jwt.io][1] (for example). This cookie lives with your browser session and can also be refreshed with SSO. (for example, if you change some of your personal data in the ""Manage my account"")

**KEYCLOAK_SESSION** your session id associated to the concerned realm.

**Oauth_token_request_state** is part of the Oauth spec in order to avoid hacking of the redirect link after login


  [1]: https://jwt.io"
49144953,Mocking a Keycloak token for testing a Spring controller,"I want to write unit tests for my spring controller. I'm using keycloak's openid flow to secure my endpoints.

In my tests I'm using the `@WithMockUser` annotation to mock an authenticated user. My problem is that I'm reading the userId from the token of the principal. My unit test now fails because the `userId` I read from the token is null;


			if (principal instanceof KeycloakAuthenticationToken) {
				KeycloakAuthenticationToken authenticationToken = (KeycloakAuthenticationToken) principal;
				SimpleKeycloakAccount account = (SimpleKeycloakAccount) authenticationToken.getDetails();
				RefreshableKeycloakSecurityContext keycloakSecurityContext = account.getKeycloakSecurityContext();
				AccessToken token = keycloakSecurityContext.getToken();
				Map<String, Object> otherClaims = token.getOtherClaims();
				userId = otherClaims.get(""userId"").toString();
			}

Is there anything to easily mock the `KeycloakAuthenticationToken`?",60175790,"`@WithmockUser` configures the security-context with a `UsernamePasswordAuthenticationToken`. This can be just fine for most use-cases but when your app relies on another Authentication implementation (like your code does), you have to build or mock an instance of the right type and put it in the test security-context: `SecurityContextHolder.getContext().setAuthentication(authentication);`

Of course, you'll soon want to automate this, building your own annotation or `RequestPostProcessor`

... or ...

take one ""off the shelf"", like in this [lib of mine][1], which is available from maven-central:
```xml
<dependency>
    <!-- just enough for @WithMockKeycloackAuth -->
    <groupId>com.c4-soft.springaddons</groupId>
    <artifactId>spring-security-oauth2-test-addons</artifactId>
    <version>3.0.1</version>
    <scope>test</scope>
</dependency>
<dependency>
    <!-- required only for WebMvc ""fluent"" API -->
    <groupId>com.c4-soft.springaddons</groupId>
    <artifactId>spring-security-oauth2-test-webmvc-addons</artifactId>
    <version>3.0.1</version>
    <scope>test</scope>
</dependency>
```

You can use it either with `@WithMockKeycloackAuth` annotations:
```java
@RunWith(SpringRunner.class)
@WebMvcTest(GreetingController.class)
@ContextConfiguration(classes = GreetingApp.class)
@ComponentScan(basePackageClasses = { KeycloakSecurityComponents.class, KeycloakSpringBootConfigResolver.class })
public class GreetingControllerTests extends ServletUnitTestingSupport {
	@MockBean
	MessageService messageService;

	@Test
	@WithMockKeycloackAuth(""TESTER"")
	public void whenUserIsNotGrantedWithAuthorizedPersonelThenSecretRouteIsNotAccessible() throws Exception {
		mockMvc().get(""/secured-route"").andExpect(status().isForbidden());
	}

	@Test
	@WithMockKeycloackAuth(""AUTHORIZED_PERSONNEL"")
	public void whenUserIsGrantedWithAuthorizedPersonelThenSecretRouteIsAccessible() throws Exception {
		mockMvc().get(""/secured-route"").andExpect(content().string(is(""secret route"")));
	}

	@Test
	@WithMockKeycloakAuth(
			authorities = { ""USER"", ""AUTHORIZED_PERSONNEL"" },
			claims = @OpenIdClaims(
					sub = ""42"",
					email = ""ch4mp@c4-soft.com"",
					emailVerified = true,
					nickName = ""Tonton-Pirate"",
					preferredUsername = ""ch4mpy"",
					otherClaims = @Claims(stringClaims = @StringClaim(name = ""foo"", value = ""bar""))))
	public void whenAuthenticatedWithKeycloakAuthenticationTokenThenCanGreet() throws Exception {
		mockMvc().get(""/greet"")
				.andExpect(status().isOk())
				.andExpect(content().string(startsWith(""Hello ch4mpy! You are granted with "")))
				.andExpect(content().string(containsString(""AUTHORIZED_PERSONNEL"")))
				.andExpect(content().string(containsString(""USER"")));
	}
```

Or MockMvc fluent API (RequestPostProcessor):
```java
@RunWith(SpringRunner.class)
@WebMvcTest(GreetingController.class)
@ContextConfiguration(classes = GreetingApp.class)
@ComponentScan(basePackageClasses = { KeycloakSecurityComponents.class, KeycloakSpringBootConfigResolver.class })
public class GreetingControllerTest extends ServletKeycloakAuthUnitTestingSupport {
	@MockBean
	MessageService messageService;

	@Test
	public void whenUserIsNotGrantedWithAuthorizedPersonelThenSecretMethodIsNotAccessible() throws Exception {
		mockMvc().with(authentication().roles(""TESTER"")).get(""/secured-method"").andExpect(status().isForbidden());
	}

	@Test
	public void whenUserIsGrantedWithAuthorizedPersonelThenSecretMethodIsAccessible() throws Exception {
		mockMvc().with(authentication().roles(""AUTHORIZED_PERSONNEL"")).get(""/secured-method"")
				.andExpect(content().string(is(""secret method"")));
	}

}
```


  [1]: https://github.com/ch4mpy/spring-addons"
38337895,Globally disable https keycloak,"The deployment is on AWS and I do not want to tunnel to the box and open a browser to disable it.  

There seems to exist a configuration: `""ssl-required"":""none""` that can be placed in the `keycloak-server.json` file, but I'm not sure under which object.  I've tried under ""realm"" and by itself with no luck.  

I do not want to disable it at the adapter level, it needs to be globally, so where does the `""ssl-required"":""none""` go, or how can ssh/https be disabled globally?

(Also, I understand this is not recommended in production.)
",39129777,"In the ""master"" realm, over login tab. Change 'Require SSL' property to none.

[][1]


  [1]: http://i.stack.imgur.com/M0LOI.png

If you can not access locally to keycloak and it is configured with a database for instance Postgres, then execute the following SQL sentence.

    update REALM set ssl_required = 'NONE' where id = 'master';

It is necessary to restart keycloak
"
31864062,Fetch Logged In Username in a webapp secured with Keycloak,"I have secured an enterprise application with Keycloak using standard wildfly based Keycloak adapters. Issue that I am facing is that the rest web services when invoked, needs to know the username that is currently logged in. How do I get the logged in user information from Keycloak?

I tried using `SecurityContext` , `WebListener` etc. But none of them are able to give me the required details.",31870310,"You get all user information from the security context.

Example:

    public class Greeter {

      @Context
      SecurityContext sc;

      @GET
      @Produces(MediaType.APPLICATION_JSON)
      public String sayHello() {

        // this will set the user id as userName
        String userName = sc.getUserPrincipal().getName();

        if (sc.getUserPrincipal() instanceof KeycloakPrincipal) {
          KeycloakPrincipal<KeycloakSecurityContext> kp = (KeycloakPrincipal<KeycloakSecurityContext>)  sc.getUserPrincipal();

          // this is how to get the real userName (or rather the login name)
          userName = kp.getKeycloakSecurityContext().getIdToken().getPreferredUsername();
        }

        return ""{ message : \""Hello "" + userName + ""\"" }"";
    }

For the security context to be propagated you have to have a security domain configured as described in the:
[JBoss/Wildfly Adapter configuration][1]


  [1]: http://keycloak.github.io/docs/userguide/html/ch08.html#jboss-adapter"
48458138,Keycloak User Roles missing in REST API,"I would like to ask, if somebody knows, why there are **no roles** within the user details in REST ADMIN API request. I saw some posts dealing with this topic, but there were either no clear answer or they propose to use keycloak-admin-client, but that seems not very convenient. Maybe I need to map the roles in Admin console or use claims? Roles are one of the most important user attribute so whats the reason they are not retrieved as other user attributes?Any suggestion? Thanks

    GET /auth/admin/realms/{realm}/users 

    {
      ""id"": ""efa7e6c0-139f-44d8-baa8-10822ed2a9c1"",
      ""createdTimestamp"": 1516707328588,
      ""username"": ""testuser"",
      ""enabled"": true,
      ""totp"": false,
      ""emailVerified"": false,
      ""firstName"": ""Test"",
      ""lastName"": ""User"",
      ""email"": ""test@xxx.com"",
      ""attributes"": {""xxx"": [""123456""]},
      ""disableableCredentialTypes"": [""password""],
      ""requiredActions"": []
    }
",48485431,"You are not getting roles in the user details because the REST API is strictly resource based and roles are separate objects that are just associated to a user. The following REST URLs can be used to get a user's roles  
Getting the associated realm roles:  
``GET /auth/admin/realms/{realm}/users/{user-uuid}/role-mappings/realm``  
Getting the associated role of a specific client:   
``GET /auth/admin/realms/{realm}/users/{user-uuid}/role-mappings/clients/{client-uuid}``"
49107701,Keycloak client vs user,"I understand that keycloak has built-in clients and we add the users later on.

But in general, **what is the difference between a client and a user in Keycloak?**",49119016,"In short words, not only for keycloak but for OAuth and OpenId Connect too, a client represents a resource which some users can access. The built-in clients for keycloak represent some resources for keycloak itself."
51132711,Introspection Endpoint of KeyCloak server,"I am trying to explore features of KeyCloak server and want to get information about access token by using `/openid-connect/token/introspect` endpoint. 

So, I am sending next request to this endpoint 

    curl -v --data ""token_type_hint=access_token&client_id=product- 
    app&username=user&token=MY ACCESS TOKEN"" 
    http://localhost:8080/auth/realms/springdemo/protocol/openid- 
    connect/token/introspect

So this is what I have as a response:

    {""error"":""invalid_request"",""error_description"":""Client not allowed.""}* 
    Connection #0 to host localhost left intact

and this is what I see in KeyCloak's logs: 

    12:00:18,045 WARN  [org.keycloak.events] (default task-13) 
    type=INTROSPECT_TOKEN                                     _ERROR, 
    realmId=springdemo, clientId=product-app, userId=null, ipAddress=127.0.0                                     
    .1, error=invalid_request, detail='Client not allowed.', 
    client_auth_method=client-secret

So, I can't get it - how should I properly make request to keycloak in this case regarding that product-app has public access. Please, explain! 

",51134543,"It seems like you are not able to use `/openid-connect/token/introspect` endpoint when your client has public access type.

So, switch to the CONFIDENTIAL ACCESS TYPE and use

    curl -v --data ""client_secret=YOUR_SECRET9&client_id=product- 
    app&username=user&token=YOUR_TOKEN"" 
    http://localhost:8080/auth/realms/springdemo/protocol/openid- 
    connect/token/introspect

It works fine. "
52085735,Programmatically authenticate user with Keycloak in java,"I have been looking through the Keycloak documentation but cannot see how to do this. With Java, I'd like to take a valid userid and password and then generate a token. How can I do this? ",52105959,"--EDIT 2018-08-31--

You can use the [Authorization Client Java API](https://www.keycloak.org/docs/latest/authorization_services/index.html#_service_client_api). Once you have created an AuthzClient object, you can pass the username and password to the [AuthzClient#authorization(username, password)][1] or [AuthzClient#obtainAccessToken(username, password)](http://static.javadoc.io/org.keycloak/keycloak-authz-client/4.3.0.Final/org/keycloak/authorization/client/AuthzClient.html#obtainAccessToken--) method to authenticate the user and get the access token (and/or ID token in the first case):

    // create a new instance based on the configuration defined in keycloak-authz.json
    AuthzClient authzClient = AuthzClient.create();
    
    // send the authorization request to the server in order to
    // obtain an access token granted to the user
    AccessTokenResponse response = authzClient.obtainAccessToken(""alice"", ""alice"");


On a side note, if possible, you'd rather reuse one of the [Keycloak Java Adapters](https://www.keycloak.org/docs/latest/securing_apps/index.html#openid-connect-3) to cover more features, such as other authentication methods (the user is typically redirected to Keycloack WUI where you can enforce very flexible authentication and authorization policies).

  [1]: http://static.javadoc.io/org.keycloak/keycloak-authz-client/4.3.0.Final/org/keycloak/authorization/client/AuthzClient.html#authorization-java.lang.String-java.lang.String-"
42342367,Keycloak behind apache reverse proxy,"I have surfed through google without finding any **concrete** answers or **examples**, so again trying my luck here (often get lucky).

**The problem**

 - I have a single spring boot RESTful service running behind an apache
   reverse proxy. This RESTful service is running HTTP only. Say it's running on
   local ip 172.s port 8080.
   
 - I have also configured an apache reverse proxy. Say it's running on
   local ip 172.a and public ip 55.a. This proxy responds to both port 80, but all the HTTP traffic is automatically redirected to 443.
   
 - I have another server running a standalone Keycloak server. Also
   this server is configured to be public accessible through the
   reverse proxy. Say it's running on local ip 172.k. This Keycloak server is running on HTTP-only. The HTTP requests are handled using SSL over the reverse proxy.

 - Last, I have another frontend-webapp running on local ip 172.f. This frontend-webapp is running under Nodejs, and is also configured through the reverse proxy. It's also running only HTTP, but client(browser) is using SSL through the reverse proxy, just as for the Keycloak and RESTful service. This frontend is consuming the RESTful service, and is also configured to authenticate using the keycloak javascript adapter.

 - The RESTful service is configured as bearer-only using Spring Boot Keycloak adapter, while the frontend app is configured with access type public.


The RESTful service server, Keycloak server, and the frontend server are not public accessible; they are accessible only through the reverse proxy. But they can communicate with each other (since they are in the same private network).

In the frontend keycloak.json file, the `auth-server-url` is set to the proxy url `https://example.com/auth`, and the frontend is able to successfully get a valid token. Now when I try to consume the RESTful service, I get a error in RESTful adapter that the token issuer is invalid. In the http-header I am, of course, sending the `Authorization: Bearer <token>`. The reason I am getting this error is that in RESTful keycloak configuation, I have configured the `auth-server-url` to use the local url `http://172.k:9080/auth`, so this url is different from the one in the token (which is `https://example.com/auth`).

**Question**

I cannot include the same `auth-server-url` in the RESTful service as for the frontend, because that will require me to also setup HTTPs on the RESTful service (because that url is https), and that will complicate stuff a lot, including the need to setup certificates and stuff like that. Also I think it's inefficient and not practical to setup SSL on local only servers.

So my question is how I can make the adapter talk to the Keycloak without going through the reverse proxy. I want the RESTful adapter to talk to the Keyclok server for token verification through `auth-server-url: http://172.k:9080/auth`.

Earlier there was a different url for backend, that got removed: https://issues.jboss.org/browse/KEYCLOAK-2623",42504805,"I tried different things, but could not solve the problem. To me it seems like there is not way to specify `auth-server-url: http://172.k:9080/auth` in the backend adapter while the frontend adapter is putting `auth-server-url:https://example.com/auth` in the token. So my solution was to configure all the backend services to also the `auth-server-url: https://example.com/auth`. 

The only disadvantage of this is that my backend service adapter communicates with keycloak over web, which probably is not so good performance wise, but at least everything works as it should. It should have been possible to somehow specify a local keycloak endpoint within the same local network, or the same VPN in AWS."
54318633,Getting Keycloak's public key,"I realized there are many iterations of this questions.  But I can't seem to understand the answer correctly.  

We have secured our rabbitmq and rest endpoints with a oauth2 spring server [similar to this post][1].  But it doesn't have all of the features we need and want.  So we would like to use Keycloak.  I have been successful with securing the rest endpoint by just going to the new version of spring security 5.1 and specifing the security.oauth2.resource.jwk.key-set-uri and setting the necessary dependencies and configuration. 

While trying to secure the RabbitMQ, I have been running into problems checking the bearer token from the message header because the keycloak jwks endpoint isn't returning the true RSA public key.

RabbitMQ uses the [CustomMessageListenerContainer][1] to get the token from the message header and uses the DefaultTokenServices to check the token.  


From my understanding,  the endpoint that responds with the key is https://keycloak-server/auth/realms/my-realm/protocol/openid-connect/certs
Doing a HttpGet on this endpoint, I get a response that looks like the following 


    {
    	""keys"": [{
    			""kid"": ""7JUbcl_96GNk2zNh4MAORuEz3YBuprXilmTXjm0gmRE"",
    			""kty"": ""RSA"",
    			""alg"": ""RS256"",
    			""use"": ""sig"",
    			""n"": ""nE9gEtzZvV_XisnAY8Hung399hwBM_eykZ9J57euboEsKra8JvDmE6w7SSrk-aTVjdNpjdzOyrFd4V7tFqev1vVJu8MJGIyQlbPv07MTsgYE5EPM4DxdQ7H6_f3vQjq0hznkFvC-hyCqUhxPTXM5NgvH86OekL2C170xnd50RLWw8FbrprP2oRjgBnXMAif1Dd8kwbKKgf5m3Ou0yTVGfsCRG1_LSj6gIEFglxNHvGz0RejoQql0rGMxcW3MzCvc-inF3FCafQTrG5eWHqp5xXEeMHz0JosQ7BcT8MVp9lHT_utiazhQ1uKZEb4uoYOyy6mDDkx-wExpZkOx76bk_Yu-N25ljY18hNllnV_8gVMkX46_vcc-eN3DRZGNJ-Asd_sZrjbXbAvBbKwVxZeOTaXiUdvl8O0G5xX2xPnS_WA_1U4b_V1t28WtnX4bqGlOejW2kkjLvNrpfQ5fnvLjkl9I2B16Mbh9nS0LJD0RR-AkBsv3rKEnMyEkW9UsfgYKLFKuH32x_CXi9uyvNDas_q8WS3QvYwAGEMRO_4uICDAqupCVb1Jcs9dvd1w-tUfj5MQOXB-srnQYf5DbFENTNM1PK390dIjdLJh4k2efCJ21I1kYw2Qr9lHI4X2peTinViaoOykykJiol6LMujUcfqaZ1qPKDy_UnpAwGg9NyFU"",
    			""e"": ""AQAB""
    		}
    	]
    }

From my understanding,  the field with key ""n"" is supposed to be an RSA256 key.  Adding it to a RSAVerifier eventually gets an error of ""Caused by: org.springframework.security.jwt.codec.InvalidBase64CharacterException: Bad Base64 input character decimal 95 in array position 2.""

However,  if I login to keycloak admin page and go into the realm settings-> keys and click the public key, a popup shows the public key minus the ""-----BEGIN PUBLIC KEY-----"" and ""-----END PUBLIC KEY-----"" headers and footers.  Hard coding this enables everything to work.  

Is the key encoded?
I've tried doing a Base64Utils.decodeFromUrlSafeString and a Base64Utils.decodeFromString. The first returning something smaller and doesn't lool like the key and the later creating an Illegal argument exception Illegal base64 character 5f.  

Update:
The n being returned is the modulous and e is the public exponent of the public key.  But how does one get the actual key string?


  [1]: https://stackoverflow.com/questions/50358936/oauth2-authorization-with-spring-security-and-rabbitmq",54327623,"The keys are also directly on https://keycloak-server/auth/realms/my-realm, in a format directly exploitable with your code:

    {
      ""realm"": ""my-realm"",
      ""public_key"": ""MIIBI..."",
      ""token-service"": ""https://keycloak-server/auth/realms/my-realm/protocol/openid-connect"",
      ""account-service"": ""https://keycloak-server/auth/realms/my-realm/account"",
      ""tokens-not-before"": 0
    }"
54667407,How to get users by custom attributes in keycloak?,"I know that there is admin APIs to get the list of users which returns the user representation array. 

    GET /admin/realms/{realm}/groups/{id}/members

returns 

    https://www.keycloak.org/docs-api/2.5/rest-api/index.html#_userrepresentation

but is there a way to get users by custom attribute ? ",54667967,"Current Keycloak API version is 4.8 and there is API: 
*Get users Returns a list of users, filtered according to query parameters*

    GET /{realm}/users

See doc: https://www.keycloak.org/docs-api/4.8/rest-api/index.html#_users_resource

Only this ""search"" is available from the API. If you need search by user attributes, then you need to implement it in your own code."
47121643,Keycloak - Is it possible share a common set of users between realms?,"I am trying  to implement keycloak as an SSO for my company. I have created two realms, realm A and realm B. I want to use same set of users for both realms ie I need give access to users for both realms. Is it possible to do this in Keycloak?",47130733,"No that's not possible. Users are always realm specific. The only way would be to keep the users in an external store and integrate this external store via federation (_UserStorageSpi_) into both realms. But then you'll have to do all user management on the external store, as it is the primary source of your user data."
46882610,Keycloak API always returns 401,"I'm trying to interact with Keycloak via its REST API. I have the master realm and the default admin user, and a test realm. Firstly, I get an access token for the admin account and test realm:

    let data = {
        grant_type : 'password',
        client_id : 'test-realm',
        username : 'admin',
        password : 'admin'
    };
    let headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    };
    axios.post(
        'https://someurl.com:8080/auth/realms/master/protocol/openid-connect/token',
        qs.stringify(data),
        headers
    )

That works ok. Then I try to make a call to create a user (or do anything else) and I get a 401 unauthorized error:

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': `Bearer ${accessToken}`
    };
    data = {
        rep: {
            email: ""test@email.com"",
            username: ""test@email.com""
        },
        path: 'test-realm'
    };
    axios.post('https://someurl.com:8080/auth/admin/realms/test-realm/users',
        qs.stringify(data),
        headers
    )

Is that not the correct way to include the token? Is the access token the one you use for authenticating other API calls? Shouldn't the admin account's token work for authenticating calls to other clients with the master realm? Would it be some setting in the master realm that I have to change in the admin console? Any help appreciated.",46920592,"> Is that not the correct way to include the token?

This is a correct way.

You just do something incorrectly.
Please, refer for an example from `keycloak-request-token` Node.js module:

https://github.com/keycloak/keycloak-request-token/blob/master/index.js#L43

You use 

    client_id : 'test-realm'

but there is 

    client_id: 'admin-cli' 

there.

Also, to create a user, you should use

    'Content-Type': 'application/json'

You can refer for Node.js examples of Keycloak REST API here:

https://github.com/v-ladynev/keycloak-nodejs-example/blob/master/lib/adminClient.js

Examples of other useful stuff like: 

 - custom login
 - storing Keycloak token in the cookies
 - centralized permission middleware

can be found in the same project: [keycloak-nodejs-example](https://github.com/v-ladynev/keycloak-nodejs-example)"
41855394,Localization of custom keycloak login theme,"I am implementing a custom login page for keycloak (version 2.5), by following [this][1] guide. I added my own custom styling, now I am trying to add the Dutch locale. Currently no Dutch locale is provided, so I provided following properties files:

 - `themes/mytheme/login/messages/messages_en.properties`
 - `themes/mytheme/account/messages/messages_en.properties`
 - `themes/mytheme/email/messages/messages_en.properties`

with the `locale_nl=Nederlands` property. After that I added the `messages_nl.properties` files with the translation strings. 

Next I added the `locales=en,nl,de` property to following files:

 - `themes/mytheme/login/messages/theme.properties`
 - `themes/mytheme/account/messages/theme.properties`
 - `themes/mytheme/email/messages/theme.properties`

There is only one thing left to do: add the Dutch locale in the admin console. But I can't select the `NL` locale after I enabled internationalization. I can only select the English and German locale, my just created Dutch locale is not available:

[![enter image description here][2]][2]

According to [Multilingual support and adding custom Locales in Keycloak][3], I should be able to add my own locale by just typing the locale and hitting 'enter', but that does not do anything.

I am missing a step here?


  [1]: https://keycloak.gitbooks.io/server-developer-guide/content/topics/themes.html
  [2]: https://i.stack.imgur.com/Y5Fvp.png
  [3]: http://metalop.com/2015/06/11/multilingual-support-and-adding-custom-locales-in-keycloak-1-2-0/",41872648,"After reading the [code][1], I understood only adding the files is not enough. You need to enable your theme not only for the `login` theme, but also for the `account` and `email` themes:

[![enter image description here][2]][2]

As I only changed the `login` theme to my own 'custom-theme', the Dutch locale did not show up.

  [1]: https://github.com/stianst/keycloak/blob/b94f207c5c9e08d13c9fd743e407b53c91da3e7a/themes/src/main/resources/theme/base/admin/resources/js/controllers/realm.js#L353
  [2]: https://i.stack.imgur.com/qEqI7.png"
37786756,"keycloak error : Unrecognized field ""access_token""","I'm using keycloak to secure my rest API, I followed this [tutorial][1] to PROGRAMMATICALLY ADDING USERS, but I get that error message: 


    ERROR [io.undertow.request] (default task-9) UT005023: Exception handling request to /service/secured: org.jboss.resteasy.spi.UnhandledException: javax.ws.rs.client.ResponseProcessingException: javax.ws.rs.ProcessingException: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""access_token"" (class org.keycloak.representations.AccessTokenResponse), not marked as ignorable (9 known properties: ""notBeforePolicy"", ""otherClaims"", ""tokenType"", ""token"", ""expiresIn"", ""sessionState"", ""refreshExpiresIn"", ""idToken"", ""refreshToken""])
     at [Source: org.apache.http.conn.EofSensorInputStream@9d6aba2; line: 1, column: 18] (through reference chain: org.keycloak.representations.AccessTokenResponse[""access_token""])
    	at org.jboss.resteasy.core.ExceptionHandler.handleApplicationException(ExceptionHandler.java:76)
    	at org.jboss.resteasy.core.ExceptionHandler.handleException(ExceptionHandler.java:212)
    	at org.jboss.resteasy.core.SynchronousDispatcher.writeException(SynchronousDispatcher.java:149)
    	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:372)
    	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:179)
    	at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:220)
    	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:56)
    	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:51)
    	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
    	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:86)
    	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
    	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
    	at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)
    	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    	at org.keycloak.adapters.undertow.UndertowAuthenticatedActionsHandler.handleRequest(UndertowAuthenticatedActionsHandler.java:66)
    	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)
    	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
    	at io.undertow.server.handlers.DisableCacheHandler.handleRequest(DisableCacheHandler.java:33)
    	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    	at io.undertow.security.handlers.AuthenticationConstraintHandler.handleRequest(AuthenticationConstraintHandler.java:51)
    	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
    	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
    	at io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler.handleRequest(ServletSecurityConstraintHandler.java:56)
    	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:58)
    	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:72)
    	at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)
    	at io.undertow.security.handlers.SecurityInitialHandler.handleRequest(SecurityInitialHandler.java:76)
    	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    	at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
    	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    	at org.keycloak.adapters.undertow.ServletPreAuthActionsHandler.handleRequest(ServletPreAuthActionsHandler.java:69)
    	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:282)
    	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:261)
    	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:80)
    	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:172)
    	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:199)
    	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:774)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    	at java.lang.Thread.run(Unknown Source)
    Caused by: javax.ws.rs.client.ResponseProcessingException: javax.ws.rs.ProcessingException: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""access_token"" (class org.keycloak.representations.AccessTokenResponse), not marked as ignorable (9 known properties: ""notBeforePolicy"", ""otherClaims"", ""tokenType"", ""token"", ""expiresIn"", ""sessionState"", ""refreshExpiresIn"", ""idToken"", ""refreshToken""])
     at [Source: org.apache.http.conn.EofSensorInputStream@9d6aba2; line: 1, column: 18] (through reference chain: org.keycloak.representations.AccessTokenResponse[""access_token""])
    	at org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.extractResult(ClientInvocation.java:140)
    	at org.jboss.resteasy.client.jaxrs.internal.proxy.extractors.BodyEntityExtractor.extractEntity(BodyEntityExtractor.java:58)
    	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:104)
    	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:62)
    	at com.sun.proxy.$Proxy93.grantToken(Unknown Source)
    	at org.keycloak.admin.client.token.TokenManager.grantToken(TokenManager.java:59)
    	at org.keycloak.admin.client.token.TokenManager.getAccessToken(TokenManager.java:36)
    	at org.keycloak.admin.client.token.TokenManager.getAccessTokenString(TokenManager.java:31)
    	at org.keycloak.admin.client.resource.BearerAuthFilter.filter(BearerAuthFilter.java:31)
    	at org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.invoke(ClientInvocation.java:384)
    	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:102)
    	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:62)
    	at com.sun.proxy.$Proxy92.create(Unknown Source)
    	at org.keycloak.quickstart.jaxrs.Resource.getSecured(Resource.java:47)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)

I searched in the net and found this [solution][2] but it doesn't work, I also find that discussion (I need more reputation to post the link :http:/lists.jboss.org/pipermail/keycloak-user/2014-November/001120.html)   that explain the cause of the problem but I don't find a solution.
can anyone help.

  [1]: http://www.first8.nl/blog/programmatically-adding-users-in-keycloak/
  [2]: https://issues.jboss.org/browse/KEYCLOAK-811

",38866234,"The Keycloak Admin Client (starting from version 1.9.0) supports the `resteasy-jackson2-provider` JSON provider out of the box, and this resolves the issue.

Use it in place of `resteasy-jackson-provider` in your pom.


"
39861900,RESTEASY003145: Unable to find a MessageBodyReader of content-type application/json and type class org.keycloak.representations.AccessTokenResponse,"I'm trying to test Keycloak REST API.
Instaled the version 2.1.0.Final.
I can access the admin through browser with SSL without problems.

I'm using the code above:

	Keycloak keycloakClient = KeycloakBuilder.builder()
	.serverUrl(""https://keycloak.intra.rps.com.br/auth"")
	.realm(""testrealm"")
	.username(""development"")
	.password(""development"")
	.clientId(""admin-cli"")
	.resteasyClient(new ResteasyClientBuilder().connectionPoolSize(10).build())
	.build();
	List<RealmRepresentation> rr = keycloakClient.realms().findAll();

And got the error:

	javax.ws.rs.ProcessingException: RESTEASY003145: Unable to find a MessageBodyReader of content-type application/json and type class org.keycloak.representations.AccessTokenResponse

	javax.ws.rs.client.ResponseProcessingException: javax.ws.rs.ProcessingException: RESTEASY003145: Unable to find a MessageBodyReader of content-type application/json and type class org.keycloak.representations.AccessTokenResponse
	at org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.extractResult(ClientInvocation.java:141)
	at org.jboss.resteasy.client.jaxrs.internal.proxy.extractors.BodyEntityExtractor.extractEntity(BodyEntityExtractor.java:60)
	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:104)
	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:76)
	at com.sun.proxy.$Proxy20.grantToken(Unknown Source)
	at org.keycloak.admin.client.token.TokenManager.grantToken(TokenManager.java:85)
	at org.keycloak.admin.client.token.TokenManager.getAccessToken(TokenManager.java:65)
	at org.keycloak.admin.client.token.TokenManager.getAccessTokenString(TokenManager.java:60)
	at org.keycloak.admin.client.resource.BearerAuthFilter.filter(BearerAuthFilter.java:52)
	at org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.invoke(ClientInvocation.java:413)
	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:102)
	at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:76)
	at com.sun.proxy.$Proxy22.findAll(Unknown Source)
	at br.com.rps.itsm.sd.SgpKeycloakClient.doGet(SgpKeycloakClient.java:71)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:284)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:793)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
	Caused by: javax.ws.rs.ProcessingException: RESTEASY003145: Unable to find a MessageBodyReader of content-type application/json and type class org.keycloak.representations.AccessTokenResponse
	at org.jboss.resteasy.core.interception.ClientReaderInterceptorContext.throwReaderNotFound(ClientReaderInterceptorContext.java:42)
	at org.jboss.resteasy.core.interception.AbstractReaderInterceptorContext.getReader(AbstractReaderInterceptorContext.java:75)
	at org.jboss.resteasy.core.interception.AbstractReaderInterceptorContext.proceed(AbstractReaderInterceptorContext.java:52)
	at org.jboss.resteasy.plugins.interceptors.encoding.GZIPDecodingInterceptor.aroundReadFrom(GZIPDecodingInterceptor.java:59)
	at org.jboss.resteasy.core.interception.AbstractReaderInterceptorContext.proceed(AbstractReaderInterceptorContext.java:55)
	at org.jboss.resteasy.client.jaxrs.internal.ClientResponse.readFrom(ClientResponse.java:251)
	at org.jboss.resteasy.client.jaxrs.internal.ClientResponse.readEntity(ClientResponse.java:181)
	at org.jboss.resteasy.specimpl.BuiltResponse.readEntity(BuiltResponse.java:213)
	at org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.extractResult(ClientInvocation.java:105)

I added the dependencies above, but do not solve my problem:

        <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-client</artifactId>
                <version>3.0.19.Final</version>
        </dependency>
        <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-jackson-provider</artifactId>
                <version>3.0.19.Final</version>
        </dependency>

Any clues?",40462534,"I solved !! 
You must add org.jboss.resteasy.plugins.providers.jackson.ResteasyJacksonProvider into META-INF/services/javax.ws.rs.ext.Providers file then run your executable jar."
57393543,"""Welcome"" of ""Finish registration"" letter in Keycloak","When a user is created through the Keycloak admin console, is there a way to notify a user via email that a profile has been created and the user can finish registration following by a link?
Currently, the user can get an email about profile being created only if after creation a password had been set for the user. And only after an initial login attempt. But for this login attempt, the user should know the password that was set.",57444361,"I accomplished the same thing by customizing the keycloak theme templates for the emails sent and for the login pages.  Here's  the [Keycloak docs][1] on how to customize the themes.

Here's the specifics of how I did it:

**First, I customized the executeActions.ftl email template** to be pretty and say ""welcome to our application, click the link below to finish setting up your account"".  I continued to use the link and link expiration note from the default base template. You can see the default base template at https://github.com/keycloak/keycloak/blob/master/themes/src/main/resources/theme/base/email/html/executeActions.ftl

**Second, we decided what standard keycloak actions would be ""required"" for new users**.  We decided that to finish registration, users would be required to do these actions:

 1. Accept Terms and Condition
 2. Enter their full name (Update their profile)
 3. Setup a new password 

**Third, we setup our Keycloak realm to require all users go through the 3 steps.**
In the Keycloak admin console, we set these up as ""Required"" actions (under Configure-->Authentication-->Required Actions), marking the ""Terms and Conditions"", ""Update Profile"" and ""Update Password"" actions as ""Enabled"" and  ""Default Action"". We also put these actions in  the exact order that we wanted them to appear in the ""account setup"" process that the user would go through screen by screen. For the other actions, we  unchecked Default Action. 
[![enter image description here][2]][2]

**Fourth, I customized the following keycloak login templates that render the account setup pages.** The keycloak-generated link that was embedded in the executeActions email (from step 1) will take the user to these ""account setup"" web pages:


  - **info.ftl**  - The default is [here][3]. After clicking the link in the welcome email, the user ends up on a page generated by this template. This page usually renders web pages that display generic informational messages of all kinds, 
 but it also renders the FIRST and LAST page of the account setup process. So I modified it to check to see if the message.summary matched the first step or last step of the account setup process. If it was the first step, I'd render 'welcome' text on the page. If it was the last step, I'd render something like 'your account has been setup. Click here to login'.  See below for how I modified info.ftl.
```
<!-- info.ftl -->
<#import ""template.ftl"" as layout>
<@layout.registrationLayout displayMessage=false; section>

  <#if section = ""header"">
    <#if messageHeader??>
      ${messageHeader}
    <#else>
      <#if message.summary == msg('confirmExecutionOfActions')>
        ${kcSanitize(msg('welcomeToOurApplication'))?no_esc}
      <#elseif message.summary == msg('accountUpdatedMessage')>
        ${kcSanitize(msg('accountSuccessfullySetup'))?no_esc}
      <#else>
        ${message.summary}
      </#if>
    </#if>

  <#elseif section = ""form"">
    <div id=""kc-info-message"">
      <div class=""kc-info-wrapper"">
        <#if message.summary == msg('confirmExecutionOfActions')>
          ${kcSanitize(msg('startSettingUpAccount'))?no_esc}
        <#elseif message.summary == msg('accountUpdatedMessage')>
          ${kcSanitize(msg('accountIsReadyPleaseLogin'))?no_esc}
        <#else>
          ${message.summary}
        </#if>
      </div>

      <#if pageRedirectUri??>

       ... <!-- Omitted the rest because it's the same as the base template -->

```


I also customized the following templates, that correspond to steps in the account setup process.

 - **terms.ftl**  - shows terms & conditions step
 - **login-update-profile.ftl** - shows the step where the user needs to enter/update his/her full name
 - **login-updated-password.ftl** - prompts user to change password.

**Fifth, when the administrator creates a new user, he/she triggers the welcome email being sent to the user:**
 - In the Keycloak admin console, once you ""Add"" a new user, go to that user's ""Credentials"" tab, and under Credential Reset select the account setup actions required under ""Reset Actions"" and then click the ""Send email"" button.

[![List item][4]][4]

Anyway, I hope this helps. I remember it taking me a little while to figure out because it is not a standard flow within keycloak.

  [1]: https://www.keycloak.org/docs/latest/server_development/index.html#_themes
  [2]: https://i.stack.imgur.com/5QrhB.png
  [3]: https://github.com/keycloak/keycloak/blob/master/themes/src/main/resources/theme/base/login/info.ftl
  [4]: https://i.stack.imgur.com/L7crX.png"
59018604,KeyCloak : No 'Access-Control-Allow-Origin' header is present on the requested resource,"I'm using Angular 8.0.3 and keycloak 6.0.1 to make the front authentication.

**Problem**

I managed to get to the keycloak login page from my application. After logging in with my login details, an error occurs :
<br>-localhost/:1 Access to XMLHttpRequest at 'https://localhost:8080/auth/realms/pwe-realm/protocol/openid-connect/token' from origin 'http://localhost:4200' has been blocked by CORS policy: **No 'Access-Control-Allow-Origin' header is present on the requested resource.**
<br>-Keycloak init failed An error happened during Keycloak initialization.

Could you help me please ?

**My Keycloak Configuration :**

1 Realm : pwe-realm
<br>2 client :
<br>-pwe-api (for my back end)
<br>-pwe-web (for my authentication front end)

pwe-web configuration:
<br>Client Protocol: openid-connect
<br>Access Type: public
<br>Valid redicrect Uris: http//:localhost:4200/ (I tried also ""*"")

**My code (I am using this librairy : [keycloak-angular](https://github.com/mauriciovigolo/keycloak-angular)):**

environments.ts :
```
import {KeycloakConfig} from 'keycloak-angular';

const keycloakConfig: KeycloakConfig = {
  url: 'https://localhost:8080/auth',
  realm: 'pwe-realm',
  clientId: 'pwe-web'
};

export const environment = {
  production: false,
  keycloakConfig
};
```

app.moudle.ts
```
//imports

const keycloakService = new KeycloakService();

@NgModule({
  declarations: [
    AppComponent,
    ...
  ],
  imports: [
    KeycloakAngularModule,
    BrowserModule,
    AppRoutingModule,
    ...
  ],
  providers: [
    {
      provide: KeycloakService,
      useValue: keycloakService,
    }
  ],
  entryComponents: [AppComponent]
})
export class AppModule implements DoBootstrap {
  async ngDoBootstrap(app) {
    const { keycloakConfig } = environment;

    try {
      await keycloakService.init({ config: keycloakConfig });
      app.bootstrap(AppComponent);
    } catch (error) {
      console.error('Keycloak init failed', error);
    }
  }
}
``` ",59072362,"I wasted half a day on this while developing with Vue.js against a server on localhost. 


You probably need to set the Web Origins on your Keycloak server for your Keycloak client:

1. Login to the Keycloak admin screen, select the realm pwe-realm and then your client pwe-web. 
2. Scroll to the Web Origin settings and type the plus sign. Do not click on the (+) button, but literally type + . That adds all the Valid Redirect URIs that you defined above to the Web Origins headers. You will also need to add the URI of your angular application to the Valid Redirect URIs list.
3. Press Save at the bottom of the screen.

It should work immediately."
49322417,Obtain id_token with Keycloak,"Who knows how to obtain the id_token with `Keycloak`?

I have been working with `Keycloak` in `Java` (Spring, JEE) and postman.

The basics work fine but I need the `id_token` since there are some claims that they are not present in the `access_token` but they are present in the `id_token`.

Using the `keycloak-core` library I could obtain the Keycloak context, but the id_token attribute always is null.

Some idea?",49334183,"If you are using keycloak version 3.2.1,
then below mail chain will help you.
Hi All

I am using below curl command 
 

    curl -k  https://IP-ADDRESS:8443/auth/realms/Test123/protocol/openid-connect/token -d ""grant_type=client_credentials"" -d ""client_id=SURE_APP"" -d ""client_secret=ca3c4212-f3e8-43a4-aa14-1011c7601c67""


In the above command's response id_token is missing ,which is require for kong to tell who i am?

In my keycloak `realm->client-> Full Scope Allowed ->True`

Ok I found it we have to add 

    scope=openid

 then only it will work "
53089776,Keycloak add extra claims from database / external source with custom protocol mapper,"I've seen those two post that give a solution to this question but they do not provide detailed enough informations about how to do it for non Java developer like me:

https://stackoverflow.com/questions/43376233/keycloak-add-extra-claims-from-database-external-source

https://stackoverflow.com/questions/50523816/how-to-register-a-custom-protocolmapper-in-keycloak?noredirect=1&lq=1

Here is a recap of their solutions that could help others if filled with more details.

**Process expected** *[from 1st link][1]*

 

> 1. User logs in 
> 2. My custom protocol mapper gets called, where I overwrite the transformAccessToken method
> 3. Here I log in the client where the protocol mapper is in into keycloak, as a service. Here don't forget to use another client ID
> instead the one you're building the protocol mapper for, you'll enter
> an endless recursion otherwise.
> 4. I get the access token into the protocol mapper and I call the rest endpoint of my application to grab the extra claims, which is
> secured.
> 5. Get the info returned by the endpoint and add it as extra claims

**Steps to achieve it** *[from 2nd link][2]*

> Implement the ProtocolMapper interface and add the file
> *""META-INF/services/org.keycloak.protocol.ProtocolMapper""* containing the reference to the class. 
> 
> At this point Keycloak recognizes the new implementation. And you
> should be able to configure it via the admin console.
> 
> To add some data to the token add the following interfaces 
> 
> *org.keycloak.protocol.oidc.mappers.OIDCAccessTokenMapper*
> 
> and implement the methods according to the interface
> 
> Then add the file ""*META-INF/jboss-deployment-structure.xml*"" with the
> following content
> 
>     <?xml version=""1.0"" encoding=""UTF-8""?>
>     <jboss-deployment-structure>
>         <deployment>
>             <dependencies>
>                 <module name=""org.keycloak.keycloak-services""/>
>             </dependencies>
>         </deployment>
>     </jboss-deployment-structure>
> 
> And after doing all this the custom transformAccessToken() method is called
> on every request to URL
> http://<host>:<port>/auth/realms/testrealm/protocol/openid-connect/token

After reading this I have a few questions :

 1. How do you ”Implement the ProtocolMapper”
 2. Where do you add the files mentionned earlier ? ( can't see any META-INF/ directory in my Keycloak installation folder )
 3. How and where do you ”add the following interfaces”
 4. What does the custom transformAccessToken() looks like

Thank you all for your time. 
Let me know if I miss summarise their answers. 

**Edit :** 

I'm starting a bounty with the hope that someone will be able to give me detailled steps on how to add extra claims from database in Keycloak 3.4.3 ( Detailed enough for a non Java dev )

**Edit 2** 
A method descibed here could do the trick but lack details.
https://stackoverflow.com/questions/46595425/keycloak-create-a-custom-identity-provider-mapper?rq=1


  [1]: https://stackoverflow.com/questions/43376233/keycloak-add-extra-claims-from-database-external-source
  [2]: https://stackoverflow.com/questions/50523816/how-to-register-a-custom-protocolmapper-in-keycloak?noredirect=1&lq=1",53198932,"I hope this step by step guide helps you 

I'm using Keycloak 4.5.0 - because I have this newer version installed - but I should not make a big difference. And I implemented a `OIDCProtocolMapper` in the example.

Just to summarize it - for the quick overview for others - each step is described more detailed later

 1. You implement a CustomProtocolMapper class based on
    `AbstractOIDCProtocolMapper`

 2. META-INF/services File with the
    name `org.keycloak.protocol.ProtocolMapper` must be available and
    contains the name of your mapper

 3. `jboss-deployment-structure.xml` need to be available to use
    keycloak built in classes

 4. Jar File is deployed in
    `/opt/jboss/keycloak/standalone/deployments/`

Okay now more details :-)

Create your custom Mapper
-------------------------
I uploaded you my maven `pom.xml` ([pom][1]) - just import it into your IDE and all the dependencies should be loaded automatically. The dependencies are just `provided`  and will be later used from keycloak directly at runtime

Relevant is the `keycloak.version` property - all keycloak dependencies are currently loaded in version `4.5.0.Final`

Now i created a custom Protocol Mapper Class called `CustomOIDCProtocolMapper`. Find ""full"" code [here][2]

It should extend `AbstractOIDCProtocolMapper` and need to implement all abstract methods. Maybe you want to have a SAML Protocol Mapper then it's another base class (`AbstractSAMLProtocolMapper`)

one relevant method is `transformAccessToken` - here I set a additional Claim to the AccessToken. You need your logic here but yeah - depends on your database, etc. ;-)


Services File
-------------

The services File is **important** for keycloak to find your custom-Implementation

Place a file with the **fileName** `org.keycloak.protocol.ProtocolMapper` inside `\src\main\resources\META-INF\services\` 

Inside this file you write to Name of your custom Provider - so keycloak knows that this class is available as Protocol Mapper<br>
In my example the file content is just one line

    com.stackoverflow.keycloak.custom.CustomOIDCProtocolMapper

Deployment Structure XML
------------------------

In your custom mapper you use files from keycloak. In order to use them we need to inform jboss about this dependency. 
Therefore create a file `jboss-deployment-structure.xml` inside `\src\main\resources\META-INF\` 
Content:

    <jboss-deployment-structure>
    	<deployment>
    	    <dependencies>
    	        <module name=""org.keycloak.keycloak-services"" />
    	    </dependencies>
    	</deployment>
    </jboss-deployment-structure>

Build and deploy your Extension
-------------------------------
Build a jar File of your Extension (`mvn clean package`) - and place the `jar` in `/opt/jboss/keycloak/standalone/deployments/` and restart keycloak

In the logfile you should see when it's deployed and (hopefully no) error messages

Now you can use your mapper - In my example I can create a Mapper in keycloak admin ui  and select `Stackoverflow Custom Protocol Mapper` from dropdown

Just as info - this is not fully official supported by keycloak - so interfaces could possible change in later versions

I hope it's understandable and you will be able to succesfully implement your own mapper

EDIT:
Exported eclipse file structure [zip][3]


  [1]: https://pastebin.com/dkbw1SDW
  [2]: https://pastebin.com/kz9jpC5V
  [3]: http://www.filedropper.com/keycloak-customprotocolmapper"
60659225,How to have Keycloak login page in iframe?,"There is a web server running locally, and I want to have Keycloak (on another domain) login page inside the iframe. I tried the following setting in the Keycloak Real Settings > Security Defenses > Headers > Content-Security-Policy
```
frame-src 'self' http://127.0.0.1 http://192.168.1.140 http://localhost *.home-life.hub http://trex-macbook.home-life.hub localhost; frame-ancestors 'self'; object-src 'none';
```
Basically, I put my local IP addresses and host names as sources to `frame-src`.

The login page is not shown and I get this error in the browser console
```
Refused to display 'http://keycloak.example.com:8080/auth/realms/master/protocol/openid-connect/auth?client_id=es-openid&response_type=code&redirect_uri=https%3A%2F%2Fkibana.example.com%3A5601%2Fauth%2Fopenid%2Flogin&state=3RV-_nbW-RvmB8EfUwgkJq&scope=profile%20email%20openid' in a frame because an ancestor violates the following Content Security Policy directive: ""frame-ancestors 'self'"".
```
My custom headers are present
[![enter image description here][1]][1]

My server and UI (server rendered) code:
```
'use strict';

const Hapi = require('@hapi/hapi');

const init = async () => {
  // Run server on all interfaces
  const server = Hapi.server({
    port: 3000,
  });

  await server.start();

  // server.ext('onPreResponse', (req, h) => {
  //   req.response.header('Content-Security-Policy', ""default-src 'self' *.example.com"");
  //   console.log('req.response.headers', req.response.headers);
  //   return h.continue;
  // });

  server.route({
    method: 'GET',
    path: '/home',
    handler: () => {
      return `<html>
                <head>
                  <title>searchguard kibana openid keycloak</title>
                </head>
                <body>
                  <p>
                    <iframe src=""https://kibana.example.com:5601"" width=""800"" height=""600""></iframe>
                  </p>
                </body>
              </html>`;
    },
  });

  server.route({
    method: '*',
    path: '/{path*}',
    handler: (req, h) => {
      return h.redirect('/home');
    },
  });

  console.log('Server running on %s', server.info.uri);
};

process.on('unhandledRejection', (err) => {
  console.log(err);
  process.exit(1);
});

init();

```

The iframe should show a page on kibana.example.com in the end. The Keycloak is used as an identity provider for the kibana.example.com.

  [1]: https://i.stack.imgur.com/vNezD.png",60659696,"Try to change:
```
frame-ancestors 'self';
```
to
```
frame-ancestors 'self' http://127.0.0.1 http://192.168.1.140 http://localhost *.home-life.hub http://trex-macbook.home-life.hub localhost;
```

Generally, tweak frame-ancestors CSP configuration."
52238839,Access Keycloak REST Admin API using a service account (client credential grant),"I like to manage keycloak from my own application:create user & clients, display users & client. As this is not a real user but a machine I would like to use a service account with a client credential grant as proposed in https://stackoverflow.com/questions/46470477/how-to-get-keycloak-users-via-rest-without-admin-account . To realize this I: 

1. create a realm 
2. inside the real created a client 
3. configured the access type of the client to ""confidential"" saved and activated the ""Service Accounts Enabled"" option that will apear after the save. 
4. enable under scopes the client-roles of the ""real-management"" (see screenshot) 
[![enter image description here][1]][1]

5. requested an access token with the ""username:password"" base64 encoded in the header
```
curl -X POST 'http://accounts.d10l.de/auth/realms/d10l/protocol/openid-connect/token' \
 -H ""Content-Type: application/x-www-form-urlencoded"" \
 -H ""Authorization: Basic ZGV2ZWxvcGVyLXBvcnRhbDpmZGRmYzM4Yy05MzAyLTRlZmQtYTM3Yy1lMWFmZGEyMmRhMzc="" \
 -d 'grant_type=client_credentials' \
| jq -r '.access_token'
```
6. Try to access the users using the access token: 

```
curl -I GET 'http://accounts.d10l.de/auth/admin/realms/d10l/users/' \
-H ""Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIxRVdoNENFUjIweDY5SlBCekU4dU9GdXF4R2NVNlVfWmpTNTQ5bmd2QjNjIn0.eyJqdGkiOiI0NDM0ZDFhNS0xZTA5LTQ4MzQtYWI2Yy0zOTk1YmEwMTgxMzAiLCJleHAiOjE1MzY0MzYwMDEsIm5iZiI6MCwiaWF0IjoxNTM2NDM1NzAxLCJpc3MiOiJodHRwOi8vYWNjb3VudHMuZDEwbC5kZS9hdXRoL3JlYWxtcy9kMTBsIiwiYXVkIjoiZGV2ZWxvcGVyLXBvcnRhbCIsInN1YiI6IjliYWI0YWM1LTRiNWMtNGIxOS05ZTc3LWFjOWFmNzlkNzFhZiIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRldmVsb3Blci1wb3J0YWwiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIyOWM2YWI3Mi05N2RiLTQ2NWUtYTE1Yy03ZWE5NzA0NmZlYzQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbXSwicmVzb3VyY2VfYWNjZXNzIjp7fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiY2xpZW50SWQiOiJkZXZlbG9wZXItcG9ydGFsIiwiY2xpZW50SG9zdCI6IjE3Mi4xNy4wLjEiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1kZXZlbG9wZXItcG9ydGFsIiwiY2xpZW50QWRkcmVzcyI6IjE3Mi4xNy4wLjEiLCJlbWFpbCI6InNlcnZpY2UtYWNjb3VudC1kZXZlbG9wZXItcG9ydGFsQHBsYWNlaG9sZGVyLm9yZyJ9.D_XnpF1rwCayup8h4UXM4AGWkY_xQo40X-yIlWhmqaxkVh1FQy24932VDRCAmxYHcrwazRMqO7snXmre3_8YF5R9Dt8GYjiBorECvQ9X_nBwunmHqnGxIeE64c2GXiz6zSjdgQJQE8fH10NsLyFWHQ-lBPsBwZBsrkKQ5QUEU2qjE7rDRPtYLJPB94BSE4QGfedmRIbvg39snVkClBDUmuBTq_Rc4p7kV69h0a2Mb1sgEr3MdB4RcsOe3gJPZVVtu7gZuGqcAQKMYgtybArF3OXz37w8hjUp6FABxDcvY7K-jsGxXn0hSU0OB7wxAWY9vP4ar4tQYlKxNjs46rPLWw""
```

But the response is a 403:

```
url: (6) Could not resolve host: GET
HTTP/1.1 403 Forbidden
content-length: 0
date: Sat, 08 Sep 2018 19:42:06 GMT 
```

How/Is it possible accessing the Admin REST API from a new service account through a client credential grant? 


  [1]: https://i.stack.imgur.com/z12Os.png",52276119,"Keycloak differentiates between the Scopes/Scope mapping & the roles management. 

The Scopes tab: you see in the question above only manages the roles that a client is allowed to request.

For the client credential grant to work these roles must be assigned to the client in the ""Service Account Roles"" Tab.

So in the end the client receive a token that is the intersection of both of those configurations. 

Source: https://www.keycloak.org/docs/latest/server_admin/index.html#_service_accounts

"
58060682,Get keycloak Server logs,We deployed keycloak server 4.6.0.Final for authentication for our web application How can i configure to get server logs? I cannot find any logs from server.log or Audit.log files. Do I need to configure any place to show the keycloak server log details.,58073143,"When starting the Keycloak instance you can pass an environment variables to set log level for Keycloak.

    docker run -e KEYCLOAK_LOGLEVEL=DEBUG jboss/keycloak
 
For the Kubernetes Deployment: 

Add the following env variable to Kuberenetes deployment manifest. 

    keycloak:
      extraEnv: |
        - name: KEYCLOAK_LOGLEVEL
          value: DEBUG
        - name: WILDFLY_LOGLEVEL
          value: DEBUG


More informations : https://github.com/devsu/docker-keycloak/blob/master/server/README.md"
42499818,KEYCLOAK - Refresh/update token not working,"I have single page application that is built using `Angularjs` and integrated with `Keycloak` for ***authentication and authorization***.

I am able to login into my application, get loggedin user roles etc. goes The moment refresh token call, it always returns in my else case, and user logout of the application. Though the token valid time is set very high.

I need to update the token, if user has opened the app. In case of failure or expire token i need to logout the user. `if (refreshed)` always returns false.

Below is the piece of code i am using.

    var __env = {};
    
    		Object.assign(__env, window.__env);
    
    		var keycloakConfig = {
    			""url"" : __env.keycloakUrl,
    			""realm"" : __env.keycloakRealm,
    			""clientId"" : __env.keycloakClientId,
    			""credentials"" : {
    			""secret"" : __env.keycloakSecret
    			}
    		};
    var keycloak = Keycloak(keycloakConfig);
    		keycloak.init({
    			onLoad : 'login-required'
    		}).success(function(authenticated) {
    				 if(authenticated){					 
    						keycloak.loadUserInfo().success(function(userInfo) {
    						bootstrapAngular(keycloak, userInfo, roles);
    					});
    			}
    		});
    		
    function bootstrapAngular(keycloak, userInfo, roles) {
    		angular.module('myApp').run(
    				function($rootScope, $http, $interval, $cookies) {
    					var updateTokenInterval = $interval(function() {
    						// refresh token if it's valid for less then 15 minutes
    					keycloak.updateToken(15).success(
    								function(refreshed) {
    									if (refreshed) {
    										$cookies.put('X-Authorization-Token',
    												keycloak.token);
    									}else{
    										$rootScope.logoutApp();
    									}
    								});
    					}, 600000);
    					updateTokenInterval;
    					$cookies.put('X-Authorization-Token', keycloak.token);
    
    					$rootScope.logoutApp = function() {
    						$cookies.remove('X-Authorization-Token');
    						$interval.cancel(updateTokenInterval);
    						keycloak.logout();
    					};
    	}
    }
",46280248,"I couldn't find explained it in the API docs but the `timeout` argument of ` keycloak.updateToken()` function is expressed in **seconds**, not in minutes.

So if the _Access Token Lifespan_ on server is at the default value of 5 minutes, you should use a value less than 300 seconds.
I learned it doing some experiments.


    //Update the token when will last less than 3 minutes
    keycloak.updateToken(180)

Btw I suggest you to use a _Lifespan_ longer than 5 minutes for the token.

In your code You never see the token refreshed because the refresh is never triggered in the 15 seconds window in which will work.

"
50562384,Keycloak templates available variables,"I'am googling for a while in order to find a documentation of all available say ""variables"" I can use in the various Keycloak templates.
by variable I mean all the `${xxx.yyy}` things I can use to inject some dynamic values inside the template.

Through the documentation I can find here and there some of them (like `${user.attributes}` or `${url.resourcesPath}`) but are there others than these ?

Does anyone have a reference link ?

Many Thanks
",50609098,"I did not find any easy to use documentation but I found the [Keycloak Javadocs](https://www.keycloak.org/docs-api/18.0/javadocs/index.html) which can be helpful when you look for the `*Bean` classes of this documentation. These classes seem to be the ones available in most of the templates. And their public methods will match the available properties you can use in the templates.

For example:
You want to know the properties available for the variable `url` you can check the class `UrlBean` in the documentation and you will find for example a method `getLoginUrl`. This means you can access the property `url.loginUrl`.

That's all I could find for the time being. Hope it will be helpful..."
57287497,Keycloak: Role based client log-in access restriction for users,"I am trying to achieve fairly simple usecase of role based client application (VueJS multi-page applications) control using the keycloak.

[![Client role mapping][1]][1]

As shown in image, I have three different roles and three different clients in single realm.<br>
The arrow in the image represents which role can access which client.

So my main objectives are,

 - User with role `Viewer` should only be able to **log-in** to the `Viewer Application`. If the same user tries to access the `Operator Application` or `Admin application` then keycloak should simply deny this user from doing so.
 - The same rules should follow for users with `Admin` and `Operator` role. Users of `Admin` role should be able to **log-in** to any of these application by keycloak.


To achieve this usecase I tried following ways,

 - First by appropriate role mapping to users and role creation in the clients. In this case, I create realm level roles and then client level roles, then assigned appropriate roles to the users created in the user section.
 - Enabling the `Authorization`. In the policies, I removed default policy that grant all users access to the client. And create a `User` policy and `Client` policy to restrict the access to client application
 - Also tried with `Group` based authorization policy. In this case, I created a group with client role and then assigned user to these groups. And enabled them from the `Authorization` group policy.

But, unfortunately none of this works. Meaning my user with `Viewer` role can **log-in** to my admin application. Which is just strange.


  [1]: https://i.stack.imgur.com/kelRs.jpg",72415540,"The solution proposed by @Stuck is a great start, but it has a significant flaw: When the user has already authenticated, e.g. via the standard flow of another client that did not require the role, the password form flow will never be triggered. Consequently, the user will be logged in via the cookie flow without ever checking for the role.

In other words: If there are other clients (such as the account console) that do not require the role, anyone can **bypass the role check**.

To fix this there needs to be an additional flow layer that includes all authentication executions, that is followed by the authorization step (no matter what authentication flow was used). The final result will look like this:

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/6UaSt.png"
55643277,"How can I get other users info(username, firstname) by id? [Keycloak]","How can I get user keycloak attributes (username, firstname, email...) based on user id? 
The user I'm using in the Keycloak session has already the role <i>view-users</i> assigned so I should be able to list at least all users, is there any Keycloak class that I can use?

What I'm trying to achieve here is to avoid to replicate the keycloak users database to another local database, but doesn't seem possible to access any other user info, besides the one in the current session...",55673148,"You can use the Admin REST API. The detailed description of the relevant API is available [here][1]. Also you can use the JAVA wrapper API. Please find couple of examples below.

**Example 1, REST:**

Get an access token:

    curl \
      -d ""client_id=admin-cli"" \
      -d ""username=admin"" \
      -d ""password=secret"" \
      -d ""grant_type=password"" \
      ""http://localhost:8080/auth/realms/master/protocol/openid-connect/token""

Get all users:

    curl \
      -H ""Authorization: bearer eyJhbGciOiJSUzI...."" \
      ""http://localhost:8080/auth/admin/realms/master/users""

Sample output:

    [
         {
            ""id"":""349f67de-36e6-4552-ac54-e52085109616"",
            ""username"":""admin"",
            ""enabled"":true,
            ...
         },
         {
            ""id"":""08afb701-fae5-40b4-8895-e387ba1902fb"",
            ""username"":""lbalev"",
            ""enabled"":true,
            ....
         }
      ]

Get a user based by user id:

    curl \
      -H ""Authorization: bearer eyJhbGciOiJSU...."" \
      ""http://localhost:8080/auth/admin/realms/master/users/349f67de-36e6-4552-ac54-e52085109616""

**Example 2, JAVA API:**

Get a user based on user ID:

    public class TestUserAccess {
    
      private static final String SERVER_URL = ""http://localhost:8080/auth"";
      private static final String REALM = ""master"";
      private static final String USERNAME = ""admin"";
      private static final String PASSWORD = ""secret"";
      private static final String CLIENT_ID = ""admin-cli"";
    
      public static void main(String[] args) {
    
        Keycloak keycloak = KeycloakBuilder
            .builder()
            .serverUrl(SERVER_URL)
            .realm(REALM)
            .username(USERNAME)
            .password(PASSWORD)
            .clientId(CLIENT_ID)
            .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(10).build())
            .build();
    
        UsersResource usersResource = keycloak.realm(REALM).users();
        UserResource userResource = usersResource.get(""08afb701-fae5-40b4-8895-e387ba1902fb"");
        System.out.println(userResource.toRepresentation().getEmail());
      }
    }

The relevant dependencies for the example above are (please note that the versions might not be up-to-date):

    dependencies {
        compile group: 'org.keycloak', name: 'keycloak-admin-client', version: '3.3.0.CR2'
        compile group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.4.Final'
        compile group: 'org.jboss.resteasy', name: 'resteasy-client', version: '3.1.4.Final'
        compile group: 'org.jboss.resteasy', name: 'resteasy-jackson2-provider', version: '3.1.4.Final'
    }


  [1]: https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_users_resource
"
58758198,Does AddJwtBearer() Do what I think it does?,"I am trying to determine if the JwtBearer Service provided for .net core 3.0, does it actually use the asymettric signing key that is provided by my oidc providers well known configuration???

I can't find any documentation around this.
```
.AddJwtBearer(opt =>
                    {
                        opt.Authority = ""http://localhost:8180/auth/realms/master"";
                        opt.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
                        {
                            ValidateIssuer = true,
                            ValidateAudience = false,
                            ValidateLifetime = true,
                            ValidateIssuerSigningKey = true
                        };
```

I am using Keycloak 4.8.3 as my oidc provider. The closest documentation I could find was here. https://developer.okta.com/blog/2018/03/23/token-authentication-aspnetcore-complete-guide

The relevant piece is here:

> If you let the JwtBearer middleware auto-configure via the discovery document, this all works automatically!

Did that above code do all that? Is this still relevant in 3.0 since we don't register the middleware anymore??

I bet a lot of people don't know about Asymetric Signing keys, and why they are so important. We have abstracted away so much from the developer, that now I don't even know if my api is secure.

So the final question is. `Does the .AddJwtBearer service with ""ValidateIssuerSigningKey"" periodically check the wellknown or whatever discovery document to grab the latest asymettric signing key?`

",59847808,"I was wondering same - research/debugging showed that JwtBearer indeed trying to contact authority to get public key.

Here is function called during validation :

    // System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.cs
       
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters)
                {
                    if (validationParameters == null)
                        throw LogHelper.LogArgumentNullException(nameof(validationParameters));
        
                    if (jwtToken == null)
                        throw LogHelper.LogArgumentNullException(nameof(jwtToken));
        
                    return JwtTokenUtilities.FindKeyMatch(jwtToken.Header.Kid, jwtToken.Header.X5t, validationParameters.IssuerSigningKey, validationParameters.IssuerSigningKeys);
                }

Obviously this logic to contact authority for public key is called only when you set Oauth authority in your configuration:

     .AddJwtBearer(o =>{
         o.Authority = ""https://authorityUri/"";
     })

AddJwtBearer middleware handler internally will add "".well-known/openid-configuration"" string to o.Authority and will try to fetch JSON with details of authority server. (Google example: https://accounts.google.com/.well-known/openid-configuration).

Next step - get `jwks_uri`, (in case of google https://www.googleapis.com/oauth2/v3/certs) and fetch jwks file, which will have data used for signature validation (publicKey, algorithm, initial vector)..

After all this steps, JwtBearer validates token signature.

Just for info - JwtBearer can validate token without authority if you configure it with your own Signing Key issuer, like this:

    .AddJwtBearer(o =>{
             o.TokenValidationParameters.IssuerSigningKey = GetKey();
             //in this case you need to provide valid audience or disable validation
             o.TokenValidationParameters.ValidateAudience = false
             //in this case you need to provide valid issuer or disable validation
             o.TokenValidationParameters.ValidateIssuer= false
         })

    Microsoft.IdentityModel.Tokens.SecurityKey = GetKey(){
                var key = ""Secret_Pass"";
                return new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key));
    }
In this case you need either provide issuer and audience or disable validation.
This configuration can be used for B2B cases - server to server communications - when you don't have Oauth server and issue tokens yourself using shared secret.

For the full picture look at this configuration - both authority and issuer key set:

     .AddJwtBearer(o =>{
         o.Authority = ""https://authorityUri/"";
         o.TokenValidationParameters.IssuerSigningKey = GetKey();
     })
In this case authority will not be touched and your locally generated key will be used to validate token, so priority is TokenValidationParameters.IssuerSigningKey. Means no reason to add Authority.


"
50087867,Keycloak User federation using existing MySQL database for users authentication,"I am trying to setup Keycloak server for our organisation. I have couple of questions.

1. How can we use our existing user database to authenticate users - User Federation. Keycloak only has LADP/Kerberos options. Is there any custom plugin which can be used for MySQL user authentication or can we use existing connectors itself (LDAP/Kerberos) via some adapter for the database?
2. Is it possible to have multiple Identity providers within Keycloak environment - (Have Keycloak as IDP for few services, while Keycloak Google IDP for other services).

I have followed the official documentation, but for some reason not able to view the content of the [link][1]. Any helpful links to proper guide would be great.


  [1]: https://keycloak.gitbooks.io/server-developer-guide/content/",71744980,"

I answered a similar question regarding existing databases user and keycloak authentication (link [here](https://stackoverflow.com/a/67253856/11805949))

I published my own solution as a multi RDBMS implementation (oracle, mysql, postgresl, sqlserver) to solve simple database federation needs, supporting bcrypt and several types of hashes.

It is a configurable keycloak custom provider, you will only need the to set some SQL queries and it is ready to use.

It is already compatible with new keycloak quarkus deployment.

Feel free to clone, fork, contribute or do whatever you need to solve your issue.

GitHub repo:

https://github.com/opensingular/singular-keycloak-database-federation
"
47861513,Spring Boot - How to disable Keycloak?,"I have a Spring Boot project with keycloak integrated. Now I want to disable keycloak for testing purposes.

I tried by adding `keycloak.enabled=false` to `application.properties` as mentioned in Keycloak [documentation][1] but it didnt work.

So how do I disable it?


  [1]: http://www.keycloak.org/docs/latest/securing_apps/index.html#_spring_boot_adapter",55369181,"**Update 2022**

Please follow this excellent [guide][1] on Baeldung.

***

For anyone who might have the same trouble, here is what I did.

I didn't disable Keycloak but I made a separate a Keycloak config file for testing purposes.

Here is my config file

    @Profile(""test"")
    @Configuration
    @EnableWebSecurity
    public class SecurityTestConfig extends WebSecurityConfigurerAdapter {
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests().antMatchers(""/**"").permitAll();
            http.headers().frameOptions().disable();
            http.csrf().disable();
    
        }
    
        @Override
        public void configure(WebSecurity web) throws Exception {
            web.ignoring().antMatchers(""/**"");
        }
    
        @Bean
        @Scope(scopeName = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
        public AccessToken accessToken() {
            AccessToken accessToken = new AccessToken();
            accessToken.setSubject(""abc"");
            accessToken.setName(""Tester"");
    
            return accessToken;
    
        }
    
    }

Please note it is important to use this only in a test environment and therefore I have annotated the config as `@Profile(""test"")`. I have also added an `AccessToken` bean since some of the auditing features in my application depend on it.


  [1]: https://www.baeldung.com/spring-keycloak-security-disable"
51925423,Keycloak: How to auto redirect Keycloak user to OKTA SSO page instead of clicking on button?,"I have followed the guide [https://ultimatesecurity.pro/post/okta-saml/][1] , to
configure OKTA Saml with keycloak. After this configuration, I see
Okta/saml login button on login page, clicking on which, the user is
redirected to Okta login/SSO.

[![enter image description here][2]][2]

Now, is there a way to avoid clicking on this button everytime such that
when the keycloak login page appears, user is auto redirected to Okta SSO
automatically instead of shown keycloak login form with okta redirect
button?

If not, is it possible to enter okta username password within the keycloak
form fields and keycloak have it validated internally from Okta?

This requirement is because the customer is using only Okta as IDP and does
not have any other like LDAP etc and clicking on a button seems overhead.


  [1]: https://ultimatesecurity.pro/post/okta-saml/
  [2]: https://i.stack.imgur.com/KyERo.png",52176780,"The solution is pretty simple. 

**1. Go to Realm -> Configure -> Authentication**

[![enter image description here][1]][1]

**2. Go to Flows -> Browser-> Identity Provider Redirecter -> Actions -> Config**

[![enter image description here][2]][2]

**3. Enter the saml / okta identity provider name that you have created for your realm**

[![enter image description here][3]][3]

**(as you can see in my case it was saml-okta-41)**

[![enter image description here][4]][4]


  [1]: https://i.stack.imgur.com/lugZn.png
  [2]: https://i.stack.imgur.com/1KpoA.png
  [3]: https://i.stack.imgur.com/duKiX.png
  [4]: https://i.stack.imgur.com/frOor.png"
57467224,Keycloak: remote-store configuration for dedicated Infinispan cluster,"Recently, I hardened my Keycloak deployment to use a dedicated Infinispan cluster as a `remote-store` for an extra layer of persistence for Keycloak's various caches.  The change itself went reasonably well, although after making this change, we started seeing a lot of login errors due to the `expired_code` error message:

```
WARN [org.keycloak.events] (default task-2007) type=LOGIN_ERROR, realmId=my-realm, clientId=null, userId=null, ipAddress=192.168.50.38, error=expired_code, restart_after_timeout=true
```

This error message is typically repeated dozens of times all within a short period of time and from the same IP address.  The cause of this appears to be the end-user's browser infinitely redirecting on login until the browser itself stops the loop.

I have seen various GitHub issues (https://github.com/helm/charts/issues/8355) that also document this behavior, and the consensus seems to be that this is caused by the Keycloak cluster not able to correctly discover its members via JGroups.

This explanation makes sense when you consider that some of the Keycloak caches are distributed across the Keycloak nodes in the default configuration within `standalone-ha.xml`. However, I have modified these caches to be local caches with a `remote-store` pointing to my new Infinispan cluster, and I believe I have made some incorrect assumptions about how this works, causing this error to start happening.

Here is how my Keycloak caches are configured:

```xml
<subsystem xmlns=""urn:jboss:domain:infinispan:7.0"">
    <cache-container name=""keycloak"" module=""org.keycloak.keycloak-model-infinispan"">
        <transport lock-timeout=""60000""/>
        <local-cache name=""realms"">
            <object-memory size=""10000""/>
        </local-cache>
        <local-cache name=""users"">
            <object-memory size=""10000""/>
        </local-cache>
        <local-cache name=""authorization"">
            <object-memory size=""10000""/>
        </local-cache>
        <local-cache name=""keys"">
            <object-memory size=""1000""/>
            <expiration max-idle=""3600000""/>
        </local-cache>
        <local-cache name=""sessions"">
            <remote-store cache=""sessions"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""authenticationSessions"">
            <remote-store cache=""authenticationSessions"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""offlineSessions"">
            <remote-store cache=""offlineSessions"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""clientSessions"">
            <remote-store cache=""clientSessions"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""offlineClientSessions"">
            <remote-store cache=""offlineClientSessions"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""loginFailures"">
            <remote-store cache=""loginFailures"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <local-cache name=""actionTokens"">
            <remote-store cache=""actionTokens"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </local-cache>
        <replicated-cache name=""work"">
            <remote-store cache=""work"" remote-servers=""remote-cache"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                <property name=""rawValues"">
                    true
                </property>
                <property name=""marshaller"">
                    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                </property>
            </remote-store>
        </replicated-cache>
    </cache-container>
    <cache-container name=""server"" aliases=""singleton cluster"" default-cache=""default"" module=""org.wildfly.clustering.server"">
        <transport lock-timeout=""60000""/>
        <replicated-cache name=""default"">
            <transaction mode=""BATCH""/>
        </replicated-cache>
    </cache-container>
    <cache-container name=""web"" default-cache=""dist"" module=""org.wildfly.clustering.web.infinispan"">
        <transport lock-timeout=""60000""/>
        <distributed-cache name=""dist"">
            <locking isolation=""REPEATABLE_READ""/>
            <transaction mode=""BATCH""/>
            <file-store/>
        </distributed-cache>
    </cache-container>
    <cache-container name=""ejb"" aliases=""sfsb"" default-cache=""dist"" module=""org.wildfly.clustering.ejb.infinispan"">
        <transport lock-timeout=""60000""/>
        <distributed-cache name=""dist"">
            <locking isolation=""REPEATABLE_READ""/>
            <transaction mode=""BATCH""/>
            <file-store/>
        </distributed-cache>
    </cache-container>
    <cache-container name=""hibernate"" module=""org.infinispan.hibernate-cache"">
        <transport lock-timeout=""60000""/>
        <local-cache name=""local-query"">
            <object-memory size=""10000""/>
            <expiration max-idle=""100000""/>
        </local-cache>
        <invalidation-cache name=""entity"">
            <transaction mode=""NON_XA""/>
            <object-memory size=""10000""/>
            <expiration max-idle=""100000""/>
        </invalidation-cache>
        <replicated-cache name=""timestamps""/>
    </cache-container>
</subsystem>
```

Note that most of this cache configuration is unchanged when compared to the default `standalone-ha.xml` configuration file.  The changes I have made here are changing the following caches to be `local` and pointing them to my remote Infinispan cluster:

- `sessions`
- `authenticationSessions`
- `offlineSessions`
- `clientSessions`
- `offlineClientSessions`
- `loginFailures`
- `actionTokens`
- `work`

Here is the configuration for my `remote-cache` server:

```xml
<socket-binding-group name=""standard-sockets"" default-interface=""public"" port-offset=""${jboss.socket.binding.port-offset:0}"">
    <!-- Default socket bindings from standalone-ha.xml are not listed here for brevity -->
    <outbound-socket-binding name=""remote-cache"">
        <remote-destination host=""${env.INFINISPAN_HOST}"" port=""${remote.cache.port:11222}""/>
    </outbound-socket-binding>
</socket-binding-group>
```

Here is how my caches are configured on the Infinispan side:

```xml
<subsystem xmlns=""urn:infinispan:server:core:9.4"" default-cache-container=""clustered"">
    <cache-container name=""clustered"" default-cache=""default"">
        <transport lock-timeout=""60000""/>
        <global-state/>
        <replicated-cache-configuration name=""replicated-keycloak"" mode=""SYNC"">
            <locking acquire-timeout=""3000"" />
        </replicated-cache-configuration>
        <replicated-cache name=""work"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""sessions"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""authenticationSessions"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""clientSessions"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""offlineSessions"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""offlineClientSessions"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""actionTokens"" configuration=""replicated-keycloak""/>
        <replicated-cache name=""loginFailures"" configuration=""replicated-keycloak""/>
    </cache-container>
</subsystem>
```

I believe I have made some incorrect assumptions about how local caches with remote stores work, and I was hoping someone would be able to clear this up for me.  My intention was to make the Infinispan cluster the source of truth for all of Keycloak's caches.  By making every cache local, I assumed that data would be replicated to each Keycloak node through the Infinispan cluster, such that a write to the local `authenticationSessions` cache on `keycloak-0` would be synchronously persisted to `keycloak-1` through the Infinispan cluster.

What I believe is happening is that the write to a local cache on Keycloak is not synchronous with respect to persisting that value to the remote Infinispan cluster.  In other words, when a write is performed to the `authenticationSessions` cache, it does not block while waiting for this value to be written to the Infinispan cluster, so an immediate read for this data on another Keycloak node results in a cache miss, locally and in the Infinispan cluster.

I'm looking for some help with identifying why my current configuration is causing this issue, and some clarification on the behavior of a `remote-store` - is there a way to get cache writes to a local cache backed by a `remote-store` to be synchronous?  If not, is there a better way to do what I'm trying to accomplish here?

Some other potentially relevant details:

- Both Keycloak and Infinispan are deployed to the same namespace in a Kubernetes cluster.
- I am using `KUBE_PING` for JGroups discovery.
- Using the Infinispan console, I am able to verify that all of the caches replicated to all of the Infinispan nodes have some amount of entries in them - they aren't completely unused.
- If I add a new realm to one Keycloak node, it successfully shows up on other Keycloak nodes, which leads me to believe that the `work` cache is being propagated across all Keycloak nodes.
- If I log in to one Keycloak node, my session remains on other Keycloak nodes, which leads me to believe that the session related caches are being propagated across all Keycloak nodes.
- I'm using sticky sessions for Keycloak as a temporary fix for this, but I believe fixing these underlying cache issues is a more permanent solution.

Thanks in advance!",57582786,"I will try to clarify some points to take in mind when you configure Keycloak in cluster.

Talking about subject of **""infinite redirects""**, I have experienced a similar problem in development environments years ago. While the keycloak team has corrected several bugs related to infinite loops (e.g. [KEYCLOAK-5856][1], [KEYCLOAK-5022][2], [KEYCLOAK-4717][3], [KEYCLOAK-4552][4], [KEYCLOAK-3878][5]) sometimes it is happening due to configuration issues.

One thing to check if the site is HTTPS is to be accessing a Keycloak server by HTTPS as well.

I remember suffered a similar problem to the infinite loop when the Keycloak was placed behind an HTTPS reverse proxy and the needed headers were not propagated to the Keycloak (headers X-FOWARDED...). It was solved setting up the environment well. It can happen a similar problem when the nodes discovery in the cluster does not work correctly (JGroups).

About the error message **""expired_code""**, I would verify that the clocks of each node are synchronized since it can lead to this kind of expired token / code error.

Now understanding better your configuration, it does not seem inappropriate to use the ""local-cache"" mode with a remote-store, pointing to the infinispan cluster.

Although, usually, the shared store (such as a remote-cache) is usually used with an invalidation-cache where it is avoided to replicate the complete data by the cluster (see comment that can be applied here https://developer.jboss.org/message/986847#986847), there may not be big differences with a distributed or invalidation cache.

I believe that a distributed-cache with a remote-store would apply better (or an invalidation-cache to avoid replicating heavy data to the owners) however I could not ensure how a ""local-cache"" works with a remote storage (shared) since I have never tried this kind of configuration. 
I would first choose to test a distributed-cache or an invalidation-cache given by how it works with the evicted / invalidated data. Normally, local caches do not synchronize with other remote nodes in the cluster. If this kind of implementation keeps a local map in memory, it is likely that even if the data in the remote-storage is modified, these changes may be not reflected in some situations.
I can give you a Jmeter test file that you can use so that you can try to perform your own tests with both configurations.

Returning to the topic of your configuration, you have to take into account in addition to that the replicated cache have certain limitations and are usually a little slower than the distributed ones that only replicate the data to the defined owners (the replicated ones write in all the nodes). There is also a variant called scattered-cache that performs better but for example lacks Transaction support (you can see here a comparative chart https://infinispan.org/docs/stable/user_guide/user_guide.html#which_cache_mode_should_i_use).
Replication usually only performs well in small clusters (under 8 or 10 servers), due to the number of replication messages that need to send. Distributed cache allows Infinispan to scale linearly by defining a number of replicas by entry.

The main reason to make a configuration of the type you are trying to do instead of one similar to the one proposed by Keycloak (standalone-ha.xml), is when you have a requirement to independently scale the infinispan cluster of the application or using infinispan as a persistent store.

I will explain how Keycloak manages its cache and how it divides it into two or three groups basically so you can better understand the configuration you need.

Usually, to configure Keycloak in a cluster, simply raise and configure the Keycloak in HA mode just as you would do with a traditional instance of Wildfly. If one observes the differences between the standalone.xml and the standalone-ha.xml that comes in the keycloak installation, one notices that basically support is added to ""Jgroups"", ""modcluster"", and the caches are distributed (which were previously local) between the nodes in Wildfly / Keycloak (HA).

**In detail**:

 - jgroups subsystem is added, which will be responsible for connecting the cluster nodes and carrying out the messaging / communication in the cluster. JGroups provides network communication capabilities, reliable communications and other features like node discovery, point-to-point communications, multicast communication, failure detection, and data transfer between cluster nodes.
 - the EJB3 cache goes from a SIMPLE cache (in local memory without transaction handling) to a DISTRIBUTED. However, I would ensure that the Keycloak project does not require using EJB3 according to my experience extending this project.
 - cache: ""realms"", ""users"", ""authorization"", and ""keys"" are kept local since they are only used to reduce the load on the database.
 - cache: ""work"" becomes REPLICATED since it is the one that Keycloak uses to notify to the cluster nodes that an entry of the cache must be evicted/invalidated since its status has been modified.
 - cache ""sessions"", ""authenticationSessions"", ""offlineSessions"", ""clientSessions"", ""offlineSessions"", ""loginFailures"", and ""actionTokens"" becomes DISTRIBUTED because they perform better than replicated-cache (see https://infinispan.org/docs/stable/user_guide/user_guide.html#which_cache_mode_should_i_use) because you only have to replicate the data to the owners.
 - The other changes proposed by keycloak for its default HA configuration are to distributing""web"" and ""ejb"" (and above) cache container, and to change ""hibernate"" cache to an ""invalidation-cache"" (like a local cache but with invalidation sync).

I think that your cache configuration should be defined as ""distributed-cache"" for caches like ""sessions"", ""authenticationSessions"", ""offlineSessions"", ""clientSessions"", ""offlineClientSessions"", ""loginFailures"" and ""actionTokens"" (instead of ""local""). However, because you use a remote shared store, you should test it to see how it works as I said before.

Also, cache named ""work"" should be ""replicated-cache"" and the others (""keys"", ""authorization"", ""realms"" and ""users"") should be defined as ""local-cache"".

In your infinispan cluster you can define it as ""distributed-cache"" (or ""replicated-cache"").

Remember that:

> In a replicated cache all nodes in a cluster hold all keys i.e. if a
> key exists on one node, it will also exist on all other nodes.  In a
> distributed cache, a number of copies are maintained to provide
> redundancy and fault tolerance, however this is typically far fewer
> than the number of nodes in the cluster. A distributed cache provides
> a far greater degree of scalability than a replicated cache.
> A distributed cache is also able to transparently locate keys across a
> cluster, and provides an L1 cache for fast local read access of state
> that is stored remotely.  You can read more in the relevant User Guide
> chapter.

*Infinispan doc. ref: [cache mode][6]*


As the Keycloak (6.0) documentation says:

> Keycloak has two types of caches. One type of cache sits in front of
> the database to decrease load on the DB and to decrease overall
> response times by keeping data in memory. Realm, client, role, and
> user metadata is kept in this type of cache. This cache is a local
> cache. Local caches do not use replication even if you are in the
> cluster with more Keycloak servers. Instead, they only keep copies
> locally and if the entry is updated an invalidation message is sent to
> the rest of the cluster and the entry is evicted. There is separate
> replicated cache work, which task is to send the invalidation messages
> to the whole cluster about what entries should be evicted from local
> caches. This greatly reduces network traffic, makes things efficient,
> and avoids transmitting sensitive metadata over the wire.
> 
> The second type of cache handles managing user sessions, offline
> tokens, and keeping track of login failures so that the server can
> detect password phishing and other attacks. The data held in these
> caches is temporary, in memory only, but is possibly replicated across
> the cluster.

*Doc. Reference: [cache configuration][7]*

If you want to read another good document, you can take a look to ""cross-dc"" section ([cross-dc mode][8]) especially section ""3.4.6 Infinispan cache"" ([infinispan cache][9])

I tried with Keycloak 6.0.1 and Infinispan 9.4.11.Final, here is my test configuration (based on standalone-ha.xml file).

**Keycloak infinispan subsystem**:

        <subsystem xmlns=""urn:jboss:domain:infinispan:8.0"">
            <cache-container name=""keycloak"" module=""org.keycloak.keycloak-model-infinispan"">
                <transport lock-timeout=""60000""/>
                <local-cache name=""realms"">
                    <object-memory size=""10000""/>
                </local-cache>
                <local-cache name=""users"">
                    <object-memory size=""10000""/>
                </local-cache>
                <distributed-cache name=""sessions"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""sessions"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
                    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <distributed-cache name=""authenticationSessions"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""authenticationSessions"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
                    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <distributed-cache name=""offlineSessions"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""offlineSessions"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <distributed-cache name=""clientSessions"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""clientSessions"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <distributed-cache name=""offlineClientSessions"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""offlineClientSessions"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
                    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <distributed-cache name=""loginFailures"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""loginFailures"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
                    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    </distributed-cache>
                <replicated-cache name=""work""/>
                <local-cache name=""authorization"">
                    <object-memory size=""10000""/>
                </local-cache>
                <local-cache name=""keys"">
                    <object-memory size=""1000""/>
                    <expiration max-idle=""3600000""/>
                </local-cache>
                <distributed-cache name=""actionTokens"" owners=""1"" remote-timeout=""30000"">
                    <remote-store cache=""actionTokens"" remote-servers=""remote-cache"" socket-timeout=""60000"" fetch-state=""false"" passivation=""false"" preload=""false"" purge=""false"" shared=""true"">
                    <property name=""rawValues"">
                    true
                    </property>
                    <property name=""marshaller"">
    org.keycloak.cluster.infinispan.KeycloakHotRodMarshallerFactory
                    </property>
                    </remote-store>
                    <object-memory size=""-1""/>
                    <expiration max-idle=""-1"" interval=""300000""/>
                </distributed-cache>
             </cache-container>

**Keycloak socket bindings**:

    <socket-binding-group name=""standard-sockets"" default-interface=""public"" port-offset=""${jboss.socket.binding.port-offset:0}"">
        <socket-binding name=""management-http"" interface=""management"" port=""${jboss.management.http.port:9990}""/>
        <socket-binding name=""management-https"" interface=""management"" port=""${jboss.management.https.port:9993}""/>
        <socket-binding name=""ajp"" port=""${jboss.ajp.port:8009}""/>
        <socket-binding name=""http"" port=""${jboss.http.port:8080}""/>
        <socket-binding name=""https"" port=""${jboss.https.port:8443}""/>
        <socket-binding name=""jgroups-mping"" interface=""private"" multicast-address=""${jboss.default.multicast.address:230.0.0.4}"" multicast-port=""45700""/>
        <socket-binding name=""jgroups-tcp"" interface=""private"" port=""7600""/>
        <socket-binding name=""jgroups-udp"" interface=""private"" port=""55200"" multicast-address=""${jboss.default.multicast.address:230.0.0.4}"" multicast-port=""45688""/>
        <socket-binding name=""modcluster"" multicast-address=""${jboss.modcluster.multicast.address:224.0.1.105}"" multicast-port=""23364""/>
        <socket-binding name=""txn-recovery-environment"" port=""4712""/>
        <socket-binding name=""txn-status-manager"" port=""4713""/>
    <outbound-socket-binding name=""remote-cache"">
    <remote-destination host=""my-server-domain.com"" port=""11222""/>  
    </outbound-socket-binding>
        <outbound-socket-binding name=""mail-smtp"">
            <remote-destination host=""localhost"" port=""25""/>
        </outbound-socket-binding>
    </socket-binding-group>


**Infinispan cluster configuration**:

    <subsystem xmlns=""urn:infinispan:server:core:9.4"" default-cache-container=""clustered"">
        <cache-container name=""clustered"" default-cache=""default"" statistics=""true"">
            <transport lock-timeout=""60000""/>
            <global-state/>
            <distributed-cache-configuration name=""transactional"">
                <transaction mode=""NON_XA"" locking=""PESSIMISTIC""/>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""async"" mode=""ASYNC""/>
            <replicated-cache-configuration name=""replicated""/>
            <distributed-cache-configuration name=""persistent-file-store"">
                <persistence>
                    <file-store shared=""false"" fetch-state=""true""/>
                </persistence>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""indexed"">
                <indexing index=""LOCAL"" auto-config=""true""/>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""memory-bounded"">
                <memory>
                    <binary size=""10000000"" eviction=""MEMORY""/>
                </memory>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""persistent-file-store-passivation"">
                <memory>
                    <object size=""10000""/>
                </memory>
                <persistence passivation=""true"">
                    <file-store shared=""false"" fetch-state=""true"">
                        <write-behind modification-queue-size=""1024"" thread-pool-size=""1""/>
                    </file-store>
                </persistence>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""persistent-file-store-write-behind"">
                <persistence>
                    <file-store shared=""false"" fetch-state=""true"">
                        <write-behind modification-queue-size=""1024"" thread-pool-size=""1""/>
                    </file-store>
                </persistence>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""persistent-rocksdb-store"">
                <persistence>
                    <rocksdb-store shared=""false"" fetch-state=""true""/>
                </persistence>
            </distributed-cache-configuration>
            <distributed-cache-configuration name=""persistent-jdbc-string-keyed"">
                <persistence>
                    <string-keyed-jdbc-store datasource=""java:jboss/datasources/ExampleDS"" fetch-state=""true"" preload=""false"" purge=""false"" shared=""false"">
                        <string-keyed-table prefix=""ISPN"">
                            <id-column name=""id"" type=""VARCHAR""/>
                            <data-column name=""datum"" type=""BINARY""/>
                            <timestamp-column name=""version"" type=""BIGINT""/>
                        </string-keyed-table>
                        <write-behind modification-queue-size=""1024"" thread-pool-size=""1""/>
                    </string-keyed-jdbc-store>
                </persistence>
            </distributed-cache-configuration>
            <distributed-cache name=""default""/>
            <replicated-cache name=""repl"" configuration=""replicated""/>
            <replicated-cache name=""work"" configuration=""replicated""/>
            <replicated-cache name=""sessions"" configuration=""replicated""/>
            <replicated-cache name=""authenticationSessions"" configuration=""replicated""/>
            <replicated-cache name=""clientSessions"" configuration=""replicated""/>
            <replicated-cache name=""offlineSessions"" configuration=""replicated""/>
            <replicated-cache name=""offlineClientSessions"" configuration=""replicated""/>
            <replicated-cache name=""actionTokens"" configuration=""replicated""/>
            <replicated-cache name=""loginFailures"" configuration=""replicated""/>
        </cache-container>
    </subsystem>

P.S. Change attribute ""owners"" from 1 to your favorite value.

I hope to be helpful.

  [1]: https://issues.jboss.org/browse/KEYCLOAK-5856
  [2]: https://issues.jboss.org/browse/KEYCLOAK-5022
  [3]: https://issues.jboss.org/browse/KEYCLOAK-4717
  [4]: https://issues.jboss.org/browse/KEYCLOAK-4552
  [5]: https://issues.jboss.org/browse/KEYCLOAK-3878
  [6]: https://infinispan.org/docs/stable/faqs/faqs.html#what_is_the_difference_between_a_replicated_cache_and_a_distributed_cache
  [7]: https://www.keycloak.org/docs/6.0/server_installation/#cache-configuration
  [8]: https://www.keycloak.org/docs/6.0/server_installation/#crossdc-mode
  [9]: https://www.keycloak.org/docs/6.0/server_installation/#cache"
49511606,cannot create user in the keycloak. Getting 403 status,"I am trying to access the create a user in the keycloak programmatically. But I am getting 403 as a status code. I am following the below link.

https://technology.first8.nl/programmatically-adding-users-in-keycloak/

Can anyone help me? Thanks In advance


I have using the following code to create user  


    Keycloak kc = Keycloak.getInstance(
    					 ""http://{server name}:8080/auth"",
    					 ""{realm name}"", // the realm to log in to
    					 ""{useraname}"", 
    					 ""{password}"",  // the user
    					 ""{client id}"",
    					 ""{client secret key}"");
    			
    			CredentialRepresentation credential = new CredentialRepresentation();
    			credential.setType(CredentialRepresentation.PASSWORD);
    			credential.setValue(""test123"");
    			UserRepresentation user = new UserRepresentation();
    			user.setUsername(""codeuser"");
    			user.setFirstName(""sampleuser1"");
    			user.setLastName(""password"");
    			
    			user.setCredentials(Arrays.asList(credential));
    			user.setEnabled(true);
    			Response result = kc.realm(""{realm name}"").users().create(user);

response.status is coming as 403",53411469,"I faced the same issue. This is how i fixed it.

1. Create a role that has at least a realm-management role of `manage-users`
[![enter image description here][1]][1]


[![enter image description here][2]][2]

**UI update for server 9.0.2**
[![UI update for server 9.0.2][3]][3]


2. Go to your client's `Scope` tab and add the role to your `Realm Roles`
[![enter image description here][4]][4]


  [1]: https://i.stack.imgur.com/FpTYB.png
  [2]: https://i.stack.imgur.com/mPb1m.png
  [3]: https://i.stack.imgur.com/Sa9zl.png
  [4]: https://i.stack.imgur.com/WdDwE.png"
47068266,Keycloak Docker behind loadbalancer with https fails,I am trying to use clustered keycloak docker behind the A10 load balancer. I am trying access all the request by https from the client application. My issue is that the same setup is working when we try to access keycloak has HTTP but at the same time when we try to access this has HTTPS it is not working. Can anyone help me to solve this issue? Please let me know whether the issue is in the keycloak level or A10 load balancer level.,47069143,"I don't know A10, but you have to ensure that it sets the request headers __X-Forwarded-For__ and __X-Forwarded-Proto__.
Then you have to configure Keycloak (Wildfly, Undertow) to work together with the SSL terminating reverse proxy (aka load balancer).
See http://www.keycloak.org/docs/latest/server_installation/index.html#_setting-up-a-load-balancer-or-proxy for a detailed description."
53721588,"keycloak token introspection always fails with {""active"":false}","I'm kind of desesperate to make this keycloak work. I can authenticate but for some reason, my token introspection always fail.
For example if I try to authenticate:

    curl -d 'client_id=flask_api' -d 'client_secret=98594477-af85-48d8-9d95-f3aa954e5492' -d 'username=jean@gmail.com' -d 'password=superpassE0' -d 'grant_type=password' 'http://keycloak.dev.local:9000/auth/realms/skilltrock/protocol/openid-connect/token'

I get my access_token as expected:

    {
       ""access_token"":""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJnLVZJQ0VETnJ4NWRfN1pWQllCTC1tNDdTZWFNT3NDVlowSFdtZF9QQkZrIn0.eyJqdGkiOiIwNTBkYWI5MS1kMjA5LTQwYjctOTBkOS1mYTgzMWYyMTk1Y2MiLCJleHAiOjE1NDQ1MjIyNDEsIm5iZiI6MCwiaWF0IjoxNTQ0NTIxOTQxLCJpc3MiOiJodHRwOi8va2V5Y2xvYWsuZGV2LmxvY2FsOjkwMDAvYXV0aC9yZWFsbXMvc2tpbGx0cm9jayIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3NDA0MWNkNS1lZDBhLTQzMmYtYTU3OC0wYzhhMTIxZTdmZTAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJmbGFza19hcGkiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJiOGI0MzA2Ny1lNzllLTQxZmItYmNkYi0xMThiMTU2OWU3ZDEiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJqZWFuIHBpZXJyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImplYW5AZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6ImplYW4iLCJmYW1pbHlfbmFtZSI6InBpZXJyZSIsImVtYWlsIjoiamVhbkBnbWFpbC5jb20ifQ.x1jW1cTSWSXN5DsXT3zk1ra4-BcxgjXbbqV5cjdwKTovoNQn7LG0Y_kR8-8Pe8MvFe7UNmqrHbHh21wgZy1JJFYSnnPKhzQaiT5YTcXCRybSdgXAjnvLpBjVQGVbMse_obzjjE1yTdROrZOdf9ARBx6EBr3teH1bHMu32a5wDf-fpYYmHskpW-YoQZljzNyL353K3bmWMlWSGzXx1y7p8_T_1WLwPMPr6XJdeZ5kW0hwLcaJVyDhX_92CFSHZaHQvI8P095D4BKLrI8iJaulnhsb4WqnkUyjOvDJBqrGxPvVqJxC4C1NXKA4ahk35tk5Pz8uS33HY6BkcRKw7z6xuA"",
       ""expires_in"":300,
       ""refresh_expires_in"":1800,
       ""refresh_token"":""eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJlYmY4ZDVlOC01MTM4LTRiNTUtYmZhNC02YzcwMzBkMTIwM2YifQ.eyJqdGkiOiI3NWQ1ODgyMS01NzJkLTQ1NDgtOWQwYS0wM2Q3MGViYWE4NGEiLCJleHAiOjE1NDQ1MjM3NDEsIm5iZiI6MCwiaWF0IjoxNTQ0NTIxOTQxLCJpc3MiOiJodHRwOi8va2V5Y2xvYWsuZGV2LmxvY2FsOjkwMDAvYXV0aC9yZWFsbXMvc2tpbGx0cm9jayIsImF1ZCI6Imh0dHA6Ly9rZXljbG9hay5kZXYubG9jYWw6OTAwMC9hdXRoL3JlYWxtcy9za2lsbHRyb2NrIiwic3ViIjoiNzQwNDFjZDUtZWQwYS00MzJmLWE1NzgtMGM4YTEyMWU3ZmUwIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImZsYXNrX2FwaSIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImI4YjQzMDY3LWU3OWUtNDFmYi1iY2RiLTExOGIxNTY5ZTdkMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIn0.omhube2oe79dXlcChOD9AFRdUep53kKPjD0HF14QioY"",
       ""token_type"":""bearer"",
       ""not-before-policy"":0,
       ""session_state"":""b8b43067-e79e-41fb-bcdb-118b1569e7d1"",
       ""scope"":""email profile""
    }

But if I try to introspect the access_token like given below, keycloack return always {""active"":false}. I really don't understand this behavior.

    curl -X POST -u ""flask_api:98594477-af85-48d8-9d95-f3aa954e5492"" -d ""token=eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJnLVZJQ0VETnJ4NWRfN1pWQllCTC1tNDdTZWFNT3NDVlowSFdtZF9QQkZrIn0.eyJqdGkiOiIwNTBkYWI5MS1kMjA5LTQwYjctOTBkOS1mYTgzMWYyMTk1Y2MiLCJleHAiOjE1NDQ1MjIyNDEsIm5iZiI6MCwiaWF0IjoxNTQ0NTIxOTQxLCJpc3MiOiJodHRwOi8va2V5Y2xvYWsuZGV2LmxvY2FsOjkwMDAvYXV0aC9yZWFsbXMvc2tpbGx0cm9jayIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3NDA0MWNkNS1lZDBhLTQzMmYtYTU3OC0wYzhhMTIxZTdmZTAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJmbGFza19hcGkiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJiOGI0MzA2Ny1lNzllLTQxZmItYmNkYi0xMThiMTU2OWU3ZDEiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJqZWFuIHBpZXJyZSIsInByZWZlcnJlZF91c2VybmFtZSI6ImplYW5AZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6ImplYW4iLCJmYW1pbHlfbmFtZSI6InBpZXJyZSIsImVtYWlsIjoiamVhbkBnbWFpbC5jb20ifQ.x1jW1cTSWSXN5DsXT3zk1ra4-BcxgjXbbqV5cjdwKTovoNQn7LG0Y_kR8-8Pe8MvFe7UNmqrHbHh21wgZy1JJFYSnnPKhzQaiT5YTcXCRybSdgXAjnvLpBjVQGVbMse_obzjjE1yTdROrZOdf9ARBx6EBr3teH1bHMu32a5wDf-fpYYmHskpW-YoQZljzNyL353K3bmWMlWSGzXx1y7p8_T_1WLwPMPr6XJdeZ5kW0hwLcaJVyDhX_92CFSHZaHQvI8P095D4BKLrI8iJaulnhsb4WqnkUyjOvDJBqrGxPvVqJxC4C1NXKA4ahk35tk5Pz8uS33HY6BkcRKw7z6xuA"" http://localhost:9000/auth/realms/skilltrock/protocol/openid-connect/token/introspect

return 

    {""active"":false}

Where I am wrong? I'm totally lost",53721874,"You need to make sure that you introspect the token using the same DNS hostname/port as the request. Unfortunately that's a not widely documented ""feature"" of Keycloak...
So use:

       curl -u ""flask_api:98594477-af85-48d8-9d95-f3aa954e5492"" -d ""token=<token>"" http://keycloak.dev.local:9000/auth/realms/skilltrock/protocol/openid-connect/token/introspect
"
50573461,Spring Websockets Authentication with Spring Security and Keycloak,"I'm using Spring Boot (v1.5.10.RELEASE) to create a backend for an application written in Angular. The back is secured using spring security + keycloak. Now I'm adding a websocket, using STOMP over SockJS, and wanted to secure it. I'm trying to follow the docs at [Websocket Token Authentication][1], and it shows the following piece of code:

    if (StompCommand.CONNECT.equals(accessor.getCommand())) {
      Authentication user = ... ; // access authentication header(s)
      accessor.setUser(user);
    }

I'm able to retrieve the bearer token from the client using:

    String token = accessor.getNativeHeader(""Authorization"").get(0);

My question is, how can I convert that to an Authentication object? Or how to proceed from here? Because I always get 403. This is my websocket security config:

    @Configuration
    public class WebSocketSecurityConfig extends 
         AbstractSecurityWebSocketMessageBrokerConfigurer {

    @Override
    protected void configureInbound(MessageSecurityMetadataSourceRegistry 
        messages) {
    messages.simpDestMatchers(""/app/**"").authenticated().simpSubscribeDestMatchers(""/topic/**"").authenticated()
        .anyMessage().denyAll();
    }

      @Override
      protected boolean sameOriginDisabled() {
        return true;
      }
    }

And this is the Web security configuration:

    @EnableWebSecurity
    @EnableGlobalMethodSecurity(prePostEnabled = true)
    @Configuration
    public class WebSecurityConfiguration extends KeycloakWebSecurityConfigurerAdapter {
    
      @Override
      protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authenticationProvider(keycloakAuthenticationProvider())
            .addFilterBefore(keycloakAuthenticationProcessingFilter(), BasicAuthenticationFilter.class)
            .sessionManagement()
              .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
              .sessionAuthenticationStrategy(sessionAuthenticationStrategy())
            .and()
            .authorizeRequests()
              .requestMatchers(new NegatedRequestMatcher(new AntPathRequestMatcher(""/management/**"")))
                .hasRole(""USER"");
      }
    
      @Override
      protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
        return new NullAuthenticatedSessionStrategy();
      }
    
      @Bean
      public KeycloakConfigResolver KeycloakConfigResolver() {
        return new KeycloakSpringBootConfigResolver();
      }
    
    }

Any help or ideas are welcome.

  [1]: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket-stomp-authentication-token-based",50867554,"I was able to enable token based authentication, following the recomendations by [Raman][1] on [this question][2]. Here's the final code to make it work:

1) First, create a class that represent the JWS auth token:

    public class JWSAuthenticationToken extends AbstractAuthenticationToken implements Authentication {
    
      private static final long serialVersionUID = 1L;
    
      private String token;
      private User principal;
    
      public JWSAuthenticationToken(String token) {
        this(token, null, null);
      }
    
      public JWSAuthenticationToken(String token, User principal, Collection<GrantedAuthority> authorities) {
        super(authorities);
        this.token = token;
        this.principal = principal;
      }
    
      @Override
      public Object getCredentials() {
        return token;
      }
    
      @Override
      public Object getPrincipal() {
        return principal;
      }
    
    }

2) Then, create an authenticator that handles the JWSToken, validating against keycloak. User is my own app class that represents a user:

    @Slf4j
    @Component
    @Qualifier(""websocket"")
    @AllArgsConstructor
    public class KeycloakWebSocketAuthManager implements AuthenticationManager {
    
      private final KeycloakTokenVerifier tokenVerifier;
    
      @Override
      public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        JWSAuthenticationToken token = (JWSAuthenticationToken) authentication;
        String tokenString = (String) token.getCredentials();
        try {
          AccessToken accessToken = tokenVerifier.verifyToken(tokenString);
          List<GrantedAuthority> authorities = accessToken.getRealmAccess().getRoles().stream()
              .map(SimpleGrantedAuthority::new).collect(Collectors.toList());
          User user = new User(accessToken.getName(), accessToken.getEmail(), accessToken.getPreferredUsername(),
              accessToken.getRealmAccess().getRoles());
          token = new JWSAuthenticationToken(tokenString, user, authorities);
          token.setAuthenticated(true);
        } catch (VerificationException e) {
          log.debug(""Exception authenticating the token {}:"", tokenString, e);
          throw new BadCredentialsException(""Invalid token"");
        }
        return token;
      }
    
    }

3) The class that actually validates the token against keycloak by calling the certs endpoint to validate the token signature, based on [this gists][3]. It returns a keycloak AccessToken:

    @Component
    @AllArgsConstructor
    public class KeycloakTokenVerifier {
    
      private final KeycloakProperties config;
    
      /**
       * Verifies a token against a keycloak instance
       * @param tokenString the string representation of the jws token
       * @return a validated keycloak AccessToken
       * @throws VerificationException when the token is not valid
       */
      public AccessToken verifyToken(String tokenString) throws VerificationException {
        RSATokenVerifier verifier = RSATokenVerifier.create(tokenString);
        PublicKey publicKey = retrievePublicKeyFromCertsEndpoint(verifier.getHeader());
        return verifier.realmUrl(getRealmUrl()).publicKey(publicKey).verify().getToken();
      }
    
      @SuppressWarnings(""unchecked"")
      private PublicKey retrievePublicKeyFromCertsEndpoint(JWSHeader jwsHeader) {
        try {
          ObjectMapper om = new ObjectMapper();
          Map<String, Object> certInfos = om.readValue(new URL(getRealmCertsUrl()).openStream(), Map.class);
          List<Map<String, Object>> keys = (List<Map<String, Object>>) certInfos.get(""keys"");
    
          Map<String, Object> keyInfo = null;
          for (Map<String, Object> key : keys) {
            String kid = (String) key.get(""kid"");
            if (jwsHeader.getKeyId().equals(kid)) {
              keyInfo = key;
              break;
            }
          }
    
          if (keyInfo == null) {
            return null;
          }
    
          KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
          String modulusBase64 = (String) keyInfo.get(""n"");
          String exponentBase64 = (String) keyInfo.get(""e"");
          Decoder urlDecoder = Base64.getUrlDecoder();
          BigInteger modulus = new BigInteger(1, urlDecoder.decode(modulusBase64));
          BigInteger publicExponent = new BigInteger(1, urlDecoder.decode(exponentBase64));
    
          return keyFactory.generatePublic(new RSAPublicKeySpec(modulus, publicExponent));
    
        } catch (Exception e) {
          e.printStackTrace();
        }
        return null;
      }
    
      public String getRealmUrl() {
        return String.format(""%s/realms/%s"", config.getAuthServerUrl(), config.getRealm());
      }
    
      public String getRealmCertsUrl() {
        return getRealmUrl() + ""/protocol/openid-connect/certs"";
      }
    
    }

4) Finally, inject the authenticator in the Websocket configuration and complete the piece of code as recommended by spring docs:

    @Slf4j
    @Configuration
    @EnableWebSocketMessageBroker
    @AllArgsConstructor
    public class WebSocketConfiguration extends AbstractWebSocketMessageBrokerConfigurer {
    
      @Qualifier(""websocket"")
      private AuthenticationManager authenticationManager;
    
      @Override
      public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker(""/topic"");
        config.setApplicationDestinationPrefixes(""/app"");
      }
    
      @Override
      public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint(""/ws-paperless"").setAllowedOrigins(""*"").withSockJS();
      }
    
      @Override
      public void configureClientInboundChannel(ChannelRegistration registration) {
        registration.interceptors(new ChannelInterceptorAdapter() {
          @Override
          public Message<?> preSend(Message<?> message, MessageChannel channel) {
            StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
            if (StompCommand.CONNECT.equals(accessor.getCommand())) {
              Optional.ofNullable(accessor.getNativeHeader(""Authorization"")).ifPresent(ah -> {
                String bearerToken = ah.get(0).replace(""Bearer "", """");
                log.debug(""Received bearer token {}"", bearerToken);
                JWSAuthenticationToken token = (JWSAuthenticationToken) authenticationManager
                    .authenticate(new JWSAuthenticationToken(bearerToken));
                accessor.setUser(token);
              });
            }
            return message;
          }
        });
      }
    
    }

I also changed my security configuration a bit. First, I excluded the WS endpoint from spring web securty, and also let the connection methods open to anyone in the websocket security:

In WebSecurityConfiguration:

      @Override
      public void configure(WebSecurity web) throws Exception {
        web.ignoring()
            .antMatchers(""/ws-endpoint/**"");
      }

And in the class WebSocketSecurityConfig:

    @Configuration
    public class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {
    
      @Override
      protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {
        messages.simpTypeMatchers(CONNECT, UNSUBSCRIBE, DISCONNECT, HEARTBEAT).permitAll()
        .simpDestMatchers(""/app/**"", ""/topic/**"").authenticated().simpSubscribeDestMatchers(""/topic/**"").authenticated()
            .anyMessage().denyAll();
      }
    
      @Override
      protected boolean sameOriginDisabled() {
        return true;
      }
    }

So the final result is: anybody in the local network can connect to the socket, but to actually subscribe to any channel, you have to be authenticated, so you need to send the Bearer token with the original CONNECT message or you'll get UnauthorizedException. Hope it helps others with this requeriment!

  [1]: https://stackoverflow.com/users/430128/raman
  [2]: https://stackoverflow.com/questions/30887788/json-web-token-jwt-with-spring-based-sockjs-stomp-web-socket/39456274?noredirect=1#comment88308957_39456274
  [3]: https://gist.github.com/thomasdarimont/52152ed68486c65b50a04fcf7bd9bbde
"
48583361,How can I read all users using keycloak and spring?,"I'm using `keycloak 3.4` and `spring boot` to develop a web app.
I'm using the Active Directory as User Federation to retrieve all users information.

But to use those information inside my web app I think I have to save them inside the ""local-webapp"" database. 

So after the users are logged, how can I save them inside my database?

I'm thinking about a **scenario** like: ""I have an object A which it refers to the user B, so I have to put a relation between them. So I add a foreign key.""

In that case I need to have the user on my DB. no?

**EDIT**

To avoid to get save all users on my DB I'm trying to use the Administrator API, so I added the following code inside a controller.

I also created another client called `Test` to get all users, in this way I can use `client-id` and `client-secret.` Or is there a way to use the `JWT` to use the admin API?


**The client:**
		 

         Keycloak keycloak2 = KeycloakBuilder.builder()
        				     .serverUrl(""http://localhost:8080/auth/admin/realms/MYREALM/users"")
        				     .realm(""MYREALMM"")
        				     .username(""u.user"")
        				     .password(""password"")
        				     .clientId(""Test"")
        				     .clientSecret(""cade3034-6ee1-4b18-8627-2df9a315cf3d"")
        				     .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(20).build())
        				     .build();
    
     RealmRepresentation realm2 = keycloak2.realm(""MYREALMM"").toRepresentation();

the error is:

    2018-02-05 12:33:06.638 ERROR 16975 --- [nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.Error: Unresolved compilation problem: 
    	The method realm(String) is undefined for the type AccessTokenResponse
    ] with root cause
    
    java.lang.Error: Unresolved compilation problem: 
    	The method realm(String) is undefined for the type AccessTokenResponse

Where am I doing wrong?

**EDIT 2**

I also tried this:

    @Autowired
    private HttpServletRequest request;
    
    public ResponseEntity listUsers() {
        KeycloakAuthenticationToken token = (KeycloakAuthenticationToken) request.getUserPrincipal();        
        KeycloakPrincipal principal=(KeycloakPrincipal)token.getPrincipal();
        KeycloakSecurityContext session = principal.getKeycloakSecurityContext();
            
        Keycloak keycloak = KeycloakBuilder.builder()
        						    	    .serverUrl(""http://localhost:8080/auth"")
        						    	    .realm(""MYREALMM"")
        						            .authorization(session.getToken().getAuthorization().toString())
        						            .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(20).build())
        						            .build();
        
        RealmResource r = keycloak.realm(""MYREALMM"");
        List<org.keycloak.representations.idm.UserRepresentation> list = keycloak.realm(""MYREALMM"").users().list();
        return ResponseEntity.ok(list);

but the authorization is always `null`.
Why? 


**EDIT 3**
Following you can find my spring security config:

        @Configuration
    @EnableWebSecurity
    @EnableGlobalMethodSecurity(prePostEnabled=true)
    @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
    @KeycloakConfiguration
    public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
    	
    	@Override
    	protected void configure(HttpSecurity http) throws Exception {
    		 super.configure(http);
    	 
    		http.httpBasic().disable();
    		http
    		.csrf().disable()
    		.authorizeRequests()
    			.antMatchers(""/webjars/**"").permitAll()
    			.antMatchers(""/resources/**"").permitAll()
    			.anyRequest().authenticated()
    		.and()
    		.logout()
    			.logoutUrl(""/logout"")
    			.logoutRequestMatcher(new AntPathRequestMatcher(""/logout"", ""GET""))
    			.permitAll()
    			.logoutSuccessUrl(""/"")
    			.invalidateHttpSession(true);
    	}
    
    	  @Autowired
    	    public KeycloakClientRequestFactory keycloakClientRequestFactory;
    
    	    @Bean
    	    public KeycloakRestTemplate keycloakRestTemplate() {
    	        return new KeycloakRestTemplate(keycloakClientRequestFactory);
    	    }
    	    
        @Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) {
      
            KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
            SimpleAuthorityMapper simpleAuthorityMapper = new SimpleAuthorityMapper();
            simpleAuthorityMapper.setPrefix(""ROLE_"");
            simpleAuthorityMapper.setConvertToUpperCase(true);
            keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(simpleAuthorityMapper);
            auth.authenticationProvider(keycloakAuthenticationProvider);
        }
     
        @Bean
        public KeycloakSpringBootConfigResolver keycloakConfigResolver() {
            return new KeycloakSpringBootConfigResolver();
        }
     
        @Bean
        @Override
        protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
        }
    	
    	@Override
    	public void configure(WebSecurity web) throws Exception {
    	    web
    	       .ignoring()
    	       .antMatchers(""/resources/**"", ""/static/**"", ""/css/**"", ""/js/**"", ""/images/**"", ""/webjars/**"");
    	}
    	
    	 @Bean
         @Scope(scopeName = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
         public AccessToken accessToken() {
             HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
             return ((KeycloakSecurityContext) ((KeycloakAuthenticationToken) request.getUserPrincipal()).getCredentials()).getToken();
         }
    	 
    }
**EDIT 4**

These are the properties inside the `applicatoin.properties`

    #######################################
    #             KEYCLOAK                #
    #######################################
    
    keycloak.auth-server-url=http://localhost:8181/auth
    keycloak.realm=My Realm 
    keycloak.ssl-required=external
    keycloak.resource=AuthServer
    keycloak.credentials.jwt.client-key-password=keystorePwd
    keycloak.credentials.jwt.client-keystore-file=keystore.jks
    keycloak.credentials.jwt.client-keystore-password=keystorePwd
    keycloak.credentials.jwt.alias=AuthServer
    keycloak.credentials.jwt.token-expiration=10
    keycloak.credentials.jwt.client-keystore-type=JKS
    keycloak.use-resource-role-mappings=true
    keycloak.confidential-port=0
    keycloak.principal-attribute=preferred_username

EDIT 5.

This is my keycloak config:
[![enter image description here][1]][1]

the user that I'm using to login with view user permission:
[![enter image description here][2]][2]

**EDIT 6**

This the log form keycloak after enabling logging:

    2018-02-12 08:31:00.274 3DEBUG 5802 --- [nio-8080-exec-1] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.274 3DEBUG 5802 --- [nio-8080-exec-1] .k.a.t.AbstractAuthenticatedActionsValve : AuthenticatedActionsValve.invoke /utente/prova4
    2018-02-12 08:31:00.274 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : AuthenticatedActionsValve.invoke http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.274 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : Policy enforcement is disabled.
    2018-02-12 08:31:00.275 3DEBUG 5802 --- [nio-8080-exec-1] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.275 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : AuthenticatedActionsValve.invoke http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.275 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : Policy enforcement is disabled.
    2018-02-12 08:31:00.276 3DEBUG 5802 --- [nio-8080-exec-1] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.276 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : AuthenticatedActionsValve.invoke http://localhost:8080/utente/prova4
    2018-02-12 08:31:00.276 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.AuthenticatedActionsHandler        : Policy enforcement is disabled.
    2018-02-12 08:31:10.580 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.s.client.KeycloakRestTemplate      : Created GET request for ""http://localhost:8181/auth/admin/realms/My%20Realm%20name/users""
    2018-02-12 08:31:10.580 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.s.client.KeycloakRestTemplate      : Setting request Accept header to [application/json, application/*+json]
    2018-02-12 08:31:10.592 3DEBUG 5802 --- [nio-8080-exec-1] o.k.a.s.client.KeycloakRestTemplate      : GET request for ""http://localhost:8181/auth/admin/realms/My%20Realm%20name/users"" resulted in 401 (Unauthorized); invoking error handler
    2018-02-12 08:31:10.595 ERROR 5802 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.web.client.HttpClientErrorException: 401 Unauthorized] with root cause
    
    org.springframework.web.client.HttpClientErrorException: 401 Unauthorized
    	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:85) ~[spring-web-4.3.13.RELEASE.jar:4.3.13.RELEASE]
    	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:707) ~[spring-web-4.3.13.RELEASE.jar:4.3.13.RELEASE]

  [1]: https://i.stack.imgur.com/y9E4e.png
  [2]: https://i.stack.imgur.com/FewNa.png",48659086,"In order to access the whole list of users, you must verify that the logged user contains at least the `view-users` role from the `realm-management` client, see [this answer][1] I wrote some time ago. Once the user has this role, the JWT she retrieves will cointain it.

As I can infer from your comments, you seem to lack some bases about the `Authorization` header. Once the user gets logged in, she gets the signed JWT from keycloak, so as every client in the realm can trust it, without the need to ask Keycloak. This JWT contains the access token, which is later on required in the `Authorization` header for each of user's request, prefixed by the `Bearer` keyword (see **Token-Based Authentication** in https://auth0.com/blog/cookies-vs-tokens-definitive-guide/).

So when user makes the request to your app in order to view the list of users, her access token containing the `view-users` role already goes into the request headers. Instead of having to parse it manually, create another request yourself to access the Keycloak user endpoint and attach it (as you seem to be doing with `KeycloakBuilder`), the Keycloak Spring Security adapter already provides a `KeycloakRestTemplate` class, which is able to perform a request to another service for the current user:

**SecurityConfig.java**

    @Configuration
    @EnableWebSecurity
    @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
    public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
    
        ...
    
        @Autowired
        public KeycloakClientRequestFactory keycloakClientRequestFactory;
    
        @Bean
        @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
        public KeycloakRestTemplate keycloakRestTemplate() {
            return new KeycloakRestTemplate(keycloakClientRequestFactory);
        }
    
        ...
    }

Note the scope for the template is `PROTOTYPE`, so Spring will use a different instance for each of the requests being made.

Then, autowire this template and use it to make requests:

    @Service
    public class UserRetrievalService{
    
    	@Autowired
    	private KeycloakRestTemplate keycloakRestTemplate;
    	
        public List<User> getUsers() {
            ResponseEntity<User[]> response = keycloakRestTemplate.getForEntity(keycloakUserListEndpoint, User[].class);
            return Arrays.asList(response.getBody());
        }
    
    }

You will need to implement your own `User` class which matches the JSON response returned by the keycloak server.

Note that, when user not allowed to access the list, a 403 response code is returned from the Keycloak server. You could even deny it before yourself, using some annotations like: `@PreAuthorize(""hasRole('VIEW_USERS')"")`.

Last but not least, I think @dchrzascik's answer is well pointed. To sum up, I would say there's actually another way to avoid either retrieving the whole user list from the keycloak server each time or having your users stored in your app database: you could actually cache them, so as you could update that cache if you do user management from your app.


----------

**EDIT**

I've implemented a sample project to show how to obtain the whole list of users, uploaded to [Github][2]. It is configured for a confidential client (when using a public client, the secret should be deleted from the application.properties).

**See also:**

 - https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/oidc/java/spring-security-adapter.adoc


  [1]: https://stackoverflow.com/a/46558530/1199132
  [2]: https://github.com/xtremebiker/keycloak-user-retrieval"
53538100,How to get client secret via Keycloak API?,"How to get client secret via Keycloak API?

In documentation I see:

```GET /admin/realms/{realm}/clients/{id}/client-secret
```

My code is the following:


    data = {
        ""grant_type"" : 'password',
        ""client_id"" : 'myclientid',
        ""username"" : 'myusername',
        ""password"" : 'mypassword'
    }
    response = requests.get(""https://mylink.com/auth/admin/realms/{myrealm}/clients/{myclientid}/client-secret"", data=data, headers= {""Content-Type"": ""application/json""})


I always get 401 error.

What do I do wrong?
",53825640,"I think your authentication it's not working.

1. You need a token. You can generate using OpenID (see [docs][1]).
2. With the token (by header Authorization), you can do request to API.

Example:

Get the token

    data = {""username"": ""username"", ""password"": ""password"",
            ""client_id"": ""client_id"", ""client_secret"": ""client_secret"", 
            ""grant_type"": ""password""}

    token = request.post(""https://{server-url}/""realms/{realm-name}/protocol/openid-connect/token"", data=data)

Request to API

    response = requests.get(""https://mylink.com/auth/admin/realms/{myrealm}/clients/{myclientid}/client-secret"", data=data, headers= {""Authorization"": ""Bearer "" + token.get('access_token'), ""Content-Type"": ""application/json""})

  [1]: https://www.keycloak.org/docs/3.2/securing_apps/topics/oidc/oidc-generic.html

"
50397205,Why is 'id' called 'sub' in keycloak?,"Im looking at the new Keycloak Beta 4 API. When i get the users account information, what is referred to as 'id' in the web ui comes back as 'sub' in the account object.

    { sub: '25a37fd0-d10e-40ca-af6c-821f20e01be8',
      name: 'Barrack Obama',
      preferred_username: 'obama@whitehouse.gov',
      given_name: 'Barrack',
      family_name: 'Obama',
      email: 'obama@whitehouse.gov' }

What is 'sub' and is this a safe uuid to map database objects to?",50403385,"As per the keycloak documentation 

**Anatomy of Action Token**

Action token is a standard Json Web Token signed with active realm key where the payload contains several fields:

    typ - Identification of the action (e.g. verify-email)

    iat and exp - Times of token validity

    sub - ID of the user

    azp - Client name

    iss - Issuer - URL of the issuing realm

    aud - Audience - list containing URL of the issuing realm

    asid - ID of the authentication session (optional)

    nonce - Random nonce to guarantee uniqueness of use if the operation can only be executed once (optional)

Please refer the following link [https://www.keycloak.org/docs/latest/server_development/index.html#_action_token_anatomy][1]


  [1]: https://www.keycloak.org/docs/latest/server_development/index.html#_action_token_anatomy

Reason may be they want to retain the uniqueness in the name."
46453490,KeyCloak should be used as auth server for my users?,"So I want to have single sign in, in all the products using a auth server but that's not only for employees, keycloak should be used to that like auth0?",46479869,"Both Auth0 and Keycloak should be able to achieve your goal - assuming you want only social (facebook, google etc), and /or username & password authentication? 

Auth0 is the less risky option, keycloak is good for non-commercial & where you can afford production outages without a global 24x7 support team. Here a few other reasons why I'd recommend Auth0 - the documentation is world class, they have quickstart samples so you can get up and running in minutes, and easy access to more advanced options - passwordless, authentication, MFA, anomaly detection, x9's reliability, rate-limiting, an extensive management api, extensions for everything eg exporting logs to log aggregator, and so on.  Anyhow, good luck with your project, and obviously what suits best may simply be down to your own project requirements.

Should add, if you are doing mobile, then Auth0 put a lot of effort into adding the necessary specialised security flows to target mobile (native / hybrid) apps. For instance, PKCE usage when using `/authorize` endpoint. Please bear that in mind, as not certain how keycloak has been implemented to handle this - alot of IDMs still do this incorrectly today."
55535440,How to get users from Keycloak REST API - Keycloak API response 403,"Hi I'm trying to use the Keycloak API but I don't understand very well how it works. I want to obtain all the users of a realm. So I first obtain a token using this endpoint: `/realms/master/protocol/openid-connect/token` with this params in the request body:

- client_id
- grant_type
- username
- password
- client_secret

The first question is: What client should I use?

Then I call this endpoint: `/admin/realms/master/users` with the token in the Authorization header, but I get a 403 status code and I don't understand why.

Thanks",55539390,"Generally: 403 = you don't have permissions to perform requested action (to view users in this particular case). You need to define `Client Roles` (`realm-management`) for used user/client and assign right role (`view-users` role in this case):

Keycloak 17+ UI:
[![enter image description here][1]][1]

Or Keycloak 17+ UI - client with `Service Accounts Enabled` enabled:
[![enter image description here][2]][2]

Keycloak 17- UI:
[![enter image description here][3]][3]


  [1]: https://i.stack.imgur.com/Z0Lrs.png
  [2]: https://i.stack.imgur.com/G5wSG.png
  [3]: https://i.stack.imgur.com/RZGny.png"
53533088,keycloak.json file in springboot application,Is it necessary to have a keycloak.json file even if we have configured everything in application.properties for a spring boot application.,53540363,"Assuming yours spring-boot application , if you are using `keycloak-spring-boot-starter` spring-boot adapter, Then you have all your configurations in application.properties.

You can find examples here https://github.com/keycloak/keycloak-quickstarts/tree/latest/app-springboot"
41756879,Keycloak Client Credentials Flow Clarification,"I am using **Keycloak** server to implement SSO. I am able to get **access token** for a specific client using **client_credentials** flow.

However, my observation is that the access token is granted for **internal service account** of the **client**. I would like to get **access token** for **other users** present in **realm** by providing some **additional parameter** to the token endpoint.

Below is the **current request** I make to **token endpoint** using **Postman Chrome extension**:


    POST http://localhost:8080/auth/realms/<realm>/protocol/<protocol>/token

    x-www-form-urlencoded

    grant_type        client_credentials
    client_id         <client_id>
    client_secret     <client_secret>
    
Please let me know if this possible. Also, I would like to convey that am totally new to **Keycloak** and **openid-connect** protocol.



",41781426,"I think you're misunderstanding some Oauth concepts right here. The *client_credentials* grant should only be used for a service itself to grant access to an specific resource. Imagine this scenario:

End User -> Docs Service -> Docs Repo

The end user has access to some docs stored in the repo through the docs service. In this case, the service makes the decision to grant the user access to a specific document or not, since the repo is a mere content server. Obviously, both of them are secured through two different keycloak clients.

However, the docs service needs to have **full access** to the repo. He can access any document he requests. The solution is to give the docs service a service account role, let's say *DOC_MANAGER* and make the repo check for this role when a resource is requested. The service authenticates with *client_credentials* and gets access to the resource **as a service**. 

But the end user will perform a standard login, using the [Authorization code flow][1], for example, and get access to the doc through the service. The service will check for another role, let's say *DOC_USER* and check whether the user has access to this concrete resource or not, before going to the repo.

You can read more about keycloak service accounts [here][2].


  [1]: http://openid.net/specs/openid-connect-core-1_0.html#Authentication
  [2]: https://www.keycloak.org/docs/latest/server_admin/index.html#_service_accounts"
61917978,How can I fake keycloack call to use in local development?,"My company uses Keycloak for authentication connected with LDAP and returning a user object filled with corporative data.
Yet in this period we are all working from home and in my daily work having to authenticate in my corporative server every time I reload the app, has proven to be an expensive overhead. Especially with intermittent internet connections. 

How can I fake the Keycloak call and make keycloak.protect() work as it has succeeded?

I can install a Keyclock server in my machine, but I'd rather not do that because it would be another server running in it besides, vagrant VM, Postgres server, be server, and all the other things I leave open.
It would be best to make a mock call and return a fixed hard-coded object. 

My project's app-init.ts is this:

    import { KeycloakService } from 'keycloak-angular';
    import { KeycloakUser } from './shared/models/keycloakUser';
    <...>

    export function initializer(
    	keycloak: KeycloakService,
    	<...>
    ): () => Promise<any> {
    	return (): Promise<any> => {
    		return new Promise(async (res, rej) => {
    			<...>    
    			await keycloak.init({
    				config: environment.keycloakConfig,
    				initOptions: {
    					onLoad: 'login-required',
    					// onLoad: 'check-sso',
    					checkLoginIframe: false
    				},
    				bearerExcludedUrls: [],
    				loadUserProfileAtStartUp: false
    			}).then((authenticated: boolean) => {
    				if (!authenticated) return;
    				keycloak.getKeycloakInstance()
                        .loadUserInfo()
                        .success(async (user: KeycloakUser) => {
                           // ...
                           // load authenticated user data
                           // ...
    				    })    
    			}).catch((err: any) => rej(err));
    			res();
    		});
    	};


I just need one fixed logged user. But it has to return some fixed customized data with it. Something like this:

    { username: '111111111-11', name: 'Whatever Something de Paula',
      email: 'whatever@gmail.com', department: 'sales', employee_number: 7777777 }

**EDIT**

I tried to look at the idea of @BojanKogoj but AFAIU from Angular Interceptor page and other examples and tutorials, it has to be injected in a component. Keycloak initialization is called on app initialization, not in a component. Also Keycloak's return is not the direct return of init() method. It passes through other objects in the `.getKeycloakInstance().loadUserInfo().success()` sequence.
Or maybe it's just me that didn't fully understand it. If anyone can come with an example of an interceptor that can intercept the call and return the correct result, that could be a possibility.


**Edit2**

Just to complement that what I need is for the whole keycloak's system to work. Please notice that the `(user: KeycloakUser) => {` function is passed to `success` method of keycloak's internal system. As I said above, routes have a keycloak.protect() that must work. So it's not just a simple case of returning a promise with a user. The whole .getKeycloakInstance().loadUserInfo().success() chain has to be mocked. Or at least that's how I understand it.

**I included an answer with the solution I made based on @yurzui's answer**

Will wait a couple of days to award the bounty to see if someone can came up with an even better solution (which I doubt).",61967794,"You can leverage Angular environment(or even `process.env`) variable to switch between real and mock implementations.

Here is a simple example of how to do that:

**app-init.ts**

    ...
    import { environment } from '../environments/environment';
    
    export function initializer(
      keycloak: KeycloakService
    ): () => Promise<any> {
    
      function authenticate() {
        return keycloak
          .init({
            config: {} as any,
            initOptions: {onLoad: 'login-required', checkLoginIframe: false},
            bearerExcludedUrls: [],
            loadUserProfileAtStartUp: false
          })
          .then(authenticated => {
            return authenticated ? keycloak.getKeycloakInstance().loadUserInfo() : Promise.reject();
          });
      }

      // we use 'any' here so you don't have to define keyCloakUser in each environment    
      const { keyCloakUser } = environment as any; 
    
      return () => {
        return (keyCloakUser ? Promise.resolve(keyCloakUser) : authenticate()).then(user => {
          // ...
          // do whatever you want with user
          // ...
        });
      };
    }

**environment.ts**

    export const environment = {
      production: false,
      keyCloakUser: {
        username: '111111111-11',
        name: 'Whatever Something de Paula',
        email: 'whatever@gmail.com',
      }
    };

**environment.prod.ts**

    export const environment = {
      production: true,
    };

Update
------

If you want to mock `KeycloakService` on client side then you can tell  Angular dependency injection to handle that:

**app.module.ts**

    import { environment } from '../environments/environment';
    import { KeycloakService, KeycloakAngularModule } from 'keycloak-angular';
    import { MockedKeycloakService } from './mocked-keycloak.service';
    
    @NgModule({
      ...
      imports: [
        ...
        KeycloakAngularModule
      ],
      providers: [
        {
          provide: KeycloakService,
          useClass: environment.production ? KeycloakService : MockedKeycloakService
        },
        {
          provide: APP_INITIALIZER,
          useFactory: initializer,
          multi: true,
          deps: [KeycloakService]
        }
      ],
      bootstrap: [AppComponent]
    })
    export class AppModule { }

**mocked-keycloak.service.ts**

    import { Injectable} from '@angular/core';
    import { KeycloakService } from 'keycloak-angular';
    
    @Injectable()
    class MockedKeycloakService extends KeycloakService {
      init() {
        return Promise.resolve(true);
      }
    
      getKeycloakInstance() {
        return {
          loadUserInfo: () => {
            let callback;
            Promise.resolve().then(() => {
              callback({
                userName: 'name'
              });
            });
            return {
              success: (fn) => callback = fn
            };
          }
        } as any;
      }
    }"
49075205,How to export realm file into keycloak docker container?,"I'm trying to export a realm file into keycloak docker container, I'm not able to do that because the server is runing when I execute this command:

    bin/standalone.sh -Dkeycloak.migration.action=export
    -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=<DIR TO EXPORT TO>

I tried to modify the docker-entrypoint.sh and I delete the command which executes the server to launch:

    #!/bin/bash

    if [ $KEYCLOAK_USER ] && [ $KEYCLOAK_PASSWORD ]; then
        keycloak/bin/add-user-keycloak.sh --user $KEYCLOAK_USER --password $KEYCLOAK_PASSWORD
    fi
    
    if [ ""$DB_VENDOR"" == ""POSTGRES"" ]; then
      databaseToInstall=""postgres""
    elif [ ""$DB_VENDOR"" == ""MYSQL"" ]; then
      databaseToInstall=""mysql""
    elif [ ""$DB_VENDOR"" == ""H2"" ]; then
      databaseToInstall=""""
    else
        if (printenv | grep '^POSTGRES_' &>/dev/null); then
          databaseToInstall=""postgres""
        elif (printenv | grep '^MYSQL_' &>/dev/null); then
          databaseToInstall=""mysql""
        fi
    fi
    
    if [ ""$databaseToInstall"" != """" ]; then
        echo ""[KEYCLOAK DOCKER IMAGE] Using the external $databaseToInstall database""
        /bin/sh /opt/jboss/keycloak/bin/change-database.sh $databaseToInstall
    else
        echo ""[KEYCLOAK DOCKER IMAGE] Using the embedded H2 database""
    fi
   
    exit $?
However I got a `caschLoopBack` when I run the pod of keycloak. Is there any solution to make the export inside the docker container and stop the server from running?


",50156220,"You can start a temporary container. I'm using swarm and attachable network, but replacing the --network flag with some --link to the DB container should do it for a vanilla docker container :

    docker run --rm --network=naq\
        --name keycloak_exporter\
        -v /tmp:/tmp/keycloak-export\
        -e POSTGRES_DATABASE=keycloak\
        -e POSTGRES_PASSWORD=password\
        -e POSTGRES_USER=keycloak\
        -e DB_VENDOR=POSTGRES\
        -e POSTGRES_PORT_5432_TCP_ADDR=keycloakdb\
        jboss/keycloak:3.4.3.Final\
        -Dkeycloak.migration.action=export\
        -Dkeycloak.migration.provider=dir\
        -Dkeycloak.migration.dir=/tmp/keycloak-export\
        -Dkeycloak.migration.usersExportStrategy=SAME_FILE\
        -Dkeycloak.migration.realmName=Naq\

You'll then find export files in the /tmp dir on your host.

"
51387730,How to get javax.servlet.Filter called before Keycloak Authentication,"We have developed a REST API using the resteasy. (deployed in wildfly 10)

Basically these REST APIs are called internally from another application and end points are secured with keycloak.

But one endpoint is exposed to outside party (that endpoint is also secured with keycloak). 

But since the outside party can't provide the Keycloak Autherization code, we have done an implementation where client is registerred with application generated auth_key and client will call the endpoint with that auth_key. 

Then in the a web filter (a javax.servlet.Filter), using tha auth_key we get the relevant keycloak authntication Bearer token. If needed (eg : token expired) we call the Keycloak Server also. Once it is received we add that Autherization token to the httpRequest within the web filter and proceed to the end point application.

But the problem is, **KeyCloak authentication is called before Web Filter**. 
What I'm looking for is ""how to get Web Filter called before keycloak authentication?""

**EDIT :** 

Now I'm trying to find a way as mentioned in here. https://stackoverflow.com/questions/52551723/setting-request-header-to-request-before-authentication-happens-in-keycloak. There I could get the call before authentication happens. 
But I'm unable to set the Request Header there.

**web.xml**

    <web-app xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    	xmlns=""http://java.sun.com/xml/ns/javaee""
    	xsi:schemaLocation=""http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd""
    	version=""3.0"">
    	<display-name>Restful Web Application</display-name>
    	<context-param>
    		<param-name>resteasy.scan</param-name>
    		<param-value>true</param-value>
    	</context-param>
    
    	<!-- keycloak -->
    
     	<context-param>
    		<param-name>keycloak.config.resolver</param-name>
    		<param-value>package.to.HeaderBasedKeycloakConfigResolver</param-value>
    	</context-param>
    
    	<security-constraint>
    		<web-resource-collection>
    			<web-resource-name>REST endpoints</web-resource-name>
    			<url-pattern>/ep-name/resource-name</url-pattern>
    		</web-resource-collection>
    		<auth-constraint>
    			<role-name>resource-name</role-name>
    		</auth-constraint>
    	</security-constraint>
    
    	<!-- more security-constraint -->
    	<!-- more security-constraint -->
    	<!-- more security-constraint -->
    
    	<login-config>
    		<auth-method>KEYCLOAK</auth-method>
    		<realm-name>realm-name</realm-name>
    	</login-config>
    
      	<security-role>
     		<role-name>role-name-for-resource-1</role-name>
     		<role-name>role-name-for-resource-2</role-name>
     		<!-- more security-role -->
     		<!-- more security-role -->
     		<!-- more security-role -->
     	</security-role>
    
     	<listener>
    		<listener-class>
    			org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
    	</listener>
    
    	<servlet>
    	    <servlet-name>resteasy-servlet</servlet-name>
    	    <servlet-class>
    	        org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher
    	    </servlet-class>
    	    <init-param>
    	        <param-name>resteasy.servlet.mapping.prefix</param-name>
    	        <param-value>/ep-name</param-value>
    	    </init-param>
    	</servlet>
    
    	<servlet-mapping>
    		<servlet-name>resteasy-servlet</servlet-name>
    		<url-pattern>/ep-name/*</url-pattern>
    	</servlet-mapping>
    
    	<filter>
          <filter-name>WebFilter</filter-name>
          <filter-class>package.to.filter.WebFilter</filter-class>
       </filter>
       
       <filter-mapping>
          <filter-name>WebFilter</filter-name>
          <url-pattern>/desired-ep-name/*</url-pattern>
       </filter-mapping>
    
    </web-app>


[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/LdTlh.png",51445490,"Have you tried to change the order of the elements in the web.xml (eg put filter definitions **BEFORE** servlet definitions) ?

Not sure it will works, but the doc says:
""*The order of the filters in the chain is the same as the order that filter mappings appear in the web application deployment descriptor*""

The principle may be also true for the order between servlets and filters..."
57213611,Keycloak and Spring Boot web app in dockerized environment,"Consider the following environment:

 - one docker container is keycloak
 - another docker container is our web app that uses keycloak for authentication

The web app is a Spring Boot application with ""keycloak-spring-boot-starter"" applied. In application.properties:

> keycloak.auth-server-url = http://localhost:8028/auth

A user accessing our web app will be redirected to keycloak using the URL for the exposed port of the keycloak docker container. Login is done without problems in keycloak and the user (browser) is redirected to our web app again. Now, the authorization code needs to be exchanged for an access token. Hence, our web app (keycloak client) tries to connect to the same host and port configured in *keycloak.auth-server-url*. But this is a problem because the web app resides in a docker container and not on the host machine, so it should rather access *http://keycloak:8080* or something where *keycloak* is the linked keycloak docker container.

So the question is: **How can I configure the keycloak client to apply different URLs for browser redirection and access token endpoints?**",57243339,"There used to be another property `auth-server-url-for-backend-requests` but was [removed by pull request #2506](https://github.com/keycloak/keycloak/pull/2506) as a solution to [issue #2623 on Keycloak's JIRA](https://issues.jboss.org/browse/KEYCLOAK-2623). In the description of this issue, you'll find the reasons why and possible workarounds: *that should be solved at the DNS level or by adding entries to the host file*. 

So there is not much you can do in the client configuration, unless you change the code and make your own version of the adapter, but there is something you can do at the Docker level. For this to work properly, first I suggest you use a fully qualified domain name instead of `localhost` for the *public* hostname, as you would in production anyway, eg. `keycloak.mydomain.com`. You can use a fake one (not registered in DNS servers) if you just add it to the host's `/etc/hosts` file (or Windows equivalent) as an alias next to `localhost`. 

Then, if you are using Docker Compose, you can set [*aliases*](https://docs.docker.com/compose/compose-file/#aliases) (alternative hostnames) for the keycloak service on the docker network to which the containers are connected (see doc: Compose File reference / Service configuration reference / networks / aliases). For example:

```yaml
version: ""3.7""

services:
  keycloak:
    image: jboss/keycloak
    networks:
      # Replace 'mynet' with whatever user-defined network you are using or want to use
      mynet:
        aliases:
          - keycloak.mydomain.com

  webapp:
    image: ""nginx:alpine""
    networks:
      - mynet

networks:
  mynet:

```

If you are just using plain Docker, you can do [the equivalent](https://docs.docker.com/config/containers/container-networking/#ip-address-and-hostname) with `--alias` flag of `docker network connect` command (see doc: Container networking / IP address and hostname)."
39890232,How to decode keys from Keycloak openid-connect cert api,"I'm trying to get the key from Keycloak open-id connect certs endpoint that allow me to validate a JWT token. The api to fetch the keys seam to work :

    GET http://localhost:8080/auth/realms/my-realm/protocol/openid-connect/certs
    
    {
     ""keys"": [
       {
         ""kid"": ""MfFp7IWWRkFW3Yvhb1eVrtyQQNYqk6BG-6HZFpl_JxI"",
         ""kty"": ""RSA"",
         ""alg"": ""RS256"",
         ""use"": ""sig"",
         ""n"": ""qDWXUhNtfuHNh0lm3o-oTnP5S8ENpzsyi-dGrjSeewxV6GNiKTW5INJ4hDQ7ZWkUFfJJhfhQWJofqgN9rUBQgbRxXuUvEkrzXQiT9AT_8r-2XLMwRV3eV_t-WRIJhVWsm9CHS2gzbqbNP8HFoB_ZaEt2FYegQSoAFC1EXMioarQbFs7wFNEs1sn1di2xAjoy0rFrqf_UcYFNPlUhu7FiyhRrnoctAuQepV3B9_YQpFVoiUqa_p5THcDMaUIFXZmGXNftf1zlepbscaeoCqtiWTZLQHNuYKG4haFuJE4t19YhAZkPiqnatOUJv5ummc6i6CD69Mm9xAzYyMQUEvJuFw"",
         ""e"": ""AQAB""
       }
     ]
    }

but where is the key and how to decode it ?
`$.keys[0].n` does not look like base64 and I cannot figure out what it is ?
...if someone can tell me how to get the public key from that payload it will be great !",39891027,"Looking at https://github.com/keycloak/keycloak/blob/master/core/src/main/java/org/keycloak/jose/jwk/JWKParser.java it seams that returned key are pem encoded using :

 - `modulus` 
 - `exponent`

Look at the mentionned java class to get a public key in java or https://github.com/tracker1/node-rsa-pem-from-mod-exp to get the public key in javascript."
44028912,Incorporate Keycloak login into SPA,"We're currently evaluating Keycloak as our SSO solution and while it works for our servlet-based applications there's a question regarding our (React-based) SPAs.

What our designers want: as an example let's say we have an email client spa. The user is in the process of writing an email but then gets distracted. When he returns the SSO session has already timed out and a re-login is required. The user should now be presented with a login form and after login it should be possible to send the email that's still in the SPA's local storage (i.e. re-login without restarting the SPA or losing data).

AFAIK Keycloak doesn't provide an authentication-api (for good reasons) and uses a redirect to the login page and back to the application (as I understand it for mobile apps the system browser would be used). If I'm not mistaken that redirect would then mean the SPA is then reinitialized and thus the data would be lost.

So here's the question: is what our designers want possible to do with Keycloak? 

If yes, how would it be done? Directly posting to the login-url that Keycloak is using seems like a bad idea since the tokens would probably not be stored correctly and there might be same-origin policy problems. Would doing it inside an iframe or popup-window work?
",59862626,"For someone who comes back to this question,

I think it's better to stick to the best practice for oAuth2/OpenId Connect for SPAs which is currently ""Authorization Code Flow"" with PKCE.

https://oauth.net/2/pkce/

https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-13

A normal flow here needs a complete redirect to the auth server and back so your app will completely re-initialize. Or you use check-sso like Sébastien already mentioned with silent mode.

https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/oidc/javascript-adapter.adoc

> You can configure a silent check-sso option. With this feature enabled, your browser won’t do a full redirect to the {project_name} server and back to your application, but this action will be performed in a hidden iframe, so your application resources only need to be loaded and parsed once by the browser when the app is initialized and not again after the redirect back from {project_name} to your app. This is particularly useful in case of SPAs (Single Page Applications).

This way the login will happen in an iframe and the app initializes only once and should preserve state.


"
47508036,How to start keycloak 2.0 on 8080 port?,"Default port of Keycloak used to be on **8080**. Now when I am starting keycloak using 

`./bin/standalone.sh`

 then it is getting start on **9990** port. //  So I guess now keycloak default port is 9990 nowadays.

but funny part is whenever I am giving explicit keycloak port like below:

   

     ./bin/standalone.sh  -Djboss.socket.binding.port-offset=8080

after this keycloak is starting on port **17101** . So weird.

I am struggling to start keycloak on **8080** port. How can I do that?

And one more thing :

surprisingly something called as undertow is running on 8080 port. When I am trying to start keycloak, I can trace that in stacktrace:

    YUT0006: Undertow HTTP listener default listening on 127.0.0.1:8080

",47592497,"If you run basic `bin/standalone.sh` without changing any configuration, your keycloak server will be started on port `8080`.

I believe what confuses you is the log you get when your server starts, more specifically this part:

> 12:25:25,688 INFO  [org.jboss.as] (Controller Boot Thread)
> WFLYSRV0051: Admin console listening on http://127.0.0.1:9990

Port `9990` is not your keycloak server, it is WildFly one.

You are also using offset wrong. Basically, offset is the number you increment your original port (`8080`) for.

If you set offset to 15, your keycloak server will run on port `8095`. 

Also, before starting keycloak, check if there is any other process using port 8080

    lsof -i :8080 

"
33542812,Keycloak IdP SAML 2 Export of XML metdata to an SP,"I'm using Keycloak version 1.6.1, newly installed as a standalone application.

Keycloak should act as an IdP (Identity provider) for an SP (Service Provider) called Tableau.

I have read from this page: http://blog.keycloak.org/2015/03/picketlink-and-keycloak-projects-are.html

> ... Keycloak from being Identity Broker grew into being fully fledged
> Identity Provider

While it was an Identity Broker, it is now also an Identity Provider.

My question is then:

I have exported the SP XML Metadata from Tableau, which I imported into Keycloak, but when it comes to the export of the IdP XML Metadata from Keycloak (which should be imported into Tableau) I cannot find the button/command/guide anything about how to export this XML file.

I have worked with other IdPs and they all support this export of IdP Metadata which you can see an example of here: https://docs.oracle.com/cd/E19636-01/819-7664/g2enua/index.html


If I search for Keycloak and the keyword IDPSSODescriptor I find this:
[grepcode.com/file/repo1.maven.org/maven2/org.keycloak/keycloak-saml-protocol/1.1.0.Beta2/idp-metadata-template.xml][1]

Which is exactly the 'template' I need, with the correct links on all ${idp.sso.HTTP-POST} etc. places.

Should I create the file manually - if so how do I find the correct POST, REDIRECT etc. URLs?

Or is there some way of exporting this file I haven't seen?


  [1]: http://grepcode.com/file/repo1.maven.org/maven2/org.keycloak/keycloak-saml-protocol/1.1.0.Beta2/idp-metadata-template.xml",33543874,"Sometimes it's a good thing to specify in writing what you need - which I did here on Stack Overflow.

I found the URL to where on Keycloak one can export the IdP XML

    https://keycloak-url/realms/{REALM-NAME}/protocol/saml/descriptor

That gave me the IDPSSODescriptor.

I'll leave this thread here, so people can benefit from my mistakes."
52674979,Keycloak SSL setup using docker image,"I am trying to deploy keycloak using docker image (https://hub.docker.com/r/jboss/keycloak/ version 4.5.0-Final) and facing an issue with setting up SSL.

According to the docs 

> Keycloak image allows you to specify both a
> private key and a certificate for serving HTTPS. In that case you need
> to provide two files:
> 
> *tls.crt* - a certificate *tls.key* - a private key Those files need to be
> mounted in /etc/x509/https directory. The image will automatically
> convert them into a Java keystore and reconfigure Wildfly to use it.

I followed the given steps and provided the volume mount setting with a folder with the necessary files (tls.crt and tls.key), But I am facing issues with SSL handshake, getting 

ERR_SSL_VERSION_OR_CIPHER_MISMATCH

 error, blocking keycloak load in browser when trying to access it.

I have used letsencrypt to generate pem files and used openssl to create .crt and .key files. 
Also tried just openssl to create those files to narrow down issue and the behavior is same(some additional info if this should matter)

By default, when I simply specify just the port binding *-p 8443:8443* without specifying the cert volume mount */etc/x509/https* the keycloak server generates a self signed certificate and I don't see issue in viewing the app in browser

I guess this might be more of a certificate creation issue than anything specific to keycloak, But, unsure how to get this to working.
Any help is appreciated
",58801128,"I also faced the issue of getting an `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` error, using the [jboss/keycloak Docker image](https://hub.docker.com/r/jboss/keycloak/) and [free certificates from letsencrypt](https://letsencrypt.org/). Even after considering the advices from the other comments. Now, I have a working (and quite easy) setup, which might also help you.

## 1) Generate letsencrypt certificate
At first, I generated my letsencrypt certificate for domain `sub.example.com` using the certbot. You can find detailed instructions and alternative ways to gain a certificate at https://certbot.eff.org/ and the user guide at https://certbot.eff.org/docs/using.html.

```bash
$ sudo certbot certonly --standalone
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator standalone, Installer None
Please enter in your domain name(s) (comma and/or space separated)  (Enter 'c' to cancel): sub.example.com
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for sub.example.com
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/sub.example.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/sub.example.com/privkey.pem
   Your cert will expire on 2020-01-27. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   ""certbot renew""
```

## 2) Prepare docker-compose environment
I use `docker-compose` to run keycloak via docker. The config and data files are stored in path `/srv/docker/keycloak/`. 

- Folder `config` contains the `docker-compose.yml`
- Folder `data/certs` contains the certificates I generated via letsencrypt
- Folder `data/keycloack_db` is mapped to the database container to make its data persistent.


### Put the certificate files to the right path
When I first had issues using the original letscrypt certificates for keycloak, I tried the workaround of converting the certificates to another format, as mentioned in the comments of the former answers, which also failed. Eventually, I realized that my problem was caused by permissions set to the mapped certificate files.

**So, what worked for me is to just to copy and rename the files provided by letsencrypt**, and mount them to the container.
```bash
$ cp /etc/letsencrypt/live/sub.example.com/fullchain.pem /srv/docker/keycloak/data/certs/tls.crt
$ cp /etc/letsencrypt/live/sub.example.com/privkey.pem /srv/docker/keycloak/data/certs/tls.key
$ chmod 755 /srv/docker/keycloak/data/certs/
$ chmod 604 /srv/docker/keycloak/data/certs/*
```

### docker-compose.yml
In my case, I needed to use the host network of my docker host. This is not best practice and should not be required for your case. Please find information about configuration parameters in the documentation at [hub.docker.com/r/jboss/keycloak/](https://hub.docker.com/r/jboss/keycloak/).

```yml
version: '3.7'

networks:
  default:
    external:
      name: host

services:
  keycloak:
    container_name: keycloak_app
    image: jboss/keycloak
    depends_on:
      - mariadb
    restart: always
    ports:
      - ""8080:8080""
      - ""8443:8443""
    volumes:
      - ""/srv/docker/keycloak/data/certs/:/etc/x509/https""   # map certificates to container
    environment:
      KEYCLOAK_USER: <user>
      KEYCLOAK_PASSWORD: <pw>
      KEYCLOAK_HTTP_PORT: 8080
      KEYCLOAK_HTTPS_PORT: 8443
      KEYCLOAK_HOSTNAME: sub.example.ocm
      DB_VENDOR: mariadb
      DB_ADDR: localhost
      DB_USER: keycloak
      DB_PASSWORD: <pw>
    network_mode: host

  mariadb:
    container_name: keycloak_db
    image: mariadb
    volumes:
      - ""/srv/docker/keycloak/data/keycloak_db:/var/lib/mysql""
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: <pw>
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: <pw>
    network_mode: host
```



### Final directory setup
This is how my final file and folder setup looks like.

```bash
$ cd /srv/docker/keycloak/
$ tree
.
├── config
│   └── docker-compose.yml
└── data
    ├── certs
    │   ├── tls.crt
    │   └── tls.key
    └── keycloak_db
```

## Start container
Finally, I was able to start my software using `docker-compose`.

```bash
$ cd /srv/docker/keycloak/config/
$ sudo docker-compose up -d
```

We can see the mounted certificates within the container.
```bash
$ cd /srv/docker/keycloak/config/
$ sudo docker-compose up -d
```

We can doublecheck the mounted certificates within the container.

    ## open internal shell of keycloack container
    $ sudo docker exec -it keycloak_app /bin/bash
    
    ## open directory of certificates
    $ cd /etc/x509/https/
    $ ll
    -rw----r-- 1 root root 3586 Oct 30 14:21 tls.crt
    -rw----r-- 1 root root 1708 Oct 30 14:20 tls.key


Considerung the setup from the docker-compose.yml, keycloak is now available at https://sub.example.com:8443"
50168751,Use sAMAcountName from ldap as username,"I connected our active directory to keycloak (4.0.0.Beta1) and imported the users - this works fine.

But the username should be filled from `sAMAccountName`. So i changed the `Username LDAP attribute` to that.

But after clicking `Synchronize all users` i am getting this error in the console window:

    8:20:13,372 ERROR [org.keycloak.storage.ldap.LDAPStorageProviderFactory] (default task-119) Failed during import user from LDAP: org.keycloak.models.ModelException: User returned from LDAP has null username! Check configuration of your LDA
     mappings. Mapped username LDAP attribute: cn, user DN: CN=Mustermann Max,OU=Normung,OU=Mech,OU=Konstruktion,OU=Abteilungen,DC=company,DC=org, attributes from LDAP: {whenChanged=[2017037125253.0Z], whenCreated=[20140520092805.0
    ], mail=[Max.Mustermann@company.org], givenName=[Max], sn=[Mustermann], userAccountControl=[66048], pwdLastSet=[130750516258418527]}
           at org.keycloak.storage.ldap.LDAPUtils.getUsername(LDAPUtils.java:113)
           at org.keycloak.storage.ldap.LDAPStorageProviderFactory$3.run(LDAPStorageProviderFactory.java:521)
           at org.keycloak.models.utils.KeycloakModelUtils.runJobInTransaction(KeycloakModelUtils.java:227)
           at org.keycloak.storage.ldap.LDAPStorageProviderFactory.importLdapUsers(LDAPStorageProviderFactory.java:514)
           at org.keycloak.storage.ldap.LDAPStorageProviderFactory.syncImpl(LDAPStorageProviderFactory.java:469)
           at org.keycloak.storage.ldap.LDAPStorageProviderFactory.sync(LDAPStorageProviderFactory.java:407)
    ...

I tried some mappers (especially `username`) but with no luck. It seems that there are only a few attributes read from the ldap server (see `attributes from LDAP:...` in the output). 

Namely: whenChanged, whenCreated, mail, givenName, sn, userAccountControl, pwdLastSet.

How can i get the sAMAcountName attribute as username?",51651254,"I have just tested it in 4.1.0.Final and there it works when you change the *Username LDAP attribute* to *sAMAccountName* **and additionally** the 
*LDAP Attribute* in the *username* mapper also to *sAMAccountName*.

> I tried some mappers (especially username) but with no luck.

Your question suggest, that you already tried doing something in the username mappers. So you were definetly on the right track. Either there was a bug in your version, or the two fields didn't match correctly.
"
60766292,how to get keycloak to export realm users and then exit,"We run Keycloak docker image in AWS ECS and we need a way to export a realm and all users for automation purposes using ansible. We can run the following command with ansible to run the export 
 
    docker exec -i 702f2fd7858d \
      /bin/bash -c ""export JDBC_PARAMS=?currentSchema=keycloak_service && 
      /opt/jboss/keycloak/bin/standalone.sh \
      -Djboss.socket.binding.port-offset=100 \
      -Dkeycloak.migration.action=export \
      -Dkeycloak.migration.provider=singleFile \
      -Dkeycloak.migration.realmName=API \
      -Dkeycloak.migration.usersExportStrategy=REALM_FILE \
      -Dkeycloak.migration.file=/tmp/my_realm.json""

but the docker container continues to run after the export. We cannot grep the logs looking for the export process finishing as we use an AWS Log Driver for Docker that prevents access to any logs. It's a pity that the Keycloak REST API does not support the inclusion of users in the existing partial-export endpoint or at least to have an endpoint that triggers the export of a realm including users into a mounted filed system.",60972882,"I was facing the same problem a few days ago and implemented a working solution:


```bash
#!/usr/bin/env bash
#
# backup-keycloak.sh

# Copy the export bash script to the (already running) keycloak container
# to perform an export
docker cp docker-exec-cmd.sh keycloak:/tmp/docker-exec-cmd.sh
# Execute the script inside of the container
docker exec -it keycloak /tmp/docker-exec-cmd.sh
# Grab the finished export from the container
docker cp keycloak:/tmp/realms-export-single-file.json .
```

The Bash script to perform the export inside of the container is the following:

```bash
#!/usr/bin/env bash
#
# docker-exec-cmd.sh

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# If something goes wrong, this script does not run forever, but times out
TIMEOUT_SECONDS=300
# Logfile for the keycloak export instance
LOGFILE=/tmp/standalone.sh.log
# destionation export file
JSON_EXPORT_FILE=/tmp/realms-export-single-file.json

# Remove files from old backups inside the container
# You could also move the files or change the name with timestamp prefix
rm -f ${LOGFILE} ${JSON_EXPORT_FILE}

# Start a new keycloak instance with exporting options enabled.
# Use the port offset argument to prevent port conflicts
# with the ""real"" keycloak instance.
timeout ${TIMEOUT_SECONDS}s \
    /opt/jboss/keycloak/bin/standalone.sh \
        -Dkeycloak.migration.action=export \
        -Dkeycloak.migration.provider=singleFile \
        -Dkeycloak.migration.file=${JSON_EXPORT_FILE} \
        -Djboss.socket.binding.port-offset=99 \
    > ${LOGFILE} &

# Grab the keycloak export instance process id
PID=""${!}""

# Wait for the export to finish
# It will wait till it sees the string, which indicates
# a successful finished backup.
# If it will take too long (>TIMEOUT_SECONDS), it will be stopped.
timeout ${TIMEOUT_SECONDS}s \
    grep -m 1 ""Export finished successfully"" <(tail -f ${LOGFILE})

# Stop the keycloak export instance
kill ${PID}
```"
47678321,Using OpenID/Keycloak with Superset,"I want to use keycloak to authenticate my users in our Superset environment.

Superset is using flask-openid, as implemented in flask-security:

 - http://flask-appbuilder.readthedocs.io/en/latest/_modules/flask_appbuilder/security/manager.html
 - https://pythonhosted.org/Flask-OpenID/

To enable a different user authentication than the regular one (database), you need to override the AUTH_TYPE parameter in your superset_config.py file. You will also need to provide a reference to your openid-connect realm and enable user registration. As I understand, it should look something like this:

    from flask_appbuilder.security.manager import AUTH_OID
    AUTH_TYPE = AUTH_OID
    OPENID_PROVIDERS = [
        { 'name':'keycloak', 'url':'http://localhost:8080/auth/realms/superset' }
    ]
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = 'Gamma'

With this configuration, the login page changes to a prompt where the user can select the desired OpenID provider (in our case keycloak). We also have two buttons, one to sign in (for existing users) and one to register as a new user. 

I would expect that either of these buttons would take me to my keycloak login page. However, this does not happen. Instead, I am redirected right back to the 
login page. 

In the case where I press the registration button, I get a message that says 'Not possible to register you at the moment, try again later'. When I press the sign in button, no message is displayed. The Superset logs show the request that loads the login page, but no requests to keycloak. I have tried the same using the Google OpenID provider, which works just fine. 

Since I am seeing no requests to keycloak, this makes me think that I am either missing a configuration setting somewhere, or that I am using the wrong settings. Could you please help me figure out which settings I should be using?
 ",47787279,"### Update 03-02-2020 ###
@s.j.meyer has written [an updated guide which works with Superset 0.28.1 and up][3]. I haven't tried it myself, but thanks @nawazxy for confirming this solution works.

-------------------------------------------------------------------------------

I managed to solve my own question. The main problem was caused by a wrong assumption I made regarding the flask-openid plugin that superset is using. This plugin actually supports [OpenID 2.x][1], but not OpenID-Connect (which is the version implemented by Keycloak). 

As a workaround, I decided to switch to the [flask-oidc][2] plugin. Switching to a new authentication provider actually requires some digging work. To integrate the plugin, I had to follow these steps:

### Configue flask-oidc for keycloak ###
Unfortunately, flask-oidc does not support the configuration format generated by Keycloak. Instead, your configuration should look something like this:

    {
        ""web"": {
            ""realm_public_key"": ""<YOUR_REALM_PUBLIC_KEY>"",
            ""issuer"": ""http://<YOUR_DOMAIN>/auth/realms/<YOUR_REALM_ID>"",
            ""auth_uri"": ""http://<YOUR_DOMAIN>/auth/realms/<YOUR_REALM_ID>/protocol/openid-connect/auth"",
            ""client_id"": ""<YOUR_CLIENT_ID>"",
            ""client_secret"": ""<YOUR_SECRET_KEY>"",
            ""redirect_urls"": [
                ""http://<YOUR_DOMAIN>/*""
            ],
            ""userinfo_uri"": ""http://<YOUR_DOMAIN>/auth/realms/<YOUR_REALM_ID>/protocol/openid-connect/userinfo"",
            ""token_uri"": ""http://<YOUR_DOMAIN>/auth/realms/<YOUR_REALM_ID>/protocol/openid-connect/token"",
            ""token_introspection_uri"": ""http://<YOUR_DOMAIN>/auth/realms/<YOUR_REALM_ID>/protocol/openid-connect/token/introspect""
        }
    }

Flask-oidc expects the configuration to be in a file. I have stored mine in `client_secret.json`. You can configure the path to the configuration file in your `superset_config.py`.

### Extend the Security Manager ###
Firstly, you will want to make sure that flask stops using flask-openid ad starts using flask-oidc instead. To do so, you will need to create your own security manager that configures flask-oidc as its authentication provider. I have implemented my security manager like this:

    from flask_appbuilder.security.manager import AUTH_OID
    from flask_appbuilder.security.sqla.manager import SecurityManager
    from flask_oidc import OpenIDConnect
        
    class OIDCSecurityManager(SecurityManager):
    
    def __init__(self,appbuilder):
        super(OIDCSecurityManager, self).__init__(appbuilder)
        if self.auth_type == AUTH_OID:
            self.oid = OpenIDConnect(self.appbuilder.get_app)
        self.authoidview = AuthOIDCView

To enable OpenID in Superset, you would previously have had to set the authentication type to AUTH_OID. My security manager still executes all the behaviour of the super class, but overrides the oid attribute with the OpenIDConnect object. Further, it replaces the default OpenID authentication view with a custom one. I have implemented mine like this:

    from flask_appbuilder.security.views import AuthOIDView
    from flask_login import login_user
    from urllib import quote

    class AuthOIDCView(AuthOIDView):

    @expose('/login/', methods=['GET', 'POST'])
    def login(self, flag=True):
        
        sm = self.appbuilder.sm
        oidc = sm.oid

        @self.appbuilder.sm.oid.require_login
        def handle_login(): 
            user = sm.auth_user_oid(oidc.user_getfield('email'))
            
            if user is None:
                info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])
                user = sm.add_user(info.get('preferred_username'), info.get('given_name'), info.get('family_name'), info.get('email'), sm.find_role('Gamma')) 
            
            login_user(user, remember=False)
            return redirect(self.appbuilder.get_url_for_index)  
       
    return handle_login()  

    @expose('/logout/', methods=['GET', 'POST'])
    def logout(self):
        
        oidc = self.appbuilder.sm.oid
        
        oidc.logout()
        super(AuthOIDCView, self).logout()        
        redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login
        
        return redirect(oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url))

My view overrides the behaviours at the /login and /logout endpoints. On login, the handle_login method is run. It requires the user to be authenticated by the OIDC provider. In our case, this means the user will first be redirected to Keycloak to log in. 

On authentication, the user is redirected back to Superset. Next, we look up whether we recognize the user. If not, we create the user based on their OIDC user info. Finally, we log the user into Superset and redirect them to the landing page.

On logout, we will need to invalidate these cookies:

 1. The superset session
 2. The OIDC token
 3. The cookies set by Keycloak

By default, Superset will only take care of the first. The extended logout method takes care of all three points.

### Configure Superset ###

Finally, we need to add some parameters to our `superset_config.py`. This is how I've configured mine:

    '''
    AUTHENTICATION
    '''
    AUTH_TYPE = AUTH_OID
    OIDC_CLIENT_SECRETS = 'client_secret.json'
    OIDC_ID_TOKEN_COOKIE_SECURE = False
    OIDC_REQUIRE_VERIFIED_EMAIL = False
    CUSTOM_SECURITY_MANAGER = OIDCSecurityManager
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = 'Gamma'





  [1]: https://pythonhosted.org/Flask-OpenID/
  [2]: http://flask-oidc.readthedocs.io
  [3]: https://stackoverflow.com/questions/54010314/using-keycloakopenid-connect-with-apache-superset
"
56327794,Role based authorization using Keycloak and .NET core,"Having a few minor issues with role based authorization with dotnet core 2.2.3 and Keycloak 4.5.0.

In Keycloak, I've defined a role of 'tester' and a client role 'developer' with appropriate role mappings for an 'admin' user. After authenticating to Keycloak; if I look at the JWT in jwt.io, I can see the following:

```json
{
  ""realm_access"": {
    ""roles"": [
      ""tester""
    ]
  },
  ""resource_access"": {
    ""template"": {
      ""roles"": [
        ""developer""
      ]
    },
    ...
  },
  ...
}
```

In .NET core, I've tried a bunch of things such as adding `[Authorize(Roles = ""tester"")]` or `[Authorize(Roles = ""developer"")]` to my controller method as well as using a policy based authorization where I check `context.User.IsInRole(""tester"")` inside my `AuthorizationHandler<TRequirement>` implementation.

If I set some breakpoints in the auth handler. When it gets hit, I can see the 'tester' and 'developer' roles listed as items under the `context.user.Claims` IEnumerable as follows.

    {realm_access: {""roles"":[""tester""]}}
    {resource_access: {""template"":{""roles"":[""developer""]}}}

So I _should_ be able to successfully do the authorization in the auth handler by verifying the values for `realm_access` and `resource_access` in the `context.user.Claims` collection, but this would require me to deserialize the claim values, which just seem to be JSON strings.

I'm thinking there has to be better way, or I'm not doing something quite right.",58043503,"""AspNetCore.Authorization"" expects roles in a claim (field) named **""roles""**. And this claim must be an **array of string** (multivalued). You need to make some configuration on Keycloak side.

**The 1st alternative:**

You can change the existing role path.

Go to your Keycloak Admin Console > Client Scopes > roles > Mappers > client roles

* Change ""Token Claim Name"" as ""roles""
* Multivalued: True
* Add to access token: True

**The 2nd alternative:**

If you don't want to touch the existing path, you can create a new Mapper to show the same roles at the root as well.

Go to your Keycloak Admin Console > Client Scopes > roles > Mappers > create

* Name: ""root client roles"" (or whatever you want)
* Mapper Type: ""User Client Role""
* Multivalued: True
* Token Claim Name: ""roles""
* Add to access token: True


"
52414165,Keycloak error invalid_client Bearer only not allowed,"I'm trying to deploy a very simple REST service secured with keycloak and am getting the following error: 

> Caused by:
> org.keycloak.authorization.client.util.HttpResponse.Exception:
> Unexpected response from server: 400 / Bad Request / Response from
> server: (""error"":""invalid_client"",""error_description"":""Bearer-only not
> allowed"")

What does this error mean? How can I fix it? ",52419577,"Since you have not shared your keycloak config, I am guessing the above error is because you created a bearer only client in keycloak.
Keycloak doesn't allow ""bearer only"" clients to obtain tokens from the server. Try to change your client to ""confidential"" on the server and set bearer-only on your adapter configuration (keycloak.json). 

You can refer this thread for more info: http://keycloak-user.88327.x6.nabble.com/keycloak-user-can-we-use-authorization-with-bearer-only-td2123.html"
37199200,Keycloak Add user's name in email theme template,"I am creating an email theme for keycloak.
So, when a user forgets their password and requests for a link to reset it; an email is sent to the user.

Now, I am cutomizing the email that he/she gets. I want to add the user's name.
Can I do that?

I do have access to variables including:
link to reset password
link expiration time
realm name

How do I get the user's name so that the email template says

Hello John,

blah blah blah",37208224,"You can add *`user.username`* in  your  `.ftl`  file 

open `(email/text) *.ftl` file and add *user.username* as one of the parameter  like

    ${msg(""passwordResetBody"",link, linkExpiration, realmName,user.username)}

and then update actual message body at (email/messages/messages_en.properties) with parameter number  like {2} or {3}  (in this case it is {3} )
"
56180225,Keycloak server in docker fails to start in standalone mode?,"<!-- language-all: lang-bash -->

Well, as the title suggests, this is more of an issue record. I was trying to follow the instructions on this [README](https://github.com/jboss-dockerfiles/keycloak/blob/master/server/README.md) file of Keycloak docker server images, but encountered a few blockers. 

After pulling the image, below command to start a standalone instance failed. 

```
docker run jboss/keycloak
```

The error stack trace: 

```
-b 0.0.0.0
=========================================================================

  Using PostgreSQL database

=========================================================================

...

04:45:06,084 INFO  [io.smallrye.metrics] (MSC service thread 1-5) Converted [2] config entries and added [4] replacements
04:45:06,096 ERROR [org.jboss.as.controller.management-operation] (ServerService Thread Pool -- 33) WFLYCTL0013: Operation (""add"") failed - address: ([
    (""subsystem"" => ""datasources""),
    (""data-source"" => ""KeycloakDS"")
]) - failure description: ""WFLYCTL0113: '' is an invalid value for parameter user-name. Values must have a minimum length of 1 characters""
...
Caused by: java.lang.RuntimeException: Failed to connect to database
	at org.keycloak.connections.jpa.DefaultJpaConnectionProviderFactory.getConnection(DefaultJpaConnectionProviderFactory.java:382)
...
Caused by: javax.naming.NameNotFoundException: datasources/KeycloakDS -- service jboss.naming.context.java.jboss.datasources.KeycloakDS
	at org.jboss.as.naming.ServiceBasedNamingStore.lookup(ServiceBasedNamingStore.java:106)
...
```
I was wondering how it uses a PostgreSQL database, and assumed it might spin up its own instance. But the error looks like it has a problem connecting to the database. 

Changing to the embedded H2 DB made it work. 

`docker run -e DB_VENDOR=""h2"" --name docker-keycloak-h2 jboss/keycloak`

The [docker-entrypoint.sh](https://github.com/jboss-dockerfiles/keycloak/blob/7d3c78065fc8ae437b246fa9ce8c65a76d69ce76/server/tools/docker-entrypoint.sh#L96) file shows that it uses below logic to determine what DB to use. 

```
if (getent hosts postgres &>/dev/null); then
        export DB_VENDOR=""postgres""
...
```
And further down the flow, this [change-database.cli](https://github.com/jboss-dockerfiles/keycloak/blob/7d3c78065fc8ae437b246fa9ce8c65a76d69ce76/server/tools/cli/databases/postgres/change-database.cli#L2) file indicates that it's actually expecting a running PostgreSQL instance to use. 

```
connection-url=jdbc:postgresql://${env.DB_ADDR:postgres}:${env.DB_PORT:5432}/${env.DB_DATABASE:keycloak}${env.JDBC_PARAMS:}
``` 
So I began wondering how PostgreSQL was chosen as a default initially. Executing below commands in a running Keycloak docker container revealed some interesting things. 
```
[root@71961b81189c bin]# getent hosts postgres
69.172.201.153  postgres.mbox.com
[root@71961b81189c bin]# echo $?
0
``` 
Not sure what this `postgres.mbox.com` is but apparently it's not an expected PostgreSQL server to be resolved by `getent`. Not sure whether this is a recent linux issue either. The `hosts` entry in the Name Service Switch Configuration file `/etc/nsswitch.conf` looks like below inside the container.
```
hosts:      files dns myhostname
``` 
It is the `dns` data source that resolved `postgres` to `postgres.mbox.com`. 

----------

This is why the DB vendor determination logic failed which eventually caused the container failing to start. The instructions on this README file do not work as of the day this post is published. 

Below are the working commands to start a Keycloak server in docker properly with PostgreSQL as the database. 


    docker network create keycloak-network

    docker run -d --name postgres --net keycloak-network -e POSTGRES_DB=keycloak -e POSTGRES_USER=keycloak -e POSTGRES_PASSWORD=password postgres

    docker run --name docker-keycloak-postgres --net keycloak-network -e DB_USER=keycloak -e DB_PASSWORD=password jboss/keycloak

",56441066,The problem no longer occurs now. I am voting to close the question.
51521958,KeyCloak - Create Realms/Users/Groups Programmatically?,"We've decided to move to [KeyCloak][1] for our identity and access management solution, rather than implement it entirely within our Java EE web app.  We're creating a multi-tenant solution, and would prefer to create security realms/users/groups programmatically through our workflow, rather than leveraging KeyCloak's self-registration functionality or web UI so that we can do things like grab credit card details for payment, etc.  I know that we could likely leverage the [admin REST APIs][2] to accomplish this, but I wasn't sure if there was a simpler way to do it besides hand-coding REST calls.  Does KeyCloak provide an admin client library that we could use?  Or are we stuck implementing a REST client for the admin APIs ourselves?


  [1]: https://www.keycloak.org
  [2]: https://www.keycloak.org/docs-api/4.0/rest-api/index.html",51709957,"I found some info around the [KeyCloak Java Admin Client][1].  [This gist][2] has lots of useful examples showing how to managed users, realms, etc.


  [1]: https://www.n-k.de/2016/08/keycloak-admin-client.html
  [2]: https://gist.github.com/sdnakhla/c3e5597ca005bd7a2ac23ec51309a0ce"
44583833,keycloak - realm resolution based on username (email address),"I'm working on a multi tenant project where usernames are actually their email addresses and the domain of the email serves as a tenant identifier.

Now in keycloak I'll have different realms per tenant, but I want to have a single login page for all tenants and the actual realm that will do the authentication to be somehow resolved by the username (email address).

How do I go about doing that?

I found a thread on the mailing list (that I cant find now...) that discussed the same problem. It was something along the lines of - create a main realm that will ""proxy"" to the others, but I'm not quite sure how to do that.",62137424,"[The idea][1] from the mailing list is to write a service (let's say `auth-redirector.example.com`) that has a single input field for email, finds realm based on domain and redirects to that realm's keycloak endpoint (e.g. `auth.example.com/auth/realms/realm-name/etc…`) while keeping all GET params.

You can find examples of direct login/registration URLs here: https://lists.jboss.org/pipermail/keycloak-user/2016-July/007045.html

One usability problem is that users would have to provide their email twice, I have not yet found a way to pass the username via the login URL.

  [1]: https://lists.jboss.org/pipermail/keycloak-user/2017-November/012406.html"
43376233,Keycloak add extra claims from database / external source,"I have not been able to divine the way I might add extra claims from my application database. Given my limited understanding, I see two ways:

 1. After successful authentication have keycloak pull extra claims from the application database somehow. This app database is postgres, for example. 
 2. Have the application update the jwt with extra claims using a shared key. 

I would like some feedback both paths. I feel that the fist option may be safer. However I am not sure where to begin that implementation journey. 
",43536858,"Answering my own question here. I cross-posted this question to the Keycloak users mailing list here (http://lists.jboss.org/pipermail/keycloak-user/2017-April/010315.html) and got an answer that seems reasonable. 

This is pasted from the answer I received there.

I use the first option. I do it with a protocol mapper, which is a convenient place to do it because there the token is already built by keycloak but hasn't been signed yet. This is the procedure :

1. User logs in 

2. My custom protocol mapper gets called, where I overwrite the `transformAccessToken` method 

3. Here I log in the client where the protocol mapper is in into keycloak, as a service. Here don't forget to use another client ID instead the one you're building the protocol mapper for, you'll enter an endless recursion otherwise. 

4. I get the access token into the protocol mapper and I call the rest endpoint of my application to grab the extra claims, which is secured 

5. Get the info returned by the endpoint and add it as extra claims 

"
56492501,Keycloak: Do not create local user while identity brokering,"I am using keycloak as an identity broker to SAML identity provider in order to login to web application.

To get it work I have created new authentication flow which looks like: ""Create User If Unique"", ""Automatically Link Brokered Account"".

Keycloak redirects correctly to the identity provider with the login page. After login identity provider redirects as expected to keycloak and then to my web application but keycloak also creates local user.

Is it possible to use external IDP without local users creation?

The problem with local users : I have ""custom user federation"" implementation which fetch users from my application and if local user created it's not possible login to keycloak using ""custom user federation"". Keycloak will just try login like with local user.",56649672,"Unfortunately, it is currently not possible to skip the creation of local user account. According to the Keycloak team, they are deferring the support ""as we are planning on some larger work to the storage layer which will make it possible to deliver on this capabiltiy"".
See Feature Request https://issues.jboss.org/browse/KEYCLOAK-4429."
41695223,Keycloak - OpenId Connect Access types,"I'd like to authenticate a legacy java (6) application against a node-js one currently secured using keycloak OIDC bearer only (both apps belonging to same realm).

I've been told to use keycloak-authz-client library resolving a keycloak OIDC JSON as below
`
{
  ""realm"": ""xxx"",
  ""realm-public-key"": ""fnzejhbfbhafbazhfzafazbfgeuizrgyez..."",
  ""bearer-only"": true,
  ""auth-server-url"": ""http://xxx:80/auth"",
  ""ssl-required"": ""external"",
  ""resource"": ""resourceName""
}`

However, the keycloak java client required java 8 and my current runtime is a jre6. Recompiling the lib including transitive dependencies does not looks like a good idea and I end up so using keycloak oauth2 REST endpoint.

As far as I know oauth2 I would go with a client_credentials flows exchanging a client secret against an access_token once at application initialization and refreshing / renewing when expired.

Coming to keycloak documentation :



> Access Type
> 
> This defines the type of the OIDC client.
> 
> confidential
> 
> Confidential access type is for server-side clients that need to perform a browser login and require a client secret when they turn an
> access code into an access token, (see Access Token Request in the
> OAuth 2.0 spec for more details). This type should be used for
> server-side applications. public
> 
> Public access type is for client-side clients that need to perform a browser login. With a client-side application there is no way to
> keep a secret safe. Instead it is very important to restrict access by
> configuring correct redirect URIs for the client. bearer-only
> 
> Bearer-only access type means that the application only allows bearer token requests. If this is turned on, this application cannot
> participate in browser logins.

It seems that `confidential` access type is the one suitable for my needs (*should be used for server-side applications*) however I don't get how it is related to browser login (which is my mind is related to authenticating using third parties identity providers as facebook and co). 

The `confidential` client settings also require a valid redirect uri the browser will redirect to after successful login or lagout. As the client I want to authenticate is an application I don't see the point.


Generally speaking I don't get the whole access type things. Is it related only to the client or to the resource owner also (Is my node.js application stuck to bearer-only as existing clients use this access type ? will it accept the bearer authentication using the access_token obtained with client_credentials flow ? I suppose it will).

Can someone clarify keycloak OIDC access type and where I went wrong if I did ?

What is the proper way to delegate access for my legacy application to some  resources (not limited to a specific user ones) of another application using keycloak ?",73998885,"You are mixing up the OAuth 2.0 concepts of `Client Types` and `Grants`. Those are different, albeit interconnected, concepts. The former refers to the application architecture, whereas the latter to the appropriate grant to handle a particular Authorization/Authentication use-case. 

One chooses and combines those options; first one choses the client type (*e.g.,* `public`, `confidential`), and then the grant (*e.g.,* `Authorization code flow`). Both client types share some of the same grants, with the caviar that the `confidential` client will require also a client secret to be provided during the execution of the Authentication/Authorization grant.

From the [Oauth 2.0 specification][1]:

       OAuth defines two client types, based on their ability to
       authenticate securely with the authorization server (i.e., ability to
       maintain the confidentiality of their client credentials):
    
       confidential
          Clients capable of maintaining the confidentiality of their
          credentials (e.g., client implemented on a secure server with
          restricted access to the client credentials), or capable of secure
          client authentication using other means.
    
       public
          Clients incapable of maintaining the confidentiality of their
          credentials (e.g., clients executing on the device used by the
          resource owner, such as an installed native application or a web
          browser-based application), and incapable of secure client
          authentication via any other means.


As one can read the `client type` refers to the type of the application architecture. Why do you need those types? The answer is to add an extra layer of security.

Let us look at the example of the `Authorization Code Grant`. Typically the flow is as follows:

 - The user goes to an application;
 - The user gets redirect to the Keycloak login page;
 - The user authenticates itself;
 - Keycloak check the username and password, and if correct, sends back to the application an authorization code;
 - The application receives that code and calls Keycloak in order to exchange the code for tokens.

One of the ""security issue"" with that flow is that the exchange of code for token happens on the frontend channel which due to the nature of browsers it is susceptible to a hacker intercepting that code and exchange it for the tokens before the real application does it. There are ways of mitigating this but it is out of the scope of this question. 

Now, If your application is a single-page application, then it cannot safely store a secret, therefore we have to use a `public` client type. However, if the application has a backend where the client secret can be safely stored, then we could use a confidential client. 

So for the same flow (*i.e.,* `Authorization Code Grant`), one can make it more secure by using a confidential client. This is because the application will now have to send to Keycloak a client secret as well, and this happens on the backend channel, which it is more secure than the frontend channel.

> What is the proper way to delegate access for my legacy application to
> some resources (not limited to a specific user ones) of another
> application using keycloak ?

The proper grant is to use the so called [Client Credential Grant][2]:

> 4.4.  Client Credentials Grant
> 
>    The client can request an access token using only its client   
> credentials (or other supported means of authentication) when the   
> client is requesting access to the protected resources under its   
> control, or those of another resource owner that have been previously 
> arranged with the authorization server (the method of which is beyond 
> the scope of this specification).

Since this grant uses the client credentials (*e.g.,* client secret) you can only use it if you have selected confidential as the client type. 

  [1]: https://www.rfc-editor.org/rfc/rfc6749#section-2.1
  [2]: https://oauth.net/2/grant-types/client-credentials/"
70577004,Keycloak: Could not find resource for full path,"I am trying to get the REST API of keycloak to work.

Thanks to [this post][1] I was able to get the token. But when trying the example for the list of users in the first answer, I get the error: 

    ""error"": ""RESTEASY003210: Could not find resource for full path: http://PATHTOCEAKLOAK:81/auth/user/realms/master/users""

Here my request with Postman:

[![enter image description here][2]][2]

As I am using a Bitnami-container the admin is called user that's why I am using */auth/user/* instead of */auth/admin*/


  [1]: https://stackoverflow.com/questions/53283281/how-to-activate-the-rest-api-of-keycloak#
  [2]: https://i.stack.imgur.com/TWXP9.png",71634718,"For those who are still facing this error and using 17.0+ version of Keycloak, there's a change in endpoints as per the [official documentation][1]. I resolved this issue by just using ```{realm}/user``` and omitting ```/auth``` in between.


  [1]: https://www.keycloak.org/docs-api/11.0/rest-api/index.html#_users_resource"
66452108,Keycloak Get Users returns 403 forbidden,"I create token using `http://localhost:8080/auth/realms/{realm_name}/protocol/openid-connect/token endpoint`. 

grant_type=client_credentials    
client-id: ------------            
client-secret: 78296d38-cc82-4010-a817-65c283484e51

 Now I want to get users of realm. Then I send request to `http://localhost:8080/auth/admin/realms/{realm_name}/users?username=demo` endpoint with token.
 But I got `403 forbidden` response with `""error"": ""unknown_error""`. How to solve it?",66454728,"The service account associated with your client needs to be allowed to view the realm users.

1. Go to http://localhost:8080/auth/admin/{realm_name}/console/#/realms/{realm_name}/clients

2. Select your client (which must be a confidential client)
3. In the settings tab, switch **Service Account Enabled** to **ON**
4. Click on save, the Service Account Roles tab will appear
5. In Client Roles, select **realm_management**
6. Scroll through available roles until you can select **view_users**
7. Click on **Add selected**

You should have something like this : 

[![enter image description here][1]][1]

You client is now allowed to access users through the REST API.


  [1]: https://i.stack.imgur.com/MS7eR.png"
56286958,How to fix 'TypeError: Cannot read property 'keycloak-token' of undefined' error in javascript?,"I'm trying to use keycloak in my node project but I'm always getting the following message : Cannot read property 'keycloak-token' of undefined.

Before that, I've launched keycloak, I created a new realm 'Test' and a new user 'id_a' which for I've set a new password. I can access to the account with keycloak but I can't with my code. Can you please help me ?




    var session = require('express-session');
    var Keycloak = require('keycloak-connect');
    const express = require('express');

    var memoryStore = new session.MemoryStore();

    let kcConfig = {
      clientId: ""id_a"",
      bearerOnly: true,
      serverUrl: 'http://localhost:8080/auth',
      realm: 'Test'
    };

    let keycloak = new Keycloak({ store: memoryStore }, kcConfig);

    var app = express();

    app.use( keycloak.middleware() );

    app.get( '/complain', keycloak.protect(), function(req, res) {
      res.send('hello world');
    });

    app.listen(3001, function(){
      console.log('Server started on port 3001...')
    });


the output is : 'TypeError: Cannot read property 'keycloak-token' of undefined' and I expect hello world",56293361,"The client is not a user account with a password, it's a client in the Test realm you have made. Create a new client, set the Client ID to something like 'node-backend' and then configure kConfig clientId as 'node-backend'.

Clients are applications, like Node, or Angular."
74571191,Use Keycloak Spring Adapter with Spring Boot 3,"I updated to Spring Boot 3 in a project that uses the Keycloak Spring Adapter. Unfortunately, it doesn't start because the  `KeycloakWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter` which was first deprecated in Spring Security and then removed. Is there currently another way to implement security with Keycloak? Or to put it in other words: How can I use Spring Boot 3 in combination with the Keycloak adapter?

I searched the Internet, but couldn't find any other version of the adapter.",74572732,"You can't use Keycloak adapters with spring-boot 3 for the reason you found, plus a few others related to transitive dependencies. As [most Keycloak adapters were deprecated in early 2022][1], it is very likely that no update will be published to fix that.

Directly use [spring-security OAuth2][2] instead. **Don't panic, it's an easy task with spring-boot**.

# spring-addons starters for resource server (app exposes a **REST API**) 
I maintain [4 thin wrappers around ""official"" boot resource-server starter][3] because, in my opinion, auto-configuration can be pushed one step further to:
- make OAuth2 configuration more portable: **with a configurable authorities converter, switching from an OIDC provider to another is just a matter of editing properties** (Keycloak, Auth0, Cognito, Azure AD, etc.)
- ease app deployment on different environments: **CORS configuration is controlled from properties file**
- reduce drastically the amount of Java code (things get even more complicated if you are in multi-tenancy scenario)
- reduce chances of misconfiguration (easy to de-synchronise CSRF protection and sessions configuration for instance)

It is very thin (each is composed of three files only) and greatly simplifies resource-servers configuration:
```xml
<dependency>
    <groupId>com.c4-soft.springaddons</groupId>
    <!-- replace ""webmvc"" with ""weblux"" if your app is reactive -->
    <!-- replace ""jwt"" with ""introspecting"" to use token introspection instead of JWT decoding -->
    <artifactId>spring-addons-webmvc-jwt-resource-server</artifactId>
    <!-- this version is to be used with spring-boot 3.0.1, use 5.4.x for spring-boot 2.6.x or before -->
    <version>6.0.13</version>
</dependency>
```
```java
@Configuration
@EnableMethodSecurity
public static class WebSecurityConfig {	}
```
```properties
com.c4-soft.springaddons.security.issuers[0].location=https://localhost:8443/realms/realm1
com.c4-soft.springaddons.security.issuers[0].authorities.claims=realm_access.roles,ressource_access.some-client.roles,ressource_access.other-client.roles


com.c4-soft.springaddons.security.cors[0].path=/some-api

com.c4-soft.springaddons.security.permit=all=/actuator/health/readiness,/actuator/health/liveness,/v3/api-docs/**
```

**Nothing more is needed to configure a multi-tenant resource-server with fine tuned CORS policy and authorities mapping. Bootiful, isn't it?**

By ""multi-tenant"", I mean that, as you can guess from this `issuers` property being an array, you can trust as many OIDC authorization-server instances as you need (multiple Keycloak realms & instances, or even mix with other OIDC providers like Auth0, Cognito, etc.), each with it's own authorities mapping configuration.

# Client configuration (UI with `oauth2Login()`)
If your Spring application exposes secured UI elements you want to be accessible with a browser (with OAuth2 login), you'll have to provide a FilterChain with ""client"" configuration.

If this app exposes both a REST API and a UI to manipulate it (with `oauth2Login()`), then you'll have to setup two security filter-chains: one with client config and the other with resource-server config.

Add this to pom.xml
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>
```

Here we demo a `SecurityFilterChain` applying only to a list of routes defined with a `securityMatcher`.

This assumes that an **additional** resource-server `SecurityFilterChain` is defined, with lower order and no `securityMatcher` so that all routes are intercepted after all filter chains are evaluated in order. This other filter chain could be defined either implicitly (by spring-addons as described above) or explicitly (with Spring Boot official starter as described below).

Remove the `securityMatcher` section if your app is solely a client:
```java
// Give higher precedence to security filter-chains with ""securityMatcher""
@Order(Ordered.HIGHEST_PRECEDENCE)
@Bean
SecurityFilterChain uiFilterChain(
        HttpSecurity http,
        ServerProperties serverProperties,
        GrantedAuthoritiesMapper authoritiesMapper) throws Exception {

    http.securityMatcher(new OrRequestMatcher(
        // add path to your UI elements instead
        new AntPathRequestMatcher(""/ui/**""),
        // those two are required to access Spring generated login page
        // and OAuth2 client callback endpoints
        new AntPathRequestMatcher(""/login/**""),
        new AntPathRequestMatcher(""/oauth2/**"")));

    http.oauth2Login().userInfoEndpoint().userAuthoritiesMapper(authoritiesMapper);

    http.authorizeHttpRequests()
        .requestMatchers(""/ui/index.html"").permitAll()
        .requestMatchers(""/login/**"").permitAll()
        .requestMatchers(""/oauth2/**"").permitAll()
        .anyRequest().authenticated();

    // If SSL enabled, disable http (https only)
    if (serverProperties.getSsl() != null && serverProperties.getSsl().isEnabled()) {
        http.requiresChannel().anyRequest().requiresSecure();
    }

    // Many defaults are kept compared to API filter-chain:
    // - sessions (and CSRF protection) are enabled
    // - unauthorized requests to secured resources will be redirected to login (302 to login is Spring's default response when authorisation is missing or invalid)

    return http.build();
}

@Bean
GrantedAuthoritiesMapper userAuthoritiesMapper(Converter<Map<String, Object>, Collection<? extends GrantedAuthority>> authoritiesConverter) {
    return (authorities) -> {
        Set<GrantedAuthority> mappedAuthorities = new HashSet<>();

        authorities.forEach(authority -> {
            if (authority instanceof OidcUserAuthority oidcAuth) {
                mappedAuthorities.addAll(authoritiesConverter.convert(oidcAuth.getIdToken().getClaims()));

            } else if (authority instanceof OAuth2UserAuthority oauth2Auth) {
                mappedAuthorities.addAll(authoritiesConverter.convert(oauth2Auth.getAttributes()));

            }
        });

        return mappedAuthorities;
    };
}
```
The code above assumes that a `Converter<Map<String, Object>, Collection<? extends GrantedAuthority>>` bean is exposed. One is auto-configured by `spring-addons` starters for resource-server and the ""official"" starter section below defines one. Take the later as sample if your app is solely a client.

Last, client properties:
```properties
spring.security.oauth2.client.provider.keycloak.issuer-uri=https://localhost:8443/realms/master

spring.security.oauth2.client.registration.spring-addons-public.provider=keycloak
spring.security.oauth2.client.registration.spring-addons-public.client-name=spring-addons-public
spring.security.oauth2.client.registration.spring-addons-public.client-id=spring-addons-public
spring.security.oauth2.client.registration.spring-addons-public.scope=openid,offline_access,profile
spring.security.oauth2.client.registration.spring-addons-public.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-addons-public.redirect-uri=http://bravo-ch4mp:8080/login/oauth2/code/spring-addons-public
```

# ""Official"" Spring Boot resource-server starter
As `spring-addons-{webmvc|webflux}-{jwt|introspecting}-resource-server` are thin wrappers around `spring-boot-starter-oauth2-resource-server`, you can of course do the same with just the later.

Here is what it takes to configure a resource-server with a unique Keycloak realm as authorization-server:
```java
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class WebSecurityConfig {

    public interface Jwt2AuthoritiesConverter extends Converter<Jwt, Collection<? extends GrantedAuthority>> {
	}

    @SuppressWarnings(""unchecked"")
    @Bean
    public Jwt2AuthoritiesConverter authoritiesConverter() {
        // This is a converter for roles as embedded in the JWT by a Keycloak server
        // Roles are taken from both realm_access.roles & resource_access.{client}.roles
        return jwt -> {
            final var realmAccess = (Map<String, Object>) jwt.getClaims().getOrDefault(""realm_access"", Map.of());
            final var realmRoles = (Collection<String>) realmAccess.getOrDefault(""roles"", List.of());

            final var resourceAccess = (Map<String, Object>) jwt.getClaims().getOrDefault(""resource_access"", Map.of());

            // We assume here you have ""spring-addons-confidential"" and ""spring-addons-public"" clients configured with ""client roles"" mapper in Keycloak
            final var confidentialClientAccess = (Map<String, Object>) resourceAccess.getOrDefault(""spring-addons-confidential"", Map.of());
            final var confidentialClientRoles = (Collection<String>) confidentialClientAccess.getOrDefault(""roles"", List.of());
            final var publicClientAccess = (Map<String, Object>) resourceAccess.getOrDefault(""spring-addons-public"", Map.of());
            final var publicClientRoles = (Collection<String>) publicClientAccess.getOrDefault(""roles"", List.of());

            // Merge the 3 sources of roles and map it to spring-security authorities
            return Stream.concat(
                realmRoles.stream(),
                Stream.concat(confidentialClientRoles.stream(), publicClientRoles.stream()))
                    .map(SimpleGrantedAuthority::new).toList();
        };
    }

    // spring-boot looks for a Converter<Jwt, ? extends AbstractAuthenticationToken> bean
    // that is a converter from Jwt to something extending AbstractAuthenticationToken (and not AbstractAuthenticationToken itself)
    // In this conf, we use JwtAuthenticationToken as AbstractAuthenticationToken implementation
    public interface Jwt2AuthenticationConverter extends Converter<Jwt, JwtAuthenticationToken> {
	}

    @Bean
    public Jwt2AuthenticationConverter authenticationConverter(Jwt2AuthoritiesConverter authoritiesConverter) {
        return jwt -> new JwtAuthenticationToken(jwt, authoritiesConverter.convert(jwt));
    }

    // Give lower precedence to security filter-chains without ""securityMatcher"" so that the filter-chains with a ""securityMatcher"" get a chance to be matched
    @Order(Ordered.LOWEST_PRECEDENCE)
    @Bean
    public SecurityFilterChain apiFilterChain(
            HttpSecurity http,
            ServerProperties serverProperties,
            Converter<Jwt, ? extends AbstractAuthenticationToken> authenticationConverter) throws Exception {

        // Enable OAuth2 with custom authorities mapping
        http.oauth2ResourceServer().jwt().jwtAuthenticationConverter(authenticationConverter);
        // As the authentication bean is the one expected by spring-boot,
        // an alternative would be to use just
        // http.oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);

        // Enable anonymous
        http.anonymous();

        // Enable and configure CORS
        http.cors().configurationSource(corsConfigurationSource());

        // State-less session (state in access-token only)
        // with Disable CSRF because of disabled sessions
        http
            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            .csrf().disable();

        // Return 401 (unauthorized) instead of 302 (redirect to login) when authorization is missing or invalid
        http.exceptionHandling().authenticationEntryPoint((request, response, authException) -> {
            response.addHeader(HttpHeaders.WWW_AUTHENTICATE, ""Basic realm=\""Restricted Content\"""");
            response.sendError(HttpStatus.UNAUTHORIZED.value(), HttpStatus.UNAUTHORIZED.getReasonPhrase());
        });

        // If SSL enabled, disable http (https only)
        if (serverProperties.getSsl() != null && serverProperties.getSsl().isEnabled()) {
            http.requiresChannel().anyRequest().requiresSecure();
        }

        // Route security: authenticated to all routes but actuator and Swagger-UI
        http.authorizeRequests()
            .antMatchers(""/actuator/health/readiness"", ""/actuator/health/liveness"", ""/v3/api-docs/**"").permitAll()
            .anyRequest().authenticated();

        return http.build();
    }

    private CorsConfigurationSource corsConfigurationSource() {
        // Very permissive CORS config...
        final var configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList(""*""));
        configuration.setAllowedMethods(Arrays.asList(""*""));
        configuration.setAllowedHeaders(Arrays.asList(""*""));
        configuration.setExposedHeaders(Arrays.asList(""*""));

        // Limited to API routes (neither actuator nor Swagger-UI)
        final var source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration(""/greet/**"", configuration);

        return source;
    }
}
```
```properties
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://localhost:8443/realms/master
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://localhost:8443/realms/master/protocol/openid-connect/certs
```
As mentioned in preamble, this is quite more verbose than `spring-addons` starters, it's not ready for multi-tenancy and each time CORS policy changes (new API routes for instance) or when the claims source for authorities change (new OAuth2 client with client-roles mapping or other OIDC provider than Keycloak), you'll have to edit source-code and re-publish your app...

  [1]: https://github.com/keycloak/keycloak/discussions/10187
  [2]: https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html
  [3]: https://github.com/ch4mpy/spring-addons"
53650790,CAS vs Okta Vs Keycloak comparisions as an SSO solution,Which is the best option for SSO implementation Keycloack Vs CAS Vs Okta? I'm specifically looking for the disadvantages of each service to identify the best suitability for my system.,53658974,"Both Keycloak and Okta should provide what you're looking for. I'm not sure about CAS as I haven't used it in 10 years. Since both Keycloak and Okta use OAuth 2.0/OIDC, you might even be able to use Keycloak in development, and Okta in production.

I've implemented OAuth 2.0 / OIDC support in [JHipster][1]. It uses Keycloak (in a Docker container) by default, and [provides instructions for switching to Okta][2]. Thanks to the power of Spring Security and Spring Boot, you only need to override some properties to switch between the two!


  [1]: https://www.jhipster.tech
  [2]: https://www.jhipster.tech/security/#oauth2"
46281416,Best practices of Export/Import Keycloak data in Kubernetes,"I'm trying to figure out, what is import/export best practices in K8S keycloak(version 3.3.0.CR1). Here is keycloak official page [import/export][1] explanation, and they example of export to single file json. Going to /keycloak/bin folder and the run this:

    ./standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=keycloak-export.json

I logged in to pod, and I get errors after run this command:

    12:23:32,045 ERROR [org.jboss.as.controller.management-operation] (Controller Boot Thread) WFLYCTL0013: Operation (""add"") failed - address: ([
        (""core-service"" => ""management""),
        (""management-interface"" => ""http-interface"")
    ]) - failure description: {
        ""WFLYCTL0080: Failed services"" => {""org.wildfly.management.http.extensible"" => ""java.net.BindException: Address already in use /127.0.0.1:9990""},
        ""WFLYCTL0288: One or more services were unable to start due to one or more indirect dependencies not being available."" => {
            ""Services that were unable to start:"" => [""org.wildfly.management.http.extensible.shutdown""],
            ""Services that may be the cause:"" => [""jboss.remoting.remotingConnectorInfoService.http-remoting-connector""]
        }
    }

As I see, Keycloak server run on the same port, where I ran backup script. Here helm/keycloak values.yml:

    Service:
      Name: keycloak
      Port: 8080
      Type: ClusterIP
    
    Deployment:
      Image: jboss/keycloak
      ImageTag: 2.5.1.Final
      ImagePullPolicy: IfNotPresent
      ContainerPort: 8080
      KeycloakUser: Admin
      KeycloakPassword: Admin

So, server should be stopped, before we ran this scripts? I can't stop keycloak process inside of pod, because ingress will close pod and will create new one.
Any suggestions for any other way to export/import(backup/restore) data? Or I missing something?

P.S.
I even tried UI import/export. Export work good, and I see all data. But import worked in half way. He Brought me all ""Clients"", but not my ""Realm"" and ""User Federation"".

  [1]: http://www.keycloak.org/docs/2.0/server_admin_guide/topics/export-import.html

",47198081,"Basically, you just have to start the exporting Keycloak instance on ports that are different from your main instance. I used something like this just now:

`bin/standalone.sh -Dkeycloak.migration.action=export -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=keycloak-export.json -Djboss.http.port=8888 -Djboss.https.port=9999 -Djboss.management.http.port=7777`

The important part are all the ports. If you get more error messages, you might need to add more properties (`grep port standalone/configuration/standalone.xml` is your friend for finding out property names), but in the end, all error messages stop and you see this message instead:

```
09:15:26,550 INFO  [org.keycloak.exportimport.singlefile.SingleFileExportProvider] (ServerService Thread Pool -- 52) Exporting model into file /opt/jboss/keycloak/keycloak-export.json
[...]
09:15:29,565 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: Keycloak 3.2.0.Final (WildFly Core 2.0.10.Final) started in 12156ms - Started 444 of 818 services (558 services are lazy, passive or on-demand)
```

Now you can stop the server with <kbd>Ctrl</kbd>-<kbd>C</kbd>, exit the container and copy the export file away with `kubectl cp`."
46205475,Keycloak extension with dependencies,"I'm creating a Keycloak extension with dependencies. I added the entry on the `pom.xml` like this:


	<dependency>
		<groupId>org.json</groupId>
		<artifactId>json</artifactId>
		<version>20160810</version>
	</dependency>

Then I deployed it to Keycloak:

    mvn clean install wildfly:deploy

But when I run it, I got the error:

	org.jboss.resteasy.spi.UnhandledException: java.lang.NoClassDefFoundError: org/json/JSONObject
	Caused by: java.lang.NoClassDefFoundError: org/json/JSONObject
	Caused by: java.lang.ClassNotFoundException: org.json.JSONObject from [Module ""deployment.keycloak-authenticator.jar"" from Service Module Loader]
		at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:198)
		at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
		at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
		at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
		... 66 more


How to add dependencies to extensions in Keycloak?",53619281,"There is a better way, deploy as a EAR archive. This project shows how to: https://github.com/stianst/keycloak-experimental/tree/master/fido-u2f"
61142611,Keycloak: Failed to load URLs in Spring Boot Application,"I'm currently trying to develop a Spring Boot Rest Api which is secured with keycloak.

I get an error when I try to call a api which the user has to be identify.

The error message is following:

    2020-04-10 16:09:00.324  WARN 44525 --- [nio-8080-exec-7] 
    o.keycloak.adapters.KeycloakDeployment   : Failed to load URLs from 
    https://{{keycloakserver}}.de/auth/realms/{{realm}}/.well-known/openid-configuration

    java.lang.RuntimeException: java.lang.RuntimeException: Stub!
	at org.keycloak.adapters.KeycloakDeployment.getClient(KeycloakDeployment.java:327) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.KeycloakDeployment.getOidcConfiguration(KeycloakDeployment.java:219) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.KeycloakDeployment.resolveUrls(KeycloakDeployment.java:178) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.KeycloakDeployment.getRealmInfoUrl(KeycloakDeployment.java:232) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.rotation.AdapterTokenVerifier.createVerifier(AdapterTokenVerifier.java:107) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.rotation.AdapterTokenVerifier.verifyToken(AdapterTokenVerifier.java:47) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.BearerTokenRequestAuthenticator.authenticateToken(BearerTokenRequestAuthenticator.java:103) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.BearerTokenRequestAuthenticator.authenticate(BearerTokenRequestAuthenticator.java:88) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.RequestAuthenticator.authenticate(RequestAuthenticator.java:67) [keycloak-adapter-core-9.0.2.jar:9.0.2]
	at org.keycloak.adapters.springsecurity.filter.KeycloakAuthenticationProcessingFilter.attemptAuthentication(KeycloakAuthenticationProcessingFilter.java:154) [keycloak-spring-security-adapter-9.0.2.jar:9.0.2]
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter.doFilter(KeycloakPreAuthActionsFilter.java:96) [keycloak-spring-security-adapter-9.0.2.jar:9.0.2]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97) [spring-web-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.1.10.RELEASE.jar:5.1.10.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) [spring-security-web-5.1.6.RELEASE.jar:5.1.6.RELEASE]


I don't know what `Failed to load URLs from` means. I can access this side when I click on the link and the configuration file is shown.

**Setup**

Keycloak:

Keycloak Server is in the web, so no localhost.

I have a realm (test-realm) created<br /> 
I have a client (test-client) created<br />
I have a user (test-user) created<br />
I have a role in the client (ADMIN) created<br />
I have assigned the role (ADMIN) to the user (test-user)<br />

The client protocol for the client is `openid-connect` and the access type is `confidental`.

Spring Boot:

The Spring Boot rest application is running on localhost:8080.

I added in the `applications.properties` following keycloak configs.

    keycloak.realm={{test-realm}}
    keycloak.auth-server-url = https://{{keycloakserver}}.de/auth
    keycloak.resource = {{test-client}}
    keycloak.ssl-required=external
    keycloak.bearer-only=true
    keycloak.principal-attribute=preferred_username
    keycloak.use-resource-role-mappings = true

To make sure the test-user can only access one api call I use following config.

  
     @Override
        protected void configure(HttpSecurity http) throws Exception {
            super.configure(http);
            http.authorizeRequests()
                    .antMatchers(""/getTest"")
                    .hasRole(""ADMIN"")
                    .anyRequest()
                    .authenticated();
        }

**Tests**

When I call `http://localhost:8080/getTest` with Postman I get a correct `401 Unauthorized`.

Then I called the same URL with `Authorization` and the access token of the logged in `test-user`.

With this second call I get the error message above.


Does anybody know anything about this?
If I missed a config value that you need to know, just ask.

Thanks for your help.


Edit:

SecurityConfig.java

    
    import org.keycloak.adapters.KeycloakConfigResolver;
    import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
    import org.keycloak.adapters.springboot.KeycloakSpringBootProperties;
    import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
    import org.keycloak.adapters.springsecurity.KeycloakSecurityComponents;
    import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
    import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.context.annotation.Primary;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
    import org.springframework.security.core.session.SessionRegistryImpl;
    import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
    import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
    
    /**
     * Created by johannes on 07.04.20 for test App.
     */
    @EnableWebSecurity
    @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
    @Configuration
    @KeycloakConfiguration
    public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
    
        @Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
            KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
            auth.authenticationProvider(keycloakAuthenticationProvider);
        }
    
        @Bean
        @Override
        protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new RegisterSessionAuthenticationStrategy(
                    new SessionRegistryImpl());
        }
    
        @Bean
        @Primary
        public KeycloakConfigResolver keycloakConfigResolver(KeycloakSpringBootProperties properties) {
            return new CustomKeycloakSpringBootConfigResolver(properties);
        }
    
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            super.configure(http);
            http.authorizeRequests()
                    .antMatchers(""/getTest"")
                    .hasRole(""ADMIN"")
                    .anyRequest()
                    .authenticated();
        }
    }

CustomKeycloakSpringBootConfigResolver:

    
    import org.keycloak.adapters.KeycloakDeployment;
    import org.keycloak.adapters.KeycloakDeploymentBuilder;
    import org.keycloak.adapters.spi.HttpFacade;
    import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
    import org.keycloak.adapters.springboot.KeycloakSpringBootProperties;
    import org.springframework.context.annotation.Configuration;
    
    /**
     * Created by johannes on 10.04.20 for test App.*/
    @Configuration
    public class CustomKeycloakSpringBootConfigResolver extends KeycloakSpringBootConfigResolver {
            private final KeycloakDeployment keycloakDeployment;
        public CustomKeycloakSpringBootConfigResolver(KeycloakSpringBootProperties properties) {

            keycloakDeployment = KeycloakDeploymentBuilder.build(properties);
        }

        @Override
        public KeycloakDeployment resolve(HttpFacade.Request facade) {
            return keycloakDeployment;
        }
    }

TestController.java (this is just the test getter):

  

      @GetMapping(""/getTest"")
        public @ResponseBody ResponseEntity getTest() {
    
            return ResponseEntity.status(ResponseValues.ITEMDELETEFAILED.getResponseCode()).body(ResponseValues.ITEMDELETEFAILED.getResponseMessage());
    
        }


Request was made with postman, this is the code:

    curl --location --request GET 'http://localhost:8080/getTest' \
    --header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUI...' \
    --header 'Cookie: JSESSIONID=41E8E82178FA181817...'



",61272165,"I solved the Issue own my own.

I noticed that my spring boot sdk was a android sdk. I don't know how this could happen.
I changed it to the java sdk, and it worked like a charm.
"
57390389,"The ""realmRoles"" parameter is ignored when adding a user via the Keycloak API","I am trying to create a user via the Keycloak API, and I would like to assign a realm-level role to them when they are first added. However, it doesn't seem to work like the documentation says it should.

I know that I could simply make a second add-role-to-user API request after the initial create-user one, but:

+ The documentation indicates that I shouldn't need to do this.
+ The second API request could fail, leaving the user in an ""incomplete"" state.
+ It would make the code I'm writing more complex than it needs to be.

To test this in `irb`, using the [keycloak](https://rubygems.org/gems/keycloak) Ruby gem, I first request an access token from Keycloak:

    require 'keycloak'
    json = Keycloak::Client.get_token_by_client_credentials
    access_token = JSON.parse(json)['access_token']

All of the following create a user within Keycloak, but without the ""owner"" role:

    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: ['owner'] }, access_token)
    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: ['1fff5f5f-7357-4f73-b45d-65ccd01f3bc8'] }, access_token)
    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: ['{""id"":""1fff5f5f-7357-4f73-b45d-65ccd01f3bc8"",""name"":""owner"",""description"":""Indicates that a user is the owner of an organisation."",""composite"":false,""clientRole"":false,""containerId"":""MyRealmName""}'] }, access_token)

Attempting to use a role-hash instead of a string causes an error:

    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: [{""id""=>""1fff5f5f-7357-4f73-b45d-65ccd01f3bc8"", ""name""=>""owner"", ""description""=>""Indicates that a user is the owner of an organisation."", ""composite""=>false, ""clientRole""=>false, ""containerId""=>""MyRealmName""}] }, access_token)

    Traceback (most recent call last):
          16: from /home/thomas/.rvm/rubies/ruby-2.6.3/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'
          15: from (irb):8
          14: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/keycloak-3.0.0/lib/keycloak.rb:541:in `generic_post'
          13: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/keycloak-3.0.0/lib/keycloak.rb:943:in `generic_request'
          12: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/keycloak-3.0.0/lib/keycloak.rb:915:in `block in generic_request'
          11: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient.rb:71:in `post'
          10: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/request.rb:52:in `execute'
            9: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/request.rb:145:in `execute'
            8: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/request.rb:715:in `transmit'
            7: from /home/thomas/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/net/http.rb:920:in `start'
            6: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/request.rb:725:in `block in transmit'
            5: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/request.rb:807:in `process_result'
            4: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/keycloak-3.0.0/lib/keycloak.rb:916:in `block (2 levels) in generic_request'
            3: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/keycloak-3.0.0/lib/keycloak.rb:958:in `rescue_response'
            2: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/abstract_response.rb:103:in `return!'
            1: from /home/thomas/.rvm/gems/ruby-2.6.3/gems/rest-client-2.0.2/lib/restclient/abstract_response.rb:223:in `exception_with_response'
    RestClient::InternalServerError (500 Internal Server Error)

Keycloak prints the following, indicating that - as expected - the roles should be an array of strings, not hashes:

    08:53:27,889 ERROR [org.keycloak.services.error.KeycloakErrorHandler] (default task-22) Uncaught server error: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.lang.String` out of START_OBJECT token
    at [Source: (io.undertow.servlet.spec.ServletInputStreamImpl); line: 1, column: 37] (through reference chain: org.keycloak.representations.idm.UserRepresentation[""realmRoles""]->java.util.ArrayList[0])

The same thing happens if I pass a single string instead of an array, like:

    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: 'owner' }, access_token)

Am I doing something wrong, or is this simply a bug in the Keycloak API?

Reference
---------

+ https://www.keycloak.org/docs-api/9.0/rest-api/index.html#_createuser
+ https://www.keycloak.org/docs-api/9.0/rest-api/index.html#_userrepresentation

Similar questions
-----------------

+ https://stackoverflow.com/q/54567270/4200092
+ https://stackoverflow.com/q/56206472/4200092
",57416390,"**You did nothing wrong. It is a bug in the Keycloak API.**

This request should work:

    Keycloak::Admin.generic_post('users', nil, { username: 'someone', realmRoles: ['owner'] }, access_token)

Unfortunately the API documentation is wrong because the 'realmRoles' attribute doesn't work when trying to create/update a user/group.

You can find more informations about the behavior on the official bug tracker of Keycloak :

 - https://issues.jboss.org/browse/KEYCLOAK-3410
 - https://issues.jboss.org/browse/KEYCLOAK-10876
 - https://issues.jboss.org/browse/KEYCLOAK-5038
 - ...

For now the only solution is to make multiple requests on the API, using the RoleMappers to map a role to a user.

Documentation about those operations : https://www.keycloak.org/docs-api/18.0/rest-api/index.html#_role_mapper_resource"
40458770,"Microservice to Microservice calls, authorization from a queue message","**Context:** I'm creating a cloud platform to support multiple applications with SSO. I'm using **Keycloak for authentication** and **Netflix Zuul for authorization** (API Gateway) thru **Keycloak Spring Security Adapter**.

Each microservice expect an Authorization header, which contains a valid JWT, from which it will take the username (sub) to process the request. Each microservice-to-microservice call should go thru Netflix Zuul first, passing the Authorization header to maintain a stateless validation. That strategy allow to every microservice to know who is the user (sub) who is invoking the microservice indirectly.

**Problem/Question 1:** What happens if a microservice is invoked from a queue message? One idea that I had is to storage in the queue the information related to the message + userInfo, and, create a dedicated microservice to process that kind of messages, with that approach this special microservice should read the userInfo from the queue and process the message.

> UPDATE 1: Per an email reply from another forum, storing the JWT in a queue isn't a good idea, since it could be mined easily.

**Problem/Question 2:** But, what happens if the previous special microservice wants to call another normal microservice which expect to receive a JWT in a header? Should this special microservice create by himself a JWT to impersonate the user and be able to call the regular microservices?

Another solution that I thought was to storage the original JWT in the queue, but, what happens if the queue calls to the special microservice later? Just after the JWT is not valid anymore (it expired) and the microservice called will reject the request?

**Possible solutions:** (Updated per João Angelo discussion, see below)

> I should authenticate the requests from my users (**Authorization code flow**) and my services (**Client credentials grant**), both requests should contain user information in the payload. When the request it comes from the user, I need to validate that the payload user info match with the JWT claims. When the request comes from a service, I just need to trust in that service (as long as it is under my control).

I will appreciate very much your help. Thanks.",40484902,"**Disclaimer**: I never used Keycloak, but the tag wiki says it's compliant with OAuth2 so I'll trust that information.
___

At a really high-level view, you seem to have two requirements:

1. authenticate actions triggered by an end user while he's using your system.
1. authenticate actions triggered by your system at an unknown time and where there is no requirement for a end-user to be online.

You already met the first one, by relying on a token-based authentication system and **I would do exactly the same for the second point, the only difference would be that the tokens would be issued to your system using the OAuth2 client credentials grant** instead of the other grants that are targeted at scenarios where there is an end-user.

[![Client Credentials Grant][1]][1]

(source: [Client Credentials Grant][2])

In your case, Keycloak would play the role of Auth0 and your client applications are microservices which can maintain client secrets used to authenticate themselves in the authorization server and obtain access tokens.

**One thing to have in mind is that if your system relies on the `sub` claim for much more than authentication and authorization then you may need to make some adjustments**. For example, I've seen systems where performing action A required to know that it was targeted at user X and Y, but the payload for the action only received user Y and assumed user X was the current authenticated principal. This works fine when everything is synchronous, but by merely switching the payload to specify both users would mean that the action could be done asynchronously by a system authenticated principal.

  [1]: https://i.stack.imgur.com/rB4C3.jpg
  [2]: https://auth0.com/docs/architecture-scenarios/application/server-api#client-credentials-grant"
60153377,Keycloak authentication flow in a microservices based environment,"I want to use Keycloak in a microservices based environment, where authentication is based on OpenID endpoints REST calls  (""/token"", no redirection to keycloak login page), a flow that I thought of would be something like this: <br><br>
1. Front-end SPA retrieves the tokens from the ""/token"" endpoint and stores in browser's localStorage, then sends it with every request. <br><br>
 2. Gateway-level authentication: Acess Token is passed from the front end to the gateway, gateway consults Keycloak server to check if the token is still valid (not invalidated by a logout end-point call).<br><br>
 3. Micro-service based authorization: Acess Token is passed from the Gateway to the microservices, using Spring Boot adapter the microservices check the signature of the token offline (bearer-only client?) then based on the role in the token do the authorization.<br><br>
My questions are: Does this flow make sense or can you suggest another flow? What type of Keycloak clients to use? What's an ideal way to pass Tokens using Spring Boot Adapter, and should it be done like that in the first place? Please keep in mind that I am not a Keycloak expert, I've done my research but I still have doubts.


",60182596,"Your Front-end SPA should be public-client and springboot micro service should be Bearer only Client and Gateway could be Confidential Client.

You can check the Keycloak provided oidc [adapters][2]. For springboot you use the keycloak provided adapter


Similar solution using api gateway is discussed [here][1]



  [1]: https://stackoverflow.com/questions/49056708/is-keycloak-behind-api-gateway-a-good-practice
  [2]: https://github.com/keycloak/keycloak/tree/master/adapters/oidc"
52166711,How to implement group-membership JavaScript policy in Keycloak,"A [2-year old keycloak-user list question][1] w/o an answer:

 1. there’s a protected resource called *Project*
 2. and an owner - a *Project Manager*
 3. Each project manager has access to only their own projects (owner-only policy). 
 4. Project Managers in turn report to one or more *Portfolio Managers*. A Portfolio Manager should be able to access all his/her project managers' projects (portfolio-manager policy). 

Let’s assume the system design if flexible and this fact who are the Portfolio Managers for a particular Project Manager 
can be either kept inside Keycloak (but not as keycloak [groups][2]) or in the client app itself. How can this be implemented as a [JavaScrtipt-based 
authorization policy][3] in Keycloak? I guess the request can be injected with this info somehow but can’t figure it out from the docs.


  [1]: http://lists.jboss.org/pipermail/keycloak-user/2016-July/007069.html
  [2]: https://www.keycloak.org/docs/latest/server_admin/index.html#groups
  [3]: https://www.keycloak.org/docs/4.4/authorization_services/index.html#_policy_js",53079276,"It turned out to be rather easy. I've decided to keep the info about managers in another database, and then the app (`service-nodejs`) needs to pass this info as a claim to keycloak. I've tested this on the [service-nodejs keycloak quickstart][1]. Here are the relevant pieces: 


    // app.js route:

    app.get('/service/project/:id',
      keycloak.enforcer(['Project'], {
          response_mode: 'permissions', 
          claims: (request) => {
              return { ""portfolio.managers"": ['alice', 'bob'] } //hard-coded
          }
      }), function(req, res) {
          res.json({ message: `got project ""operation ""` });
      });


The policy protecting the Project resource is an aggregated of OwnerOnly and PortfolioManagers:


    // portfolio-managers-policy:
    
    var context = $evaluation.getContext();
    var identity = context.getIdentity();
    var userid = identity.getAttributes().getValue('preferred_username').asString(0);
    var managers =  context.getAttributes().getValue('portfolio.managers')
    
    if (!managers) {
        print('managers not provided, cannot decide!');
        $evaluation.deny();
    } else {
        // check if the user is one of the portfolio managers of this project:
        for (var i = 0; i < managers.size(); i++) {
            if (managers.asString(i) == userid) {
                $evaluation.grant();
                break;
            }
        }
    }


Note that the `service-nodejs` keycloak client **must** be *confidential* in order to call the token endpoint. 


  [1]: https://github.com/keycloak/keycloak-quickstarts/tree/latest/service-nodejs

"
55634189,Import realm from old version to new Keycloak version,"We need to export & import configuration from an old version 3.4 to new Keycloak version 5. But it shows error on import:

> {""errorMessage"":""App doesn't exist in role definitions: realm-management""}

Is there any option to import realm to new version?",56277253,"For me, I needed to create the realm using the Add Realm button and use the export file as the import file on the realm creation screen. I think the realm just needs to be created alongside the import."
45328003,Setting required action on new keycloak user account,"I am using a client to create a new keycloak user. Something like this: 

    keycloak.realm(realm)
            .users()
            .create(user);
The user variable is a `UserRepresentation` object, and I'm trying to add an `Update Password` required action:

    user.setRequiredActions(singletonList(""Update Password""))

User gets created ok, the problem is that I don't have the required action set

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/1ZQRr.png

Not sure what I'm doing wrong, should I specify a different value in the required actions list? 

Thanks",45433846,"Figured out what was up. 

Keycloak has an enum to represent various user actions:

    public static enum RequiredAction {
        VERIFY_EMAIL, UPDATE_PROFILE, CONFIGURE_TOTP, UPDATE_PASSWORD, TERMS_AND_CONDITIONS
    }

So the value should be `""UPDATE_PASSWORD""` not `""Update password""`"
40503697,Keycloak: missing realm public key,"when I access keycloak admin console (!remotely) and create client:

[![keycloak client settings][1]][1]


the keycloak OIDC JSON doesn't have public key

[![keycloak OIDC JSON][2]][2]


  [1]: https://i.stack.imgur.com/LF3lP.png
  [2]: https://i.stack.imgur.com/HVPk1.png


I would expect having in JSON something like: 

     ""realm-public-key"": ""MIIBIjANBg....",40548043,"keycloak.json in newest keycloak  doesnot have any realm public key ... actually it appears that you are using  keycloak version 2.3.x   there have been some changes in it . Basically  you can rotate multiple public keys for a realm . The document says this :-


> In 2.3.0 release we added support for Public Key Rotation. When admin
> rotates the realm keys in Keycloak admin console, the Client Adapter
> will be able to recognize it and automatically download new public key
> from Keycloak. However this automatic download of new keys is done
> just if you don’t have realm-public-key option in your adapter with
> the hardcoded public key. For this reason, we don’t recommend to use
> realm-public-key option in adapter configuration anymore. Note this
> option is still supported, but it may be useful just if you really
> want to have hardcoded public key in your adapter configuration and
> never download the public key from Keycloak. In theory, one reason for
> this can be to avoid man-in-the-middle attack if you have untrusted
> network between adapter and Keycloak, however in that case, it is much
> better option to use HTTPS, which will secure all the requests between
> adapter and Keycloak."
38371943,Keycloak - Get all Users mapped to roles,"I know keycloak has exposed below api,

    <dependency>
        <groupId>org.keycloak</groupId>
        <artifactId>keycloak-services</artifactId>
        <version>2.0.0.Final</version>
    </dependency>

With complete documentation [here][1]. I cannot find the required api here to fetch all users with specific role mapped to them.

**Problem Statement** - I need to pick all users from keycloak server who have a specific role. I need to send email to all users with role mapped to them.


  [1]: http://www.keycloak.org/docs/rest-api/index.html",38781291,"There is an outstanding [feature request][1] asking for this function via the API.

In the meantime if your requirement is once-off you could obtain the user names (or email addresses) by interrogating the database joining KEYCLOAK_ROLE to USER_ROLE_MAPPING to USER_ENTITY

Something like:

    SELECT username
    FROM keycloak_role kr 
       JOIN user_role_mapping rm ON kr.id = rm.role_id
       JOIN user_entity ue ON rm.user_id = ue.id
    WHERE kr.name = 'your_role_name';


  [1]: https://issues.jboss.org/browse/KEYCLOAK-1902 ""feature request"""
52440546,Create user on Keycloack from curl command,"Currently I try to create a user from curl command via Keycloak's Admin REST API.
I can authenticate myself as an admin, I have a good answer, but when I want to create a user, I have an error like: ""404 - Not Found"".

Here are my curl commands:

 

    #!/bin/bash
    
    echo ""* Request for authorization""
    RESULT=`curl --data ""username=pierre&password=pierre&grant_type=password&client_id=admin-cli"" http://localhost:8080/auth/realms/master/protocol/openid-connect/token`
    
    echo ""\n""
    echo ""* Recovery of the token""
    TOKEN=`echo $RESULT | sed 's/.*access_token"":""//g' | sed 's/"".*//g'`
    
    echo ""\n""
    echo ""* Display token""
    echo $TOKEN
    
    echo ""\n""
    echo "" * user creation\n""
    curl   http://localhost:8080/apiv2/users -H ""Authorization: bearer $TOKEN""   --data '{""firstName"":""xyz"",""lastName"":""xyz"", ""email"":""demo2@gmail.com"", ""enabled"":""true""}'
I used the official API documentation, located at this address: [https://www.keycloak.org/docs-api/4.4/rest-api/index.html][1]


[![enter image description here][2]][2]

I have this error:
[![enter image description here][3]][3]


my realm is good
[![enter image description here][4]][4]

How I can fix it?
Thanks in advance.

  [1]: https://www.keycloak.org/docs-api/4.4/rest-api/index.html
  [2]: https://i.stack.imgur.com/cYSBd.png
  [3]: https://i.stack.imgur.com/uVUw2.png
  [4]: https://i.stack.imgur.com/KR9ac.png",54110718,"try this, I added the content type header and modify the url : 

    #!/bin/bash
	
	echo ""* Request for authorization""
	RESULT=`curl --data ""username=admin&password=Pa55w0rd&grant_type=password&client_id=admin-cli"" http://localhost:8080/auth/realms/master/protocol/openid-connect/token`
	
	echo ""\n""
	echo ""* Recovery of the token""
	TOKEN=`echo $RESULT | sed 's/.*access_token"":""//g' | sed 's/"".*//g'`
	
	echo ""\n""
	echo ""* Display token""
	echo $TOKEN
	
	echo ""\n""
	echo "" * user creation\n""
	curl -v http://localhost:8080/auth/admin/realms/apiv2/users -H ""Content-Type: application/json"" -H ""Authorization: bearer $TOKEN""   --data '{""firstName"":""xyz"",""lastName"":""xyz"", ""email"":""demo2@gmail.com"", ""enabled"":""true""}'


"
71984843,"keycloak: using react user can login but when I try logout I get a message ""Invalid parameter: redirect_uri""","I'm trying to use keycloak with a react app, this is my current client configuration...I did this inside the master realm

[![client][1]][1] 


this is my keycloak config

```ts
export const keycloakConfig = {
  ""realm"": ""master"",
  ""auth-server-url"": ""http://localhost:8180/"",
  ""ssl-required"": ""external"",
  ""resource"": ""demo"",
  ""public-client"": true,
  ""confidential-port"": 0,
  ""clientId"" : ""demo"",
  ""url"" : ""http://localhost:8180/""
};
```

I based my code on  [this repo][2]

now...I can login without problems in my app, and the displayed url is this

```
http://localhost:8180/realms/master/protocol/openid-connect/auth?client_id=demo&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&state=ba9daf04-ffdb-4ad3-b912-8be846f0684b&response_mode=fragment&response_type=code&scope=openid&nonce=558d71b7-2c66-44f8-9297-84694dc571a8
```

but when I try to logout I get a message

```
Invalid parameter: redirect_uri
```

the logout url is this

```
http://localhost:8180/realms/master/protocol/openid-connect/logout?redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F

```

I'm not sure if my client config is correct because this has several missing parameters in almost all tutorials that I've found

Do you know what could be the problem here?
thank you guys

  [1]: https://i.stack.imgur.com/5plRD.png
  [2]: https://github.com/kaisheng1/hasura-keycloak-nextjs/tree/master/nextjs",72011979,"From the [Release Notes][1]:

> OpenID Connect Logout
> 
> Previous versions of Keycloak had supported automatic logout of the
> user and redirecting to the application by opening logout endpoint URL
> such as
> http(s)://example-host/auth/realms/my-realm-name/protocol/openid-connect/logout?redirect_uri=encodedRedirectUri.
> While that implementation was easy to use, it had potentially negative
> impact on performance and security. The new version has better support
> for logout based on the OpenID Connect RP-Initiated Logout
> specification. The parameter redirect_uri is no longer supported;
> also, in the new version, the user needs to confirm the logout. It is
> possible to omit the confirmation and do automatic redirect to the
> application when you include parameter post_logout_redirect_uri
> together with the parameter id_token_hint with the ID Token used for
> login.
> 
> The existing deployments are affected in the following ways:
> 
>     If your application directly uses links to logout endpoint with the redirect_uri parameter, you may be required to change this as
> described above. Consider either removing the redirect_uri parameter
> entirely or replacing it with the id_token_hint and
> post_logout_redirect_uri parameters.
> 
>     If you use java adapters and your application does logout by call httpServletRequest.logout(), you are not affected because this call
> uses the backchannel variant of the logout endpoint and that one was
> not changed.
> 
>     If you use the latest javascript adapter, you are also not affected. However if your application uses an older version of the
> JavaScript adapter, you are affected as this adapter uses the variant
> of the logout endpoint with the deprecated redirect_uri parameter. In
> this case, you may need to upgrade to the latest version of the
> JavaScript adapter.
> 
>     For the Node.js adapter, the same guideline applies as for the JavaScript adapter. You are encouraged to update to the latest version
> as the older version of the adapter uses the deprecated redirect_uri
> parameter. With the latest Node.js adapter, you are not affected as
> long as you use the logout based on the /logout URL as described in
> the documentation or in the Node.js adapter example. However, in the
> case when your application directly uses the method
> keycloak.logoutUrl, you can consider adding idTokenHint as the second
> argument to this method. The possibility to add idTokenHint as second
> argument was newly added in this version. The idTokenHint needs to be
> a valid ID Token that was obtained during the login. Adding
> idTokenHint is optional, but if you omit it, your users will need to
> confirm the logout screen as described earlier. Also they will not be
> redirected back to the application after logout.
> 
> There is a backwards compatibility option, which allows your
> application to still use the old format of the redirect_uri parameter.
> 
> You can enable this parameter when you start the server by entering
> the following command:
> 
> bin/kc.[sh|bat]
> --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true start
> 
> With this configuration, you can still use the format with the
> redirect_uri parameter. Note the confirmation screen will be needed if
> the id_token_hint is omitted. Warning 	The backwards compatibility
> switch will be removed in some future version - probably Keycloak 21.
> You are encouraged to update your clients as soon as possible as
> described above rather than rely on this switch.


  [1]: https://www.keycloak.org/2022/04/keycloak-1800-released"
34430049,Type Definition file for Keycloak.js,"I'm using Keycloak auth mechanism for my angular/node/typescript application .I could not find a definitelyTyped d.ts file for Keycloak.js 

Is there a typescript equivalent/work in progress for this JBOSS Keycloak.js adapter or do I have to write one ? any inputs/pointers would be much appreciated",34430153,"A simple one `keycloak.d.ts` can be written with the contents:

    declare var keycloak:any;
    declare module ""keycloak"" {
        export = keycloak;
    }


More : https://basarat.gitbooks.io/typescript/content/docs/types/migrating.html"
60812831,Unable to assign realm Role to a newly created Keycloak User via Admin REST API,"**Step 1.** Get Access Token:

    curl --location --request POST 'https://localhost/auth/realms/master/protocol/openid-connect/token' \
    --header 'Content-Type: application/x-www-form-url## Heading ##encoded' \
    --data-urlencode 'username=*******' \
    --data-urlencode 'password=*******' \a
    --data-urlencode 'grant_type=*******' \
    --data-urlencode 'client_id=*******'

**Step 2.** Create user and assign a role:

    curl --location --request POST 'https://localhost/auth/admin/realms/MyRealm/users' \
    --header 'Content-Type: application/json' \
    --header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJKZFVORmNDU19rWjdvZ3ZFSkI4VXZpMTNRb2hKbnh2VW9oeVpieXg2Vld3In0.eyJqdGkiOiI4OGQ4Njk4NC04OGNjLTQzNzAtYWExMC00MTBkYWY5OGY0ODciLCJleHAiOjE1ODQ5NDA2MTYsIm5iZiI6MCwiaWF0IjoxNTg0OTQwNTU2LCJpc3MiOiJodHRwczovL2lkLmRldi1wcm90b24uaXRlcjIwMDQubGFiLmVoZWFsdGguZXhjaGFuZ2UvYXV0aC9yZWFsbXMvbWFzdGVyIiwic3ViIjoiYzI5YjQzMGItMWZlNC00NzJhLWFjYTMtMzgzYTkxNTNmM2RjIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYWRtaW4tY2xpIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiNzMyOGUyMDItNzQyZC00ZTdkLTgwMWUtY2UyNGQ1NWUyZDZjIiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4ifQ.brCZauRzLeoAHvxtgJy6PYwZhbInVfbLA6HF7YHmwuGzoDoexj97P1s03r2G5bzYUkL93sejEFT5AkPeoZ0gpzHY3IsG3UF7Q9Qvk3t5c08CcAqOn4czhYYV91fwwBWMgTv4sQh0D-_bSq0OtI5g9Ojo0sHzxleYEUW8UYdFsQ_JvpOnZEM87CzUhBqsDDnQ4kPslOaaG2q5PPY3ccNKHexE0UkxjtOeUoIn6tdf-0Yqwc55JCMzWOZmt3pFqWKfm3-VZX5lT0UTL9ktrrLfFTIMfZb-Lmyp2g3_s_juUpkbgPpBPHgh6IGS6XaOnxgseq1Vz4h6pZ_A0O60Z8R5-w' \
    --data-raw '{
      ""username"": ""ayman"",
      ""enabled"": true,
      ""email"": "" aymanvirtual@gmail.com"",
      ""firstName"": ""ayman"",
      ""lastName"": ""ayman"",
      ""emailVerified"":true,
      ""credentials"": [
        {
          ""type"": ""password"",
          ""value"": ""ayman""
        }
      ],
      ""realmRoles"": [
        ""test-role""
      ]
    }'

**Step 3.** Get user details

    curl --location --request GET 'https://localhost/auth/admin/realms/MyRealm/users/d3bbe900-c7b3-49c5-9414-28f9433d3fc1' \
    --header 'Content-Type: application/json' \
    --header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJKZFVORmNDU19rWjdvZ3ZFSkI4VXZpMTNRb2hKbnh2VW9oeVpieXg2Vld3In0.eyJqdGkiOiJkMjgzYzA2NS1hMmJjLTQwNDctOWQ0MC01NWI4Nzg5YmNkNGUiLCJleHAiOjE1ODQ5NTM2NDgsIm5iZiI6MCwiaWF0IjoxNTg0OTUzNTg4LCJpc3MiOiJodHRwczovL2lkLmRldi1wcm90b24uaXRlcjIwMDQubGFiLmVoZWFsdGguZXhjaGFuZ2UvYXV0aC9yZWFsbXMvbWFzdGVyIiwic3ViIjoiYzI5YjQzMGItMWZlNC00NzJhLWFjYTMtMzgzYTkxNTNmM2RjIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYWRtaW4tY2xpIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiNjhmYmQ1YWQtMTkwMC00MzgyLThiMmYtYjhlYjExOTA4YmFhIiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4ifQ.KmWR31pAR4Tl3Mad7awvqeK8np3x5qaPL1tYWAPLDdYaT4nLzpGblmPOBNzYIaEdhs9iwGEmES5_VzrI4C7xUVsY-Zq4jl8iPYP7IawzqgXyrTVuvAO_DLdgdVRKidTT6I-Eh1F87AV14-pOf0GXQ4wnQl5qGl5S6XUTJkegx8eGCg5Qp-zAdHOkxvPL3KRtpgwJx5QCvce-1-wW5Fckk3a-61vXA-o9jUDnJGWTYUyAssVD8zRUs-hhAms1PoR4nW1tCd_9J7xiWmr2hN0-pHY-u5PjNlrxCyOx-3pkRzworZ9e2i0ff0x2dcivpzyDfqe__sdsLVQsiiD1S7ViHw'

**Problem:**    
The user is successfully created but it is not assigned a role (realmRole). After some more research I found that this behaviour is due to a bug in keycloak API ([stack overflow issue][1]).

***Is there any way to create a user and assign a realm role to it?***

**Update:**

According to some answers, we can use role mappers API calls to map a role to a user. Documentation about those operations: https://www.keycloak.org/docs-api/6.0/rest-api/index.html#_role_mapper_resource

    POST /{realm}/groups/{id}/role-mappings/realm

What are the groups in the above URL?

  [1]: https://stackoverflow.com/questions/57390389/the-realmroles-parameter-is-ignored-when-adding-a-user-via-the-keycloak-api
",60859417,"This url: `POST /{realm}/groups/{id}/role-mappings/realm` is used to assign a realm role to a group where `{id}` is the group id.

To assign a realm role to a user, use:
```
# Get the role lists
GET /{realm}/roles

# Get the user lists
GET /{realm}/users

# Assign your role to user
POST /{realm}/users/{userId}/role-mappings/realm
body :[{id: roleId, name: roleName]
```
your request could be:
```
curl --location --request POST 'https://localhost/auth/admin/realms/MyRealm/users/MyUserId/role-mappings/realm' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJKZFVORmNDU19rWjdvZ3ZFSkI4VXZpMTNRb2hKbnh2VW9oeVpieXg2Vld3In0.eyJqdGkiOiI4OGQ4Njk4NC04OGNjLTQzNzAtYWExMC00MTBkYWY5OGY0ODciLCJleHAiOjE1ODQ5NDA2MTYsIm5iZiI6MCwiaWF0IjoxNTg0OTQwNTU2LCJpc3MiOiJodHRwczovL2lkLmRldi1wcm90b24uaXRlcjIwMDQubGFiLmVoZWFsdGguZXhjaGFuZ2UvYXV0aC9yZWFsbXMvbWFzdGVyIiwic3ViIjoiYzI5YjQzMGItMWZlNC00NzJhLWFjYTMtMzgzYTkxNTNmM2RjIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYWRtaW4tY2xpIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiNzMyOGUyMDItNzQyZC00ZTdkLTgwMWUtY2UyNGQ1NWUyZDZjIiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4ifQ.brCZauRzLeoAHvxtgJy6PYwZhbInVfbLA6HF7YHmwuGzoDoexj97P1s03r2G5bzYUkL93sejEFT5AkPeoZ0gpzHY3IsG3UF7Q9Qvk3t5c08CcAqOn4czhYYV91fwwBWMgTv4sQh0D-_bSq0OtI5g9Ojo0sHzxleYEUW8UYdFsQ_JvpOnZEM87CzUhBqsDDnQ4kPslOaaG2q5PPY3ccNKHexE0UkxjtOeUoIn6tdf-0Yqwc55JCMzWOZmt3pFqWKfm3-VZX5lT0UTL9ktrrLfFTIMfZb-Lmyp2g3_s_juUpkbgPpBPHgh6IGS6XaOnxgseq1Vz4h6pZ_A0O60Z8R5-w' \
-d '[
  {
        ""id"": ""12345678-1234-5678-1234-567812345678"",
        ""name"": ""admin""
  }
]'
```
"
37115626,"Getting ""Invalid parameter: redirect_uri"" trying NODE.JS authentication with KeyCloak","I'm using Node.JS (express) and an NPM called [keycloak-connect][1] to connect to a keycloak server.<br/>
When I'm implementing the default mechanism as described to protect a route:

    app.get( '/about', keycloak.protect(), function(req,resp) {
        resp.send( 'Page: ' + req.params.page + '<br><a href=""/logout"">logout</a>');
    } );

I do get referred to keycloak, but with following error: ""**Invalid parameter: redirect_uri**""

**My query string is:** (xx for demonstration)<br/> `https://xx.xx.xx.xx:8443/auth/realms/master/protocol/openid-connect/auth?client_id=account&state=aa11b27a-8a0b-4a3b-89dc-cb8a303dbde8&redirect_uri=http%3A%2F%2Flocalhost%3A3002%2Fabout%3Fauth_callback%3D1&response_type=code`

**My keycloak.json is:** (xx for demonstration)

    {
      ""realm"": ""master"",
      ""realm-public-key"": ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwS00kUaH6OoERNSkFUwxEBxx2SsqmHu9oVQiPs6nlP9fNQm0cK2lpNPphbLzooZL6kivaC4VzXg20F3zY7jRDc4U/XHgXjZVZUXxJ0NeCI5ESDo00EV9xh9XL3xvXslmG0YLWpywtQSYc+XcGDkz87edokbHQIIlQc2sgoVKIKpajZyrI5wnyMhL8JSk+Mdo2T9DeNnZxPkauiKBwWFJReBO51gsoZ49cbD39FRa8pLi8W0TtXoESIf/eGUSdc3revVFR7cjzHUzxF0p0WrLsTA1aBCLkt8yhnq88NqcKsW5mkxRmhLdw20ODTdsmRtm68rjtusMwifo/dZLJ9v5eQIDAQAB"",
      ""auth-server-url"": ""https://xx.xx.xx.xx:8443/auth"",
      ""ssl-required"": ""external"",
      ""resource"": ""account"",
      ""credentials"": {
        ""secret"": ""9140d4e6-ed05-4899-a3c0-a9cf94ab407d""
      },
      ""use-resource-role-mappings"": true
    }
**keycloak configuration:**

[![enter image description here][2]][2]

[![enter image description here][3]][3]


  [1]: https://www.npmjs.com/package/keycloak-connect
  [2]: http://i.stack.imgur.com/ns3kO.jpg
  [3]: http://i.stack.imgur.com/O7rbb.jpg",37117339,"I guess you added a port to your client URLs in your client settings tab.

e.g.

    root url: https://demo.server.biz:443/cxf

just remove the port

    root url: https://demo.server.biz/cxf

the same goes for `Valid Redirect URIs` and `Web Origins`

# 1 Update
[![enter image description here][1]][1]

# 2 Update with your url
[![enter image description here][2]][2]


  [1]: http://i.stack.imgur.com/eUDnY.png
  [2]: http://i.stack.imgur.com/UvSa3.png"
52382531,Keycloak - how to allow linking accounts without registration,"I am managing a Keycloak realm with only a single, fully-trusted external IdP added that is intended to be the default authentication mechanism for users.

I do **not** want to allow user to register, i.e. I want to manually create a local Keycloak user, and that user should then be allowed to link his external IdP account to the pre-existing Keycloak account, having the email address as common identifier. Users with access to the external IdP but without an existing Keycloak account should not be allowed to connect.

I tried the following *First Broker Login* settings, but whenever a user tries to login, he gets an error message (code: `invalid_user_credentials`).

[![enter image description here][1]][1]

Do you have any idea what my mistake might be?

  [1]: https://i.stack.imgur.com/RXqY1.png",55643088,"Looks like they integrated this feature in version 4.5.0.

See [automatic account link docs][1].

Basically you need to create a new flow and add 2 alternative executions:

1. Create User If Unique

2. Automatically Link Brokered Account

  [1]: https://www.keycloak.org/docs/latest/server_admin/index.html#automatically-link-existing-first-login-flow"
48827811,Keycloak Access Token vs UserInfo token?,"How does the access token differ from user info token when using Keycloak? 

From OAuth2/OpenIDConnect I have understood that the access token gives information that the user has been authenticated 
and that you need to use the user info token to get more infomation about the user and its profile/roles etc. 

When I look at the access token in something like https://jwt.io/ vs. the UserInfo token. I am able to get the same information about the users profile & roles. 

Why is it like this, and how does the access token differ from user info token when using Keycloak? ",49009132,"I managed to figure out how to get different data whilst using Keyclok for these two endpoints: 

Keycloak provides functionality for ""OIDC Token and SAML Assertion Mappings"" and you can also ""control where the claim gets put.""
by using the buttons :
- Add to ID token
- Add to access token
- Add to userinfo
By setting ""Add to ID token"" and ""Add to access token"" to OFF for some of the mappers. 
These will not be included on the AccessToken where as they will be in the UserInfo response. 

http://www.keycloak.org/docs/latest/server_admin/index.html#_protocol-mappers


"
65941530,What is the uma_authorization role in Keycloak?,The role `uma_authorization` is apparently created by default in Keycloak. What is this role? Can I safely delete it?,65944694,"UMA - User-Managed Access. 

Keycloak [docs](https://www.keycloak.org/docs/latest/authorization_services/#_service_user_managed_access)."
62402630,Keycloak Docker container fails to start after restarting the container,"I have a Keycloak installation running as docker container in a docker-compose environment. Every night, my backup stops relevant containers, performs a DB and volume backup and restarts the containers again. For most it works, but Keycloak seems to have a problem with it and does not come up again afterwards. Looking at the logs, the error message is:

```
The batch failed with the following error: : 
keycloak           | WFLYCTL0062: Composite operation failed and was rolled back. Steps that failed:
keycloak           | Step: step-9
keycloak           | Operation: /subsystem=datasources/jdbc-driver=postgresql:add(driver-name=postgresql, driver-module-name=org.postgresql.jdbc, driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)
keycloak           | Failure: WFLYCTL0212: Duplicate resource [
keycloak           |     (""subsystem"" => ""datasources""),
keycloak           |     (""jdbc-driver"" => ""postgresql"")
keycloak           | ]
...
The batch failed with the following error: : 
keycloak           | WFLYCTL0062: Composite operation failed and was rolled back. Steps that failed:
keycloak           | Step: step-9
keycloak           | Operation: /subsystem=datasources/jdbc-driver=postgresql:add(driver-name=postgresql, driver-module-name=org.postgresql.jdbc, driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)
keycloak           | Failure: WFLYCTL0212: Duplicate resource [
keycloak           |     (""subsystem"" => ""datasources""),
keycloak           |     (""jdbc-driver"" => ""postgresql"")
keycloak           | ]
```

The `docker-compose.yml` entry for Keycloak looks as follows, important data obviously removed

```
  keycloak:
    image: jboss/keycloak:8.0.1
    container_name: keycloak
    environment:
      - PROXY_ADDRESS_FORWARDING=true
      - DB_VENDOR=postgres
      - DB_ADDR=db
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_PASSWORD=<password>
      - VIRTUAL_HOST=<url>
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=<url>
    volumes:
      - /opt/docker/keycloak-startup:/opt/jboss/startup-scripts
```

The volume I'm mapping is there to make some changes to WildFly to make sure it behaves well with the reverse proxy:

```
embed-server --std-out=echo

#  Enable https listener for the new security realm
/subsystem=undertow/ \
  server=default-server/ \
    http-listener=default \
      :write-attribute(name=proxy-address-forwarding, \
                       value=true)

#  Create new socket binding with proxy https port
/socket-binding-group=standard-sockets/ \
  socket-binding=proxy-https \
    :add(port=443)

#  Enable https listener for the new security realm
/subsystem=undertow/ \
  server=default-server/ \
    http-listener=default \
      :write-attribute(name=redirect-socket, \
                       value=""proxy-https"")
```

After stopping the container, its not starting anymore with the messages shown above. Removing the container and re-creating it works fine however. I tried to remove the volume after the initial start, this doesn't really make a difference either. I already learned that I have to remove the `KEYCLOAK_USER=admin` and `KEYCLOAK_PASSWORD` environment variables after the initial boot as otherwise the container complains that the user already exists and doesn't start anymore. Any idea how to fix that?
",62563081,"Update on 23rd of May 2021:

The issue has been resolved on RedHats Jira, it seems to be resolved in version 12. The related GitHub pull request can be found here: https://github.com/keycloak/keycloak-containers/pull/286

---

According to RedHat support, this is a known ""issue"" and not supposed to be fixed. They want to concentrate on a workflow where a container is removed and recreated, not started and stopped. They agreed with the general problem, but stated that currently there are no resources available. Stopping and starting the container is a operation which is currently not supported.

See for example https://issues.redhat.com/browse/KEYCLOAK-13094?jql=project%20%3D%20KEYCLOAK%20AND%20text%20~%20%22docker%20restart%22 for reference"
53883487,Is there any way to add custom attributes in Keycloak via REST API?,"How to add custom attributes in Keycloak via REST API? 
",53934701,"I guess you mean adding user attributes to the admin console by extending the theme - https://www.keycloak.org/docs/3.1/server_development/topics/custom-attributes.html Since that configures the admin console itself it does involve some configuration of files loaded by the keycloak app for a custom theme so I don't think the REST API alone will be enough. 

As @Xtreme Biker points out, anything you can do via clicks in the admin console you can do via the REST API as the console uses that API. You can perform the relevant actions in the admin console and check the network tab in the browser console to see what the REST calls are (note you may need to tell your browser not to clear the log between page loads). So if you can do it just with clicks in the browser then the REST API is enough. If you also need to modify configuration files then you'll need to do that part outside of the REST API. "
53564499,keycloak Invalid parameter: redirect_uri behind a reverse proxy,"How do you correctly configure NGINX as a proxy in front of Keycloak?

Asking & answering this as doc because I've had to do it repeatedly now and forget the details after a while.

This is specifically dealing with the case where Keycloak is behind a reverse proxy e.g. nginx and NGINX is terminating SSL and pushing to Keycloak. This is not the same issue as https://stackoverflow.com/questions/45352880/keycloak-invalid-parameter-redirect-uri although it produces the same error message.
",53564500,"The key to this is in the docs at 
https://www.keycloak.org/docs/latest/server_installation/index.html#identifying-client-ip-addresses

The `proxy-address-forwarding` must be set as well as the various `X-...` headers.

If you're using the Docker image from https://hub.docker.com/r/jboss/keycloak/ then set the env. arg `-e PROXY_ADDRESS_FORWARDING=true`.

    server {
      server_name api.domain.com;
    
      location /auth {
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
    
        proxy_pass          http://localhost:8080;
        proxy_read_timeout  90;
    
     }
    
      location / {
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
    
        proxy_pass          http://localhost:8081;
        proxy_read_timeout  90;
      }
    
    
    
        listen 443 ssl; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/api.domain.com/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/api.domain.com/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    
    }
    server {
        if ($host = api.domain.com) {
            return 301 https://$host$request_uri;
        } # managed by Certbot
    
    
      server_name api.domain.com;
        listen 80;
        return 404; # managed by Certbot
    }

If you're using another proxy the important parts of this is the headers that are being set:

    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;

Apache, ISTIO and others have their own means of setting these.
"
60622192,Keycloak: Session cookies are missing within the token request with the new Chrome SameSite/Secure cookie enforcement,"Recently my application using Keycloak stopped working with a 400 token request after authenticating.

What I found so far is that within the token request, the Keycloak cookies (AUTH_SESSION_ID, KEYCLOAK_IDENTITY, KEYCLOAK_SESSION) are not sent within the request headers causing the request for a token to fail and the application gets a session error.

By digging more, I found that Chrome blocks now cookies without SameSite attribute set, which is the case for the keycloak cookies and that's why they are never parsed within the token acquisition request after authenticating.

The error I get:- 

[![enter image description here][1]][1]
https://blog.chromium.org/2019/10/developers-get-ready-for-new.html

https://adzerk.com/blog/chrome-samesite/

**This is very serious as it blocks applications secured by Keycloak library  to be able to communicate with the keycloak server.**


  [1]: https://i.stack.imgur.com/YijeI.jpg

**Update**: With the new google chrome cookie SameSite attribute, any third party library using cookies without SameSite attribute properly set, the cookie will be ignored.
https://blog.chromium.org/2019/10/developers-get-ready-for-new.html

https://www.chromium.org/updates/same-site
",61399657,"For those who are looking for a short time solution until they update their libraries.

You can do the following in Chrome:-

 - Go to chrome://flags/
 - Search for ""Samesite""
 - Disable ""SameSite by default cookies"" and ""Cookies without SameSite must be secure"" flags.
 - Relaunch.
"
34552125,Using spring security annotations with keycloak,"I'm just a beginner in Spring Security, but I would like to know is it possible to configure keycloak in a way that I can use `@PreAuthorize`, `@PostAuthorize`, `@Secured` and other annotations.
For example, I've configured the `keycloak-spring-security-adapter` and Spring Security in my simple Spring Rest webapp so that I have access to Principal object in my controller, like this:

    @RestController
    public class TMSRestController {
    
         @RequestMapping(""/greeting"")
         public Greeting greeting(Principal principal, @RequestParam(value=""name"") String name) {
            return new Greeting(String.format(template, name));
         }
    ...
    }

But when I try this (just an example, actually I want to execute custom EL expression before authorization):

    @RestController
    public class TMSRestController {

        @RequestMapping(""/greeting"")
        @PreAuthorize(""hasRole('ADMIN')"")
        public Greeting greeting(Principal principal, @RequestParam(value=""name"") String name) {
            return new Greeting(String.format(template, name));
        }
    ...
    }


I get exception: 
> org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext

In my spring security config I enabled global method security: <global-method-security pre-post-annotations=""enabled""/>

What do I need to make this spring security annotations work? Is it possible to use this annotation in this context at all?",34800091,"You still have to configure Spring Security using Keycloak. Take a look at the [adapter documentation][1] for an annotation based configuration. Once that's set up your Spring Security annotations will work on authorized calls. 

[1]: http://keycloak.github.io/docs/userguide/keycloak-server/html/ch08.html#spring-security-adapter"
63073772,Keycloak javascript adapter `keycloak.init` load 404 iframe,"I am trying to integrate Keycloak for my client side application using javascript adapter `keycloak-js`.

However, I can't seem to make it work. This is my code

```
const keycloak = new Keycloak({
    realm: 'my-realm',
    url: 'http://localhost:8080/auth/',
    clientId: 'my-client',
});

try {
    const authenticated = await keycloak.init();
    console.log(authenticated);
} catch (e) {
    console.log(e);
}
```

It doesn't return anything, not even error or anything from the callback. I only have
`GET http://localhost:8080/auth/realms/my-realm/protocol/openid-connect/3p-cookies/step1.html 404 (Not Found)`
Not sure what did I do wrong? I follow the documentation but I can't find anything about this behaviour
If I type the url above in browser, I see this 

[![enter image description here][1]][1]

Is there anything I can do?

**EDIT:** I managed to make it work using this code by matching keycloak server with keycloak-js version. **Upgrading server and keycloak-js version to 11.0.2 does work for me as well as downgrading both version to 10.0.2**

This is the client configuration that I'm using
[![enter image description here][2]][2]

In the code example above, I can see `console.log(isAuthorised);` return `false` in dev tools, and if I do `const isAuthorised = await keycloak.init({ onLoad: 'login-required' });`, It will redirect me to login page and redirect me back to this page after successful login. Hope this helps.


  [1]: https://i.stack.imgur.com/RaNXv.png
  [2]: https://i.stack.imgur.com/uZ0h4.png",63103132,"It's probably a version mismatch between `keycloak-js` and your keycloak server. I was using the newest `keycloak-js` version `11.0.0` with a keycloak server version of `10.0.1`, which lead to this exact error. Downgrading `keycloak-js` on the client side to `10.0.2` did the trick for me. (Haven't tried to upgrade the keycloak server yet, but most likely works as well)"
48638584,Keycloak: Authenticate user with a custom JWT,"**Situation:** We use keycloak to authenticate users in our web application (A) through normal browser authentication flow using the JavaScript adapter. This works perfectly!

**Goal:** Now, a new group of users should be able to access A. But they log in with username and password in a trusted third-party application (B) without Keycloak. In B they have a link to A with a custom JWT (essentially containing username and roles) as a query parameter. So when the user clicks on the link, he lands on our application entry point where we are able to read the JWT out of the URL. What needs to happen now is some sort of token exchange. We want to send this custom JWT to Keycloak, which sends back an access token analog to the normal login process. 

**Question:** Is there built-in support in Keycloak for such a usecase?

**Attempts:** 

I tried to create a confidential client with ""Signed JWT"" as ""[Client Authenticator][1]"" as suggested in the docs. After some testing I don't think this is the right track, even if the name is promising.

Another track was ""[Client suggested identity provider][2]"" by implementing a custom identity provider. But I don't see, how I can send the JWT within the request.

Currently I'm trying to use the [Autentication SPI][3] to extend the authentication flow with a custom authenticator.

Maybe it is much simpler than I think. Can anyone lead me in the right direction?


  [1]: http://www.keycloak.org/docs/3.2/securing_apps/topics/oidc/java/client-authentication.html
  [2]: http://www.keycloak.org/docs/3.0/server_admin/topics/identity-broker/suggested.html
  [3]: http://www.keycloak.org/docs/3.0/server_development/topics/auth-spi.html",48880751,"So I was finally able to solve it with the Authentication SPI mentioned in the question.

In Keycloak, I made a copy of the ""browser"" authentication flow (since you can not modify built-in flows) and introduced an additional step ""Portal JWT"" (see picture below). I then bound it to ""Browser Flow"" in the ""Bindings"" tab

[![Custom Authentication Flow][1]][1]

Behind ""Portal JWT"" is my custom authenticator which extracts the JWT from the query parameter in the redirect uri and parses it to get username and roles out of it. The user is then added to keycloak with a custom attribute ""isExternal"". Here is an extract of it:

    public class JwtAuthenticator implements Authenticator {

    private final JwtReader reader;

    JwtAuthenticator(JwtReader reader) {
        this.reader = reader;
    }

    @Override
    public void authenticate(AuthenticationFlowContext context) {
        Optional<String> externalCredential = hasExternalCredential(context);
        if (externalCredential.isPresent()) {
            ExternalUser externalUser = reader.read(context.getAuthenticatorConfig(), externalCredential.get());
            String username = externalUser.getUsername();
            UserModel user = context.getSession().users().getUserByUsername(username, context.getRealm());
            if (user == null) {
                user = context.getSession().users().addUser(context.getRealm(), username);
                user.setEnabled(true);
                user.setSingleAttribute(""isExternal"", ""true"");
            }
            for (String roleName : externalUser.getRoles()) {
                RoleModel role = context.getRealm().getRole(roleName);
                if (role == null) {
                    role = context.getRealm().addRole(roleName);
                }
                user.grantRole(role);
            }
            context.setUser(user);
            context.success();
        } else {
            context.attempted();
        }
    }

    private Optional<String> hasExternalCredential(AuthenticationFlowContext context) {
        String redirectUri = context.getUriInfo().getQueryParameters().getFirst(""redirect_uri);
        try {
            List<NameValuePair> queryParams = URLEncodedUtils.parse(new URI(redirectUri), ""UTF-8"");
            Optional<NameValuePair> jwtParam = queryParams.stream()
                    .filter(nv -> ""jwt"".equalsIgnoreCase(nv.getName())).findAny();
            if (jwtParam.isPresent()) {
                String jwt = jwtParam.get().getValue();
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""JWT found: "" + jwt);
                }
                return Optional.of(jwt);
            }
        } catch (URISyntaxException e) {
            LOG.error(""Redirect URL not as expected: "" + redirectUri);
        }
        return Optional.empty();
    }



  [1]: https://i.stack.imgur.com/DgnaR.png"
49150219,Building a Java OAuth2.0 authorization server with Keycloak,"> # TL;DR
> 
> - Objective: Java authorization server:
>   - OAuth2.0 authorization code grant flow with fine-grained permissions (not a mere SSO server)
>   - User management and authentication: custom database
>   - Client management and authentication: Keycloak
> - Questions: **What are the best practices for implementing a Java authorization server with applicative permissions handling backed on Keycloak?**
>  - What Keycloak adapter/API should I use in my development?
>  - How should the users be managed/appear in Keycloak if they are to appear at all?

# Forewarning

I am quite the beginner with Keycloak and, though I think I understand the main principles, it seems to be a rich tool and I fear I may still be mistaken about some aspects of the best ways to use it. Please do not hesitate to correct me.

# Context

We are looking at implementing an API requiring our users (henceforth ""users"") to grant permissions to third party applications (henceforth ""clients"").

Our users are stored in a custom existing database-based user management system. As for our clients, we are thinking of using [Keycloak](https://www.keycloak.org).

The users consent will be given using an OAuth2.0 Authorization code grant flow. They will log in, specify which permissions they grant and which they deny, and the client then retrieves the access token it will use to access the API.

It is my understanding that Keycloak can handle the authorization token but it should not know anything applicative, which our permissions are. As a consequence, I thought of building a custom authorization server which will use Keycloak for all identity/authentication problems but will handle the applicative permissions by itself.

Then, we will use Keycloak for client authentication and authorization code/access token management, and an applicative part will check the permissions.

# Problem

Besides my first experimenting, I've been roaming the Internet for a week now and I'm surprised as I thought this would be quite a standard case. Yet I found next-to-nothing, so maybe I'm not searching correctly.

I've found many Spring/Spring Boot tutorials<sup>1</sup> on how to make a ""simple authorization server"". Those are mainly SSO servers though, and few do manage permissions, with the exception of those mentioned in [this SO answer](https://stackoverflow.com/a/17004631/1734119)<sup>2</sup>. That I think we can deal with.

The real problem I have, and that none of the tutorials I have found are treating, is the following:

## How do I integrate Keycloak in this authorization server?

I've been having a look at the [available Java Adapters](http://www.keycloak.org/docs/3.4/securing_apps/index.html#java-adapters). They look OK when it comes to authenticate but I did not see hints about how to manage clients from a custom authorization server (ie administer the realm).

I therefore **suppose I should use the admin API**. Am I correct and is it good practice? I saw no adapter for that, so I suppose I should then use the REST API.

I also wonder **how we should integrate our users in design?** Should they be duplicated inside Keycloak? In this case, should we use Keycloak's admin API to push the data from the authorization server or is there a better way?

Finally, am I missing some other obvious point?

Sorry for the long message and the many questions, but it all boils down to one question in the end:

## What are the best practices when building an authorization server using Keycloak as a backbone?

---

<sub>1. Some examples: 
[Spring Boot OAuth2 tutorial](https://spring.io/guides/tutorials/spring-boot-oauth2/) -
[A blog post](https://techeye7.wordpress.com/2017/11/24/oauth-2-authorization-code-grant-type-example/) -
[Another blog post](http://www.hascode.com/2016/03/setting-up-an-oauth2-authorization-server-and-resource-provider-with-spring-boot/)</sub>

<sub>2. I've mainly focused on [the sample app provided by Spring Security OAuth](https://github.com/spring-projects/spring-security-oauth)</sub>",49364252,"**Building Java OAuth2.0 authorization server with Keycloak**

This is possible but is bit tricky and there is lot of thing which needs to be customised.

You can derive some motivation from below repo.

[keycloak-delegate-authn-consent][1]

**Building custom Java OAuth2.0 authorization server with [MITREid][2]**

If you are open to use other implementations of Oauth and OIDC,I can suggest you MITREid which is referrence implementation of OIDC and could be customized to a great deal.Below is the link to its repo and its open source.

I myself used this to requirement similar to yours and it is highly customizable and easy to implement.


https://github.com/mitreid-connect/OpenID-Connect-Java-Spring-Server


MITREid Connect uses Spring Security for its authentication, so you can put whatever component you like into that space. There are lots of good resources on the web about how to write and configure Spring Security filters for custom authentication mechanisms.

You'll want to look at the user-context.xml file for where the user authentication is defined. In the core project this is a simple username/password field against a local database. In others like the LDAP overlay project, this connects to an LDAP server. In some systems, like MIT's ""oidc.mit.edu"" server, there are actually a handful of different authentication mechanisms that can be used in parallel: LDAP, kerberos, and certificates in that case.

Note that in all cases, you'll still need to have access to a UserInfo data store somewhere. This can be sourced from the database, from LDAP, or from something else, but it needs to be available for each logged in user.

The MITREid Connect server can function as an OpenID Connect Identity Provider (IdP) and an OAuth 2.0 Authorization Server (AS) simultaneously. The server is a Spring application and its configuration files are found in openid-connect-server-webapp/src/main/webapp/WEB-INF/ and end in .xml. The configuration has been split into multiple .xml files to facilitate overrides and custom configuration.


  [1]: https://github.com/Hitachi/PoV-keycloak-delegate-authn-consent
  [2]: https://github.com/mitreid-connect"
50243088,Keycloak 4.0.0 Beta 2 with Spring Boot 2,"When I try to use keycloak-spring-boot-starter(+keycloak-adapter-bom). I get an error. Am I missing something?

I have keycloack running properly. If I try to remove the keycloak dependencies from my pom file, the Spring Boot application also works fine. 

***Java.lang.IllegalStateException: Failed to introspect Class [org.keycloak.adapters.springboot.KeycloakAutoConfiguration] from ClassLoader*** 



    java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.mbeanExporter
    	at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:108) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:179) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:141) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:117) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:328) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:233) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:694) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:532) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at com.harmonies.chords.cloudfactory.CloudFactoryApplication.main(CloudFactoryApplication.java:14) [classes/:na]
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
    	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
    	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    Caused by: java.lang.IllegalStateException: Failed to introspect Class [org.keycloak.adapters.springboot.KeycloakAutoConfiguration] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1b9e1916]
    	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:659) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:556) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:541) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:599) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:724) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:665) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:633) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1489) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1012) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanTypeForNonAliasDefinition(BeanTypeRegistry.java:164) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.addBeanType(BeanTypeRegistry.java:153) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.updateTypesIfNecessary(BeanTypeRegistry.java:203) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:115) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:265) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:254) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:196) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:116) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	... 22 common frames omitted
    Caused by: java.lang.NoClassDefFoundError: org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizer
    	at java.base/java.lang.Class.getDeclaredMethods0(Native Method) ~[na:na]
    	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3139) ~[na:na]
    	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2266) ~[na:na]
    	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:641) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	... 39 common frames omitted
    Caused by: java.lang.ClassNotFoundException: org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer
    	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582) ~[na:na]
    	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185) ~[na:na]
    	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496) ~[na:na]
    	... 43 common frames omitted
    
    2018-05-09 00:04:18.072  INFO 5898 --- [  restartedMain] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@1cc24c32: startup date [Wed May 09 00:04:17 CEST 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6f034cb2
    2018-05-09 00:04:18.074  WARN 5898 --- [  restartedMain] o.s.boot.SpringApplication               : Unable to close ApplicationContext
    
    java.lang.IllegalStateException: Failed to introspect Class [org.keycloak.adapters.springboot.KeycloakAutoConfiguration] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@1b9e1916]
    	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:659) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:556) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.doWithMethods(ReflectionUtils.java:541) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.util.ReflectionUtils.getUniqueDeclaredMethods(ReflectionUtils.java:599) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod(AbstractAutowireCapableBeanFactory.java:724) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineTargetType(AbstractAutowireCapableBeanFactory.java:665) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType(AbstractAutowireCapableBeanFactory.java:633) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean(AbstractBeanFactory.java:1489) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:420) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:390) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:511) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:503) ~[spring-beans-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1198) ~[spring-context-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	at org.springframework.boot.SpringApplication.getExitCodeFromMappedException(SpringApplication.java:889) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.getExitCodeFromException(SpringApplication.java:875) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.handleExitCode(SpringApplication.java:861) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.handleRunFailure(SpringApplication.java:810) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    	at com.harmonies.chords.cloudfactory.CloudFactoryApplication.main(CloudFactoryApplication.java:14) [classes/:na]
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
    	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    	at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
    	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.0.1.RELEASE.jar:2.0.1.RELEASE]
    Caused by: java.lang.NoClassDefFoundError: org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizer
    	at java.base/java.lang.Class.getDeclaredMethods0(Native Method) ~[na:na]
    	at java.base/java.lang.Class.privateGetDeclaredMethods(Class.java:3139) ~[na:na]
    	at java.base/java.lang.Class.getDeclaredMethods(Class.java:2266) ~[na:na]
    	at org.springframework.util.ReflectionUtils.getDeclaredMethods(ReflectionUtils.java:641) ~[spring-core-5.0.5.RELEASE.jar:5.0.5.RELEASE]
    	... 25 common frames omitted
    Caused by: java.lang.ClassNotFoundException: org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer
    	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582) ~[na:na]
    	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185) ~[na:na]
    	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496) ~[na:na]
    	... 29 common frames omitted",50267517,"I had the same problem. Just make sure you include the spring boot 2 starter and don't use the adapter directly.

    compile 'org.keycloak:keycloak-spring-boot-2-starter:4.0.0.Beta2'

"
57430811,Changing default port of keycloak in docker,I have logged in to virtual machine in docker but I can't find standalone.sh It isn't in /bin. I don't know also how to write dockerfile which set -Djboss.socket.binding.port-offset=100,57432237,"You can pass port as -Djboss.http.port parameter, for example:

     docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 11111:11111 jboss/keycloak -Djboss.http.port=11111
"
69254441,How to Disable user account after 5 consecutive failed login attempts using Keycloak,"I have a use case where user should be disabled when he enter wrong password 5 consecutive times.
I cant find any keycloak password policy to disable user when he enter wrong password 5 consecutive times.",69256688,"To enable Consecutive Failed Login Defence you need to enable ""Max Login Failures"" from Brute Force Detection.
Steps:

 1. Login to Keycloak Admin Console
 2. Select Realms from List
 3. Go To Realm Settings >> Security Defenses >> Brute Force Detection
 4. Enable **Brute Force Detection**
 5. Set **Max Login Failures** to 5

Refer screenshot for steps[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/w9y74.jpg"
57974630,OAuth2 client credentials flow via Spring Boot Keycloak integration,"My application consists of:

 - backend/resource server
 - UI webapp
 - keycloak

The UI is talking with the backend server via RESTful API using the keycloak client with authorization code grant flow. This is working fine.

Now, I need the additional possibility to access resource of the backend using a system/service account (with usually more permissions than the user). How would you implement this requirement? I thought the client credentials flow would be useful here.

Is it possible to use the OAuth2 client credentials flow with the keycloak client for Spring Boot? I found examples that used the Spring Security OAuth2 client features to achieve a client credentials flow but that feels weird because I already use the keycloak client for the OAuth thing.

## Edit: Solution ##
Thanks for your answers which helped me a lot. In my UI webapp, I am now able to communicate with the backend either by using the authenticated user OAuth2 token or by using the token from the client credentials flow of my UI service account. Each way has its own `RestTemplate`, the first is done via the keycloak integration and second is done by Spring Security OAuth2 as explained [here](https://stackoverflow.com/questions/46073485/keycloak-spring-security-client-credential-grant/46400975#46400975).",58117735,"Following @dmitri-algazin you to implement the workflow you have basically two options:

1. If you want to cover other IdMs besides Keycloak which solves somehow the [Single Responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), I would use `RestTemplate`. Below you can find the variables:

```
	//Constants
	@Value(""${keycloak.url}"")
    private String keycloakUrl;
	
	@Value(""${keycloak.realm}"")
    private String keycloakRealm;
	
	@Value(""${keycloak.client_id}"")
    private String keycloakClientId;
	
	RestTemplate restTemplate = new RestTemplate();
	private static final String BEARER = ""BEARER "";
```

First you need to generate the access token:

```
	@Override
	public AccessTokenResponse login(KeycloakUser user) throws NotAuthorizedException {
		try {
			String uri = keycloakUrl + ""/realms/"" + keycloakRealm + 
					""/protocol/openid-connect/token"";
			String data = ""grant_type=password&username=""+
					user.getUsername()+""&password=""+user.getPassword()+""&client_id=""+
					keycloakClientId;
			
			HttpHeaders headers = new HttpHeaders();
			headers.set(""Content-Type"", ""application/x-www-form-urlencoded"");

			HttpEntity<String> entity = new HttpEntity<String>(data, headers);
			ResponseEntity<AccessTokenResponse> response = restTemplate.exchange(uri, 
					HttpMethod.POST, entity, AccessTokenResponse.class);			
			
	   		if (response.getStatusCode().value() != HttpStatus.SC_OK) {
	    		log.error(""Unauthorised access to protected resource"", response.getStatusCode().value());
	    		throw new NotAuthorizedException(""Unauthorised access to protected resource"");
			}
			return response.getBody();
		} catch (Exception ex) {
    		log.error(""Unauthorised access to protected resource"", ex);
    		throw new NotAuthorizedException(""Unauthorised access to protected resource"");
		} 
	}
```

And then with the token you can retrieve information from the users:

```
	@Override
	public String user(String authToken) throws NotAuthorizedException {
        
        if (! authToken.toUpperCase().startsWith(BEARER)) {
            throw new NotAuthorizedException(""Invalid OAuth Header. Missing Bearer prefix"");
        }
        
        HttpHeaders headers = new HttpHeaders();
        headers.set(""Authorization"", authToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);
		
		ResponseEntity<AccessToken> response = restTemplate.exchange(
				keycloakUrl + ""/realms/"" + keycloakRealm + ""/protocol/openid-connect/userinfo"", 
				HttpMethod.POST, 
				entity, 
				AccessToken.class);

   		if (response.getStatusCode().value() != HttpStatus.SC_OK) {
            log.error(""OAuth2 Authentication failure. ""
            		+ ""Invalid OAuth Token supplied in Authorization Header on Request. Code {}"", response.getStatusCode().value());
    		throw new NotAuthorizedException(""OAuth2 Authentication failure. ""
    				+ ""Invalid OAuth Token supplied in Authorization Header on Request."");
        }
   		
		log.debug(""User info: {}"", response.getBody().getPreferredUsername());
   		return response.getBody().getPreferredUsername();
	}
```

You can substitute this URL by the one provided by @dimitri-algazin to retrieve all the users information.

2. It is possible to use the Keycloak dependencies:

```
		<!-- keycloak -->
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-admin-client</artifactId>
			<version>3.4.3.Final</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
			<version>3.1.4.Final</version>
		</dependency>
```

And use the classes to generate the token:

```
		    Keycloak keycloak = KeycloakBuilder
		            .builder()
		            .serverUrl(keycloakUrl)
		            .realm(keycloakRealm)
		            .username(user.getUsername())
		            .password(user.getPassword())
		            .clientId(keycloakClientId)
		            .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(10).build())
		            .build();

			return keycloak.tokenManager().getAccessToken();
```

The examples are extracted from [here](https://github.com/AriHealth/keycloak-auth). We also uploaded the [image to Docker Hub](https://hub.docker.com/r/arihealth/oauth-easy) to facilitate the interaction with Keycloak. For this reason we started with option 2). Right now we are in the process to cover other IdMs and we went for option 1) in order to avoid including extra dependencies. Conclusion:

> I would go for **option 2** if you stick to Keycloak because classes include extra functionalities for Keycloak tool.
> I would go for **option 1** for further coverage and other OAuth 2.0 tools."
53224680,Retrieve Custom Attribute from JavaScript (using Javascript Adapter) Keycloak,"I have a keycloak user with custom attributes like below.
[![keycloak custom attribute][1]][1]

I use Reactjs for front-end. I want to retrieve the custom attribute from the javascript side. Like this answer states.
 
https://stackoverflow.com/a/32890003/2940265

But I can't find how to do it on the javascript side.

I debugged in Chrome but I can't find a suitable result for custom attributes.

Please help


  [1]: https://i.stack.imgur.com/QDIIE.png",53262322,"I found the answer. 

I will post here, because someone may find it useful.

Well, You can add custom attributes to the user but you need extra configurations to retrieve it from the javascript side. For Beginner ease, I will write the answer from Adding customer to retrieving the attribute from javascript (in my case react js).

Let's add custom attributes to a user.

login into keycloak and choose your realm (if you have multiple realms unless you will automatically login to realm)

After that select **Users -> View all users** 
Select your user in my case it's **Alice**
Select **Attributes** and add custom attributes (in my case I added custom attribute call **companyId** like below)

[![enter image description here][1]][1]

Now click **Save**

Now we have to Map Custom attribute with our keycloak client.
To front end to use keycloak you must have client in **Clients** (left side bar)
If you haven't you have to configure a client for that. In my case my client is **test-app** 

Therefor select **Clients -> test-app -> Mappers** 
Now we have to create Mapper. Click **Create**

For **Token Claim Name** you should give your custom attributes key (in my case it is **companyId**) for my ease, I use companyId for **Name, Realm Role prefix, Token Claim Name**. You should choose **User Attribute** in **Mapper Type** and **String** for **Claim JSON Type** 

After that click Save. Now you can get your custom attribute from javascript.

let say your keycloak JavaScript object is **keycloak**, you can get companyId using keycloak.

    let companyId = keyCloak.idTokenParsed.companyId;

sample code would be like below (my code in react.js)

    keyCloak.init({
        onLoad: 'login-required'
    }).success(authenticated => {
        if (authenticated) {
            if (hasIn(keyCloak.tokenParsed, 'realm_access')) {
                if (keyCloak.tokenParsed.realm_access.roles === []) {
                    console.log(""Error: No roles found in token"")
                } else {
                    let companyId = keyCloak.idTokenParsed.companyId;
                }
            } else {
                console.log(""Error: Cannot parse token"");
            }
        } else {
            console.log(""Error: Authentication failed"");
        }
    }).error(e => {
        console.log(""Error: "" + e);
        console.log(keyCloak);
    });

Hope somebody find this answer useful, because I could find an answer for JavaScript. Happy coding :)

  [1]: https://i.stack.imgur.com/kFWVZ.png"
47069345,How to use Spring Security RemoteTokenService with Keycloak,"I setup a Keycloak server. Configured the realm and client and so on.
I managed successfully to write a Spring Boot service with ""org.keycloak:keycloak-spring-boot-starter"" and secured my RestController. Works like a charm.

But when I try to use Spring Security (without the keycloak specific dependencies) I am stuck.

here is my gradle:

    dependencies {
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security.oauth:spring-security-oauth2')

	compile('org.springframework.boot:spring-boot-starter-web')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

This is my SecurityConfig:

    @Configuration
    @EnableResourceServer
    public class ResourceServerConfiguration extends 
    ResourceServerConfigurerAdapter {

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers(""/person/**"").hasRole(""DEMO_SPRING_SECURITY"")
            .anyRequest().authenticated()
            .and().formLogin().disable();
    }

    @Override
    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {

        resources.resourceId(""demo-client"");
        RemoteTokenServices tokenServices = new RemoteTokenServices();
        tokenServices.setCheckTokenEndpointUrl(
            ""http://localhost:8280/auth/realms/demo-realm/protocol/openid-connect/token/introspect"");
        tokenServices.setClientId(""demo-client"");
        tokenServices.setClientSecret(""80e19056-7770-4a4a-a3c4-06d8ac8792ef"");
        resources.tokenServices(tokenServices);
    }
    }

Now I try the access the server:

1. get an access token (via REST client)
the decoded JWT looks like this:

>     {
>     ""jti"": ""78c00562-d80a-4f5a-ab08-61ed10cb575c"",
>     ""exp"": 1509603570,
>     ""nbf"": 0,
>     ""iat"": 1509603270,
>     ""iss"": ""http://localhost:8280/auth/realms/demo-realm"",
>     ""aud"": ""demo-client"",
>     ""sub"": ""6ee90ba4-2854-49c1-9776-9aa95b6ae598"",
>     ""typ"": ""Bearer"",
>     ""azp"": ""demo-client"",
>     ""auth_time"": 0,
>     ""session_state"": ""68ce12fb-3b3f-429d-9390-0662f0503bbb"",
>     ""acr"": ""1"",
>     ""client_session"": ""ec0113e1-022a-482a-a26b-e5701e5edec1"",
>     ""allowed-origins"": [],
>     ""realm_access"": {
>       ""roles"": [
>         ""demo_user_role"",
>         ""uma_authorization""
>       ]
>     },
>     ""resource_access"": {
>       ""account"": {
>         ""roles"": [
>           ""manage-account"",
>           ""manage-account-links"",
>           ""view-profile""
>         ]
>       }
>     },
>     ""name"": ""Jim Panse"",
>     ""preferred_username"": ""demo-user"",
>     ""given_name"": ""Jim"",
>     ""family_name"": ""Panse"",
>     ""email"": ""user@dmoain.com""
>     }

But I get an AccessDeniedException.

>     2017-11-02 07:18:05.344 DEBUG 17637 --- [nio-8080-exec-1] o.s.s.w.a.i.FilterSecurityInterceptor    : Previously Authenticated:
> org.springframework.security.oauth2.provider.OAuth2Authentication@1f3ee7e1:
> Principal: demo-client; Credentials: [PROTECTED]; Authenticated: true;
> Details: remoteAddress=127.0.0.1, tokenType=BearertokenValue=<TOKEN>;
> Not granted any authorities 2017-11-02 07:18:05.348 DEBUG 17637 ---
> [nio-8080-exec-1] o.s.s.access.vote.AffirmativeBased       : Voter:
> org.springframework.security.web.access.expression.WebExpressionVoter@14032696,
> returned: -1 2017-11-02 07:18:05.353 DEBUG 17637 --- [nio-8080-exec-1]
> o.s.s.w.a.ExceptionTranslationFilter     : Access is denied (user is
> not anonymous); delegating to AccessDeniedHandler
> 
> org.springframework.security.access.AccessDeniedException: Access is
> denied

I debuged the RemoteTokenService and found out the  Keycloak responds with the exact same accesstoken. Which is fine. 
But than the `DefaultAccessTokenConverter` tries to read the user roles from a field `authorities` which not exists. And the `OAuth2WebSecurityExpressionHandler` evaluates that the user doenst have any roles. --> access denied

So my question:

What is neccessary to make Spring Security work with Keycloak access tokens?




",47077307,"Via keycloak admin console you can create a token mapper of type __User Realm Role__ with claim name ""authorities"" for your client ""demo-client"".
Then the access token contains the role names in this attribute and no custom _DefaultAccessTokenConverter_ is needed."
54900598,Keycloak: REST url for custom endpoint,"Implementing a custom rest endpoint in keycloak I used these example:

https://github.com/keycloak/keycloak/tree/master/examples/providers/domain-extension/src/main/java/org/keycloak/examples/domainextension/rest

After embedding the provider to keycloak it's loaded during keycloak
startup. Guess that's fine. In server info I can see the the endpoint as
well.


Problem:

How may I call that endpoint?

Do I need to registrate the endpoint or mount it on a client?

(If so which settings does the client need (admin rights etc...)

What is the URL for calling the endpoint?",54920607,"Your don't need register or mount your endpoint.
the effective url is calculated with the given id in your ProviderFactory.

    {{keycloakUrl}}/auth/realms/{{reamlName}}/{{id in providerFactory}}/...

For your example the url is

    {{keycloakUrl}}/auth/realms/{{realmName}}/example/companies"
72128765,Import realm in Keycloak:18.x,"I cannot import any realms into Keycloak 18.0.0. That's the Quarkus, and not the Wildfly distribution anymore. Documentation [here][1] says it should be pretty simple, and by mounting my exported realm.json file into /opt/keycloak/data/import/...json it actually TRIES to import it, but it ends with :

`""[org.keycloak.quarkus.runtime.cli.ExecutionExceptionHandler] (main) ERROR: Script upload is disabled""`. 

Known to be removed, and the old `-Dkeycloak.profile.feature.upload_scripts=enabled` won't work anymore. OK.
But then what's the way to do import any realms on startup? That'd be used to distribute a ready-made local stack without any handcrafting needed to launch. I could do it with running SQL commands, but that's way too hacky to my taste.

**Compose file :** 

      cp-keycloak:
    image: quay.io/keycloak/keycloak:18.0.0
    environment:
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://cp-keycloak-database:3306/keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: root
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 8082:8080
    volumes:
      - ./data/local_stack/init.keycloak.json:/opt/keycloak/data/import/main-realm.json:ro
    entrypoint: ""/opt/keycloak/bin/kc.sh start-dev --import-realm""

**The output :** 

    cp-keycloak_1           | 2022-05-05 14:07:26,801 ERROR [org.keycloak.quarkus.runtime.cli.ExecutionExceptionHandler] (main) ERROR: Failed to start server in (development) mode
    cp-keycloak_1           | 2022-05-05 14:07:26,802 ERROR [org.keycloak.quarkus.runtime.cli.ExecutionExceptionHandler] (main) ERROR: Failed to import realm: Main-Realm
    cp-keycloak_1           | 2022-05-05 14:07:26,803 ERROR [org.keycloak.quarkus.runtime.cli.ExecutionExceptionHandler] (main) ERROR: Script upload is disabled

Thanks

  [1]: https://www.keycloak.org/server/importExport",72128985,"This might be caused because inside of your realm .json there is references to some configuration that is using the deprecated `upload script` feature.

Try to removed it, export the json and them try to imported again (this time without the upload script feature.


From the comments (credits to [jfrantzius][1]): 

> See here for what you either need to remove or replace in your
> realm-export.json:
> https://github.com/keycloak/keycloak/issues/11664#issuecomment-1111062102
> . We had to replace the entries, see also here
> https://github.com/keycloak/keycloak/discussions/12041#discussioncomment-2768768


  [1]: https://stackoverflow.com/users/1245428"
62259957,Does keycloak support mongodb as a database?,"We can use PostgreSQL or MySQL as DB for keycloak but I want to use mongo DB as database for keycloak.
is there any way to implement this ?",62268942,"Although MongoDB was once supported in Keycloak, it has since been removed. Per the offical Keycloak documentation, a relational database is required for the persistent datastore:

https://www.keycloak.org/docs/latest/server_installation/index.html#_database"
57808046,Does Keycloak support basic Authentication?,"Does Keycloak support basic Authentication (Authorization header that contains the word Basic word followed by a space and a base64-encoded string username:password ) and if so how I can configure realm and client settings for it ?
I want to secure my rest api with Keycloak and support also basic Authentication as an option.",57819293,"Yes that's possible for clients with `Access Type: confidential` and `Direct Access Grants Enabled`. You can find more details on these settings in the [documentation](https://www.keycloak.org/docs/latest/server_admin/index.html#oidc-clients).

You also need to enable `enable-basic-auth` and supply your `credentials`in your application settings. Consult the [documentation](https://www.keycloak.org/docs/latest/securing_apps/index.html#_java_adapter_config) for more details."
54010314,Using KeyCloak(OpenID Connect) with Apache SuperSet,"I started with https://stackoverflow.com/questions/47678321/using-openid-keycloak-with-superset and did everything as explained. However, it is an old post, and not everything worked. I'm also trying to implement a custom security manager by installing it as a FAB add-on, so as to implement it in my application without having to edit the existing superset code.

I'm running KeyCloak 4.8.1.Final and Apache SuperSet v 0.28.1

As explained in the post, SuperSet does not play nicely with KeyCloak out of the box because it uses OpenID 2.0 and not OpenID Connect, which is what KeyCloak provides.

The first difference is that after pull request [4565](https://github.com/apache/incubator-superset/pull/4565) was merged, you can no longer do:

    from flask_appbuilder.security.sqla.manager import SecurityManager

Instead, you now have to use: (as per the UPDATING.md file)

    from superset.security import SupersetSecurityManager

In the above mentioned post, the poster shows how to create the manager and view files separately, but don't say where to put it. I placed both the manager and view classes in the same file, named `manager.py`, and placed it in the FAB add-on structure.

	from flask_appbuilder.security.manager import AUTH_OID
	from superset.security import SupersetSecurityManager
	from flask_oidc import OpenIDConnect
	from flask_appbuilder.security.views import AuthOIDView
	from flask_login import login_user
	from urllib.parse import quote
	from flask_appbuilder.views import ModelView, SimpleFormView, expose
	import logging
	
	class OIDCSecurityManager(SupersetSecurityManager):
		def __init__(self,appbuilder):
			super(OIDCSecurityManager, self).__init__(appbuilder)
			if self.auth_type == AUTH_OID:
				self.oid = OpenIDConnect(self.appbuilder.get_app)
			self.authoidview = AuthOIDCView
	
	CUSTOM_SECURITY_MANAGER = OIDCSecurityManager
	
	class AuthOIDCView(AuthOIDView):
		@expose('/login/', methods=['GET', 'POST'])
		def login(self, flag=True):
			sm = self.appbuilder.sm
			oidc = sm.oid
	
			@self.appbuilder.sm.oid.require_login
			def handle_login(): 
				user = sm.auth_user_oid(oidc.user_getfield('email'))
	
				if user is None:
					info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])
					user = sm.add_user(info.get('preferred_username'), info.get('given_name'), info.get('family_name'), info.get('email'), sm.find_role('Gamma')) 
	
				login_user(user, remember=False)
				return redirect(self.appbuilder.get_url_for_index)  
	
			return handle_login()  

	@expose('/logout/', methods=['GET', 'POST'])
	def logout(self):
		oidc = self.appbuilder.sm.oid
		oidc.logout()
		super(AuthOIDCView, self).logout()        
		redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login
		return redirect(oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url))

I have the `CUSTOM_SECURITY_MANAGER` variable set in this file and not in `superset_config.py`. This is because it didn't work when it was there, it didn't load the custom security manager. I moved the variable there after reading https://stackoverflow.com/questions/50492494/decorator-for-securitymanager-in-flask-appbuilder-for-superest.

My `client_secret.json` file looks as follows:

	{
		""web"": {
			""realm_public_key"": ""<PUBLIC_KEY>"",
			""issuer"": ""https://<DOMAIN>/auth/realms/demo"",
			""auth_uri"": ""https://<DOMAIN>/auth/realms/demo/protocol/openid-connect/auth"",
			""client_id"": ""local"",
			""client_secret"": ""<CLIENT_SECRET>"",
			""redirect_urls"": [
				""http://localhost:8001/*""
			],
			""userinfo_uri"": ""https://<DOMAIN>/auth/realms/demo/protocol/openid-connect/userinfo"",
			""token_uri"": ""https://<DOMAIN>/auth/realms/demo/protocol/openid-connect/token"",
			""token_introspection_uri"": ""https://<DOMAIN>/auth/realms/demo/protocol/openid-connect/token/introspect""
		}
	}

 - `realm_public_key`: I got this key at Realm Settings > Keys > Active and then in the table, in the ""RS256"" row.
 - `client_id`: local (the client I use for local testing)
 - `client_secret`: I got this at Clients > local (from the table) > Credentials > Secret

All the url/uri values are adjusted from the first mentioned post I used to set it all up. The `<DOMAIN>` is an AWS CloudFront default domain, since I'm running KeyCloak on EC2 and don't want to go through the trouble to setup a custom HTTPS domain for simply getting it up and running.

Then, finally, part of my `superset_config.py` file looks like this:

    ADDON_MANAGERS = ['fab_addon_keycloak.manager.OIDCSecurityManager']
	AUTH_TYPE = AUTH_OID
	OIDC_CLIENT_SECRETS = '/usr/local/lib/python3.6/site-packages/fab_addon_keycloak/fab_addon_keycloak/client_secret.json'
	OIDC_ID_TOKEN_COOKIE_SECURE = False
	OIDC_REQUIRE_VERIFIED_EMAIL = False
	AUTH_USER_REGISTRATION = True
	AUTH_USER_REGISTRATION_ROLE = 'Gamma'
	OPENID_PROVIDERS = [{
		'name': 'KeyCloak',
		'url': 'https://<DOMAIN>/auth/realms/demo/account'
	}]

In the original post, the `OPENID_PROVIDERS` environment variable is not mentioned, so I'm not really sure what to put in here for the URL. I put that one since that's the URL you'll hit to login to the client console on KeyCloak.

When I run SuperSet I don't get any errors. I can see that the custom security manager loads. When I navigate to the login screen, I have to choose my provider, I don't get a login form. I choose KeyCloak, since there's obviously nothing else, and click Login. When I click Login I can see that something loads in the address bar of the browser, but nothing happens. It's my understanding that I'm supposed to be redirected to the KeyCloak login form, and then back to my application upon successful login, but nothing happens. Am I missing something somewhere?

**Edit**

So after some more digging, it seems like my custom view class loads, however the methods in the class do not override the default behavior. Not sure why this is happening or how to fix it.",54024394,"I ended up figuring it out myself.

The solution I ended up with does not make use of a FAB add-on, but you also don't have to edit existing code/files.

I've renamed the manager.py file to security.py, and it now looks like this:

	from flask import redirect, request
	from flask_appbuilder.security.manager import AUTH_OID
	from superset.security import SupersetSecurityManager
	from flask_oidc import OpenIDConnect
	from flask_appbuilder.security.views import AuthOIDView
	from flask_login import login_user
	from urllib.parse import quote
	from flask_appbuilder.views import ModelView, SimpleFormView, expose
	import logging
	
	class AuthOIDCView(AuthOIDView):
	
		@expose('/login/', methods=['GET', 'POST'])
		def login(self, flag=True):
			sm = self.appbuilder.sm
			oidc = sm.oid
	
			@self.appbuilder.sm.oid.require_login
			def handle_login(): 
				user = sm.auth_user_oid(oidc.user_getfield('email'))
	
				if user is None:
					info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])
					user = sm.add_user(info.get('preferred_username'), info.get('given_name'), info.get('family_name'), info.get('email'), sm.find_role('Gamma')) 
	
				login_user(user, remember=False)
				return redirect(self.appbuilder.get_url_for_index)  
	
			return handle_login()  
	
		@expose('/logout/', methods=['GET', 'POST'])
		def logout(self):
	
			oidc = self.appbuilder.sm.oid
	
			oidc.logout()
			super(AuthOIDCView, self).logout()        
			redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login
	
			return redirect(oidc.client_secrets.get('issuer') + '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url))
	
	class OIDCSecurityManager(SupersetSecurityManager):
		authoidview = AuthOIDCView
		def __init__(self,appbuilder):
			super(OIDCSecurityManager, self).__init__(appbuilder)
			if self.auth_type == AUTH_OID:
				self.oid = OpenIDConnect(self.appbuilder.get_app)

I place the security.py file next to my superset_config_py file.

The JSON configuration file stays unchanged.

Then I've changed the superset_config.py file to include the following lines:

	from security import OIDCSecurityManager
	AUTH_TYPE = AUTH_OID
	OIDC_CLIENT_SECRETS = <path_to_configuration_file>
	OIDC_ID_TOKEN_COOKIE_SECURE = False
	OIDC_REQUIRE_VERIFIED_EMAIL = False
	AUTH_USER_REGISTRATION = True
	AUTH_USER_REGISTRATION_ROLE = 'Gamma'
	CUSTOM_SECURITY_MANAGER = OIDCSecurityManager

That's it.

Now when I navigate to my site, it automatically goes to the KeyCloak login screen, and upon successful sign in I am redirected back to my application."
39629953,Keycloak giving invalid redirect uri error,"I am very new to keycloak so might be i am asking a very basic question.

Anyways the problem is as follows : 

I have integrated my JBoss installation with keycloak saml adapter. It is installed correctly and Jboss is working perfectly fine.
After this I have updated my application to include keycloak_saml.xml and updated the auth method in the web.xml to KEYCLOAK-SAML. This is all as per the keycloak official documentation. I am using a URI in entity id in my keycloak_saml.xml, for example : /wapps/myapp

The deployment and application startup was successful. However  when I am testing I am getting 500 error and error message is invalid redirect URI.

I am able to see that the redirect URI is empty in the response headers.
Has anyone seen this issue before. I do not have access to keycloak saml server so was not able to check what is set on the server side.

Please help.

Thanks!!
Pulkit",39830423,"This was because of some configuration miss at the server side.
Exact parameters which were missed are 

 - Base URL
 - Master SAML Processing URL


          
          "
47557433,Programatic username/password access with KeyCloak using external IDP brokering,"I'm using [Identity Brokering][1] feature and external IDP. So, user logs in into external IDP UI, then KeyCloak broker client receives JWT token from external IDP and KeyCloak provides JWT with which we access the resources. I've set up [Default Identitiy Provider][2] feature, so external IDP login screen is displayed to the user on login. That means that users and their passwords are stored on external IDP. 

The problem occurs when I need to log in using ""Direct Access Grant"" (Resource Owner Password grant) programatically in tests. As password is not stored on KeyCloak, I always get 401 Unauthorized error from KeyCloak on login. When I tried to change user password it started to work, so the problem is that user password is not provisioned on KeyCloak and using ""Direct Access Grant"" KeyCloak doesn't invoke external IDP on programatic login.

 I use the following code to obtain access token, but get 401 error everytime I pass valid username/password. 

    org.keycloak.authorization.client.util.HttpResponseException: Unexpected response from server: 401 / Unauthorized

Direct access grant is enabled for that client.


    public static String login(final Configuration configuration) {
        final AuthzClient authzClient = AuthzClient.create(configuration);
        final AccessTokenResponse accessTokenResponse = authzClient.obtainAccessToken(USERNAME, PASSWORD);
        return accessTokenResponse.getToken();
      }

Is there any way it can be fixed? For example to call identity broker on ""Direct Access Grant"", so that KeyCloak provides us it's valid token?


  [1]: http://www.keycloak.org/docs/3.3/server_admin/topics/identity-broker.html
  [2]: http://www.keycloak.org/docs/3.3/server_admin/topics/identity-broker/default-provider.html",48772910,"The problem was that KeyCloak has no information about passwords from initial identity provider. They have a [token exchange feature][1] which should be used for programmatic token exchange.


[External Token to Interanal Token Exchange][2] should be used to achieve it.

Here is an example code in Python which does it (just place correct values in placeholders):

    def login():
        idp_access_token = idp_login()
        return keycloak_token_exchange(idp_access_token)
    
    def idp_login():
        login_data = {
            ""client_id"": <IDP-CLIENT-ID>,
            ""client_secret"": <IDP-CLIENT-SECRET>,
            ""grant_type"": <IDP-PASSWORD-GRANT-TYPE>,
            ""username"": <USERNAME>,
            ""password"": <PASSWORD>,
            ""scope"": ""openid"",
            ""realm"": ""Username-Password-Authentication""
        }
        login_headers = {
            ""Content-Type"": ""application/json""
        }
        token_response = requests.post(<IDP-URL>, headers=login_headers, data=json.dumps(login_data))
        return parse_response(token_response)['access_token']
    
    def keycloak_token_exchange(idp_access_token):
        token_exchange_url = <KEYCLOAK-SERVER-URL> + '/realms/master/protocol/openid-connect/token'
        data = {
            'grant_type': 'urn:ietf:params:oauth:grant-type:token-exchange',
            'subject_token': idp_access_token,
            'subject_issuer': <IDP-PROVIDER-ALIAS>,
            'subject_token_type': 'urn:ietf:params:oauth:token-type:access_token',
            'audience': <KEYCLOAK-CLIENT-ID>
        }
        response = requests.post(token_exchange_url, data=data,
                                 auth=(<KEYCLOAK-CLIENT-ID>, <KEYCLOAK-CLIENT-SECRET>))
        logger.info(response)
        return parse_response(response)['access_token']

  [1]: https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/token-exchange/token-exchange.adoc
  [2]: https://github.com/keycloak/keycloak-documentation/blob/master/securing_apps/topics/token-exchange/token-exchange.adoc#external-token-to-internal-token-exchange"
50256433,Obtaining an access token via cURL,"Simple question:

Why does the following code work... (it returns the access token just fine)

    curl --data ""grant_type=client_credentials&client_id=synchronization_tool&client_secret=8f6a6e73-66ca-4f8f-1234-ab909147f1cf"" http://localhost:8080/auth/realms/master/protocol/openid-connect/token 

And this one doesn't?

    curl -d  '{""grant_type"":""client_credentials"",""client_secret"":""8f6a6e73-66ca-4f8f-1234-ab909147f1cf"",""client_id"":""synchronization_tool""}' http://localhost:8080/auth/realms/master/protocol/openid-connect/token -H ""Content-Type: application/json""

It gives gives me:

    ""error"":""invalid_request"",""error_description"":""Missing form parameter: grant_type""}



**Aren't they supposed to be two completely analogous requests?** 
",50950867,"    curl -d 'client_id=xxx' -d 'username=xxx' -d 'password=xxx' -d 'grant_type=password' 'http://localhost:8080/auth/realms/YOUR_REALM_NAME/protocol/openid-connect/token' | python -m json.tool


This works for me, and it will give you the `access_token` and `session_token`
"
52641379,KeyCloak: Deploy Custom Theme in Docker,"I know how to deploy custom KeyCloak theme in Windows using both ways as stated [here][1]:

1) Copy-paste theme in **themes** directory

2) Using archive deploy

Can someone please suggest how to do this in **docker**?


  [1]: https://www.keycloak.org/docs/latest/server_development/index.html#_themes",52755388,"Finally, did the following way. Copy the customized theme named **MyTheme** at some path say ""/root/"" from **windows** to the **linux** server using **FileZilla** or similar tools.

To list all the docker instances that are running on the server, use the following command:

> docker ps

Find the container in which keycloak is running and pick its container id.

Now use the following command to copy the custom theme in the **themes** folder.:

> docker cp /root/MyTheme/.
> your_keycloak_container_id:/opt/jboss/keycloak/themes/MyTheme


Restart server.
"
32120129,Keycloak is causing IE to have an infinite loop,"we are using a [keycloak 1.3.1][1] authentication library, and I've noticed that once I initialize the keycloak with `{ onLoad: 'login-required' }`, IE (11) gets infinite loop...

Other browsers work fine.

I'm basically doing this:


    keycloak.init({ onLoad: 'login-required' }).success(function(authenticated) {
        console.info(authenticated ? 'authenticated' : 'not authenticated');

        some other stuff...

    }).error(function() {
        console.warn('failed to initialize');
    });

Any idea what's causing it, and to solve this? Trying to install the newest version 1.4.0 now in hopes the weird bug gets solved.

Thanks in advance.

  [1]: http://blog.keycloak.org/2015/06/keycloak-131final-released.html",33962547,"I had the same problem with keycloak v1.5.0.Final  / Internet Explorer 11, and finally figured out what is going on.

# 1. Behind the scene #
When using modes 'login-required' or 'check-sso' in Keycloak's init method, [Keycloak Javascript Adapter][1] sets an iframe that checks at timed intervals that user is authenticated.

This iframe is retrieved from keycloak's server (let's say `http(s)://yourkeycloakhost:port`):

    http(s)://yourkeycloakhost:port/auth/realms/yourrealm/protocol/openid-connect/login-status-iframe.html?client_id=yourclientid&origin=http(s)://yourorigin

and its content is a javascript script which *should* be able to access KEYCLOAK_SESSION cookie previously set by keycloak on authentication (on the same domain ie `http(s)://yourkeycloakhost:port`).

# 2. The problem with IE #
Yes! Here is the problem with Internet Explorer, which has a strict policy with iframes and cookies. Actually, the keycloak iframe does **NOT** have access to the `yourkeycloakhost` domain cookies due to its **[P3P policy][2]** (Microsoft Internet Explorer is the only major browser to support P3P).

[This problem is well described on this stackoverflow question][3]

# 3. Resolution #
The solution is to make Internet Explorer trust our keycloak's domain (`yourkeycloakhost`) for using cookies, so that the iframe is able to read the `KEYCLOAK_SESSION` cookie value, and register it in its data.

To do that, your keycloak server must **append HTTP response header with P3P information**. You can do that with an apache or nginx proxy that will always set proper headers. I did that with apache and it's mod_headers module:

    Header always set P3P ""CP=ALL DSP COR CUR ADM PSA CONi OUR SAM OTR UNR LEG""

You can learn more on P3P with [W3C][4] and/or validate your P3P Policy with this [P3P validator][5].

# 4. Consequence #
You can have a look at keycloak's iframe code :

    var cookie = getCookie('KEYCLOAK_SESSION');
    if (cookie) {
        data.loggedIn = true;
        data.session = cookie;
    }

Now the cookie on domain `yourkeycloakhost` is retrieved correctly by Internet Explorer, and the problem is fixed!


  [1]: http://keycloak.github.io/docs/userguide/keycloak-server/html/ch08.html#javascript-adapter
  [2]: https://en.wikipedia.org/wiki/P3P
  [3]: https://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer
  [4]: http://www.w3.org/P3P/
  [5]: http://p3pvalidatortool.com"
52907096,Spring Boot Data JPA @CreatedBy and @UpdatedBy not populating with authenticating with OIDC,"I would like to get Spring JPA auditing to work with Spring Boot,I am authenticating with Keycloak using the latest feature of Spring Security.

    springBootVersion = '2.1.0.RC1'

I am following the sample by spring security team https://github.com/jzheaux/messaging-app/tree/springone2018-demo/resource-server

ResourceServerConfig.kt

    @EnableWebSecurity
    class OAuth2ResourceServerSecurityConfiguration(val resourceServerProperties: OAuth2ResourceServerProperties) : WebSecurityConfigurerAdapter() {
    
        @Throws(Exception::class)
        override fun configure(http: HttpSecurity) {
            http
                    .authorizeRequests()
                    .antMatchers(""/api/**"").authenticated()
                    .anyRequest().anonymous()
                    .and()
                    .oauth2ResourceServer()
                    .authenticationEntryPoint(MoreInformativeAuthenticationEntryPoint())
                    .jwt()
                    .jwtAuthenticationConverter(GrantedAuthoritiesExtractor())
                    .decoder(jwtDecoder())
    
        }
    
        private fun jwtDecoder(): JwtDecoder {
            val issuerUri = this.resourceServerProperties.jwt.issuerUri
    
            val jwtDecoder = JwtDecoders.fromOidcIssuerLocation(issuerUri) as NimbusJwtDecoderJwkSupport
    
            val withIssuer = JwtValidators.createDefaultWithIssuer(issuerUri)
            val withAudience = DelegatingOAuth2TokenValidator(withIssuer, AudienceValidator())
            jwtDecoder.setJwtValidator(withAudience)
    
            return jwtDecoder
        }
    }
    
    class MoreInformativeAuthenticationEntryPoint : AuthenticationEntryPoint {
        private val delegate = BearerTokenAuthenticationEntryPoint()
    
        private val mapper = ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL)
    
        @Throws(IOException::class, ServletException::class)
        override fun commence(request: HttpServletRequest, response: HttpServletResponse,
                              reason: AuthenticationException) {
    
            this.delegate.commence(request, response, reason)
    
            if (reason.cause is JwtValidationException) {
                val validationException = reason.cause as JwtValidationException
                val errors = validationException.errors
                this.mapper.writeValue(response.writer, errors)
            }
        }
    }
    
    class GrantedAuthoritiesExtractor : JwtAuthenticationConverter() {
        override fun extractAuthorities(jwt: Jwt): Collection<GrantedAuthority> {
            val scopes = jwt.claims[""scope""].toString().split("" "")
            return scopes.map { SimpleGrantedAuthority(it) }
        }
    }
    
    class AudienceValidator : OAuth2TokenValidator<Jwt> {
    
        override fun validate(token: Jwt): OAuth2TokenValidatorResult {
            val audience = token.audience
            return if (!CollectionUtils.isEmpty(audience) && audience.contains(""mobile-client"")) {
                OAuth2TokenValidatorResult.success()
            } else {
                OAuth2TokenValidatorResult.failure(MISSING_AUDIENCE)
            }
        }
    
        companion object {
            private val MISSING_AUDIENCE = BearerTokenError(""invalid_token"", HttpStatus.UNAUTHORIZED,
                    ""The token is missing a required audience."", null)
        }
    }

application.yaml

    spring:
      application:
        name: sociter
      datasource:
        url: jdbc:postgresql://localhost:5432/sociter
        username: postgres
        password: 123123
        driver-class-name: org.postgresql.Driver
      jpa:
        hibernate:
          ddl-auto: update
      security:
        oauth2:
          resourceserver:
            jwt:
              jwk-set-uri: http://localhost:8080/auth/realms/sociter/protocol/openid-connect/certs
              issuer-uri: http://localhost:8080/auth/realms/sociter


JpaAuditingConfiguration.kt

    @Configuration
    @EnableJpaAuditing
    (auditorAwareRef = ""auditorProvider"")
    class JpaAuditingConfiguration {
    
        @Bean
        fun auditorProvider(): AuditorAware<String> {
            return if (SecurityContextHolder.getContext().authentication != null) {
                val oauth2 = SecurityContextHolder.getContext().authentication as JwtAuthenticationToken
            val claims = oauth2.token.claims
            val userId = claims[""sub""]
            AuditorAware { Optional.of(userId.toString()) }
            } else
                AuditorAware { Optional.of(""Unknown"") }
        }
    }


BaseEntity.kt

    @MappedSuperclass
    @JsonIgnoreProperties(value = [""createdOn, updatedOn""], allowGetters = true)
    @EntityListeners(AuditingEntityListener::class)
    abstract class BaseEntity {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        val id: UUID = UUID.randomUUID()
    
        @Column(nullable = false, updatable = false)
        @CreatedDate
        var createdOn: LocalDateTime = LocalDateTime.now()
    
        @Column(nullable = true)
        @LastModifiedDate
        var updatedOn: LocalDateTime? = null
    
        @Column(nullable = true, updatable = false)
        @CreatedBy
        var createdBy: String? = null
    
        @Column(nullable = true)
        @LastModifiedBy
        var updatedBy: String? = null
    }


I am getting createdBy and UpdatedBy set to as Unknown. During debugging, auditorProvider bean get invoked and sets the user to Unknown but when passing access_token, if condition is still false.

Not sure what I am missing.",53046154,"I was able to replicate your issue, but in an equivalent Java setup. The issue is in your `JpaAuditingConfiguration` class. If you observe your current `JpaAuditingConfiguration` class closely this is what happens there:

1. During Spring initialization the `auditorProvider()` function will try to generate a bean.
2. The authentication condition is being checked there upfront(during application startup) and this thread(which starts the Spring Boot App) is NOT an authenticated thread at all. Hence it returns an `AuditorAware` instance that will always return `Unknown`.

You need to change this class as follows(Sorry, I wrote it in Java, please convert it to Kotlin):

    @Configuration
    @EnableJpaAuditing(auditorAwareRef = ""auditorProvider"")
    public class JPAAuditConfig {
    
        @Bean
        public AuditorAware<String> auditorProvider() {
            return new AuditorAware<String>() {
                @Override
                public String getCurrentAuditor() {
                    if (SecurityContextHolder.getContext().getAuthentication() != null) {
                        OAuth2Authentication auth = (OAuth2Authentication) SecurityContextHolder.getContext().getAuthentication();
                        Object principal = auth.getUserAuthentication().getPrincipal();
                        CustomUserDetails userDetails = (CustomUserDetails) principal;
                        return userDetails.getUsername();
                    } else {
                        return ""Unknown"";
                    }
                }
            };
        }
    }

You can try this. Also, I suspect that with your current setup you would get updatedOn and createdOn correctly populated. If yes, that means all the JPA and EntityListener magic is actually working. You just need to return the correct implementation of `AuditorAware` at runtime. 

Also note that, my config does not use `JwtAuthenticationToken` and I use a `CustomUserDetails` implementation. But that's not related to your problem, and you can of course use your current token type (`JwtAuthenticationToken`). Its just that, I had my own little app up and running inside which I replicated your issue."
56254627,Keycloak - using admin API to add client role to user,"I'm triyng to use keycloak AdminAPI (https://www.keycloak.org/docs-api/3.0/rest-api/index.html#_users_resource) to create user and assign client roles. I'm receiving correct token, and user is created but assigning roles return 404 

I'm using Postman to connect with API:


    /auth/realms/{realmName}/protocol/openid-connect/token
    Content-Type application/x-www-form-urlencoded <-with parameters ofc
    /auth/admin/realms/{realmName}/users

    Content-Type application/json
    Authorization Bearer {TOKEN}
    Body:
    
```
{
   ""username"": ""name"",
   ""enabled"": true,
   ""emailVerified"": false,
   ""firstName"": ""first"",
   ""lastName"": ""last"",
   ""credentials"": [
       {
           ""type"": ""password"",
           ""value"": ""newPas1*"",
           ""temporary"": false
       }
   ]
}
```
    
Above works for me, but the next one don't

    /auth/admin/realms/{realmName}/users/xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx/role-mappings/clients/realm-management

    Content-Type application/json
    Authorization Bearer {TOKEN}
    Body:
    
```
{
   ""roles"": [
       {
           ""id"": ""0830ff39-43ea-48bb-af8f-696bc420c1ce"",
           ""name"": ""create-client"",
           ""description"": ""${role_create-client}"",
           ""composite"": false,
           ""clientRole"": true,
           ""containerId"": ""344e7c81-e7a2-4a43-b013-57d7ed198eee""
       }
   ]
}
```
    
where 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx' is userID returned during creation and create-client role exists

I need a way to add client role via Http request. I saw there are some keycloack implementation for java but I'm using .NET CORE so there will be the target implementation but I need to have working request first as you may gues",56262652,"You have to pass client UUID to the `role-mappings` REST method, not the ID that you specify when creating a client in admin UI. Use `GET /admin/realms/{realm}/clients?clientId=realm-management` REST method to find out the client UUID.

**UPDATE**

In Keycloak 6.0.1 to add a role it is required to pass role name and id.

Example:

    POST /auth/admin/realms/{realm}/users/{user}/role-mappings/clients/{client}
    
    [
      {
        ""id"": ""0830ff39-43ea-48bb-af8f-696bc420c1ce"",
        ""name"": ""create-client""
      }
    ]"
33365529,Trying to log in to Keycloak Admin WS,"I need to configure realms in Keycloak by the Admin WS accessible at the path 

    http://KeycloakServer:8081/auth/admin/realms

So in Postman I run the following request


URL: `http://KeycloakServer:8081/auth/admin/realms`

Method: `POST`

Body: 

    {
    	""enabled"": true,
    	""id"": ""TestRealm"",
    }

I get a `401 Unauthorized` response, so I think it is necessary to authenticate to the Admin WS. But in the docs I cannot find any information about the type of authentication required and the syntax.
Do you know how to authenticate to the Keycloak WSs?

Thank you
",35345291,"Do a POST request to `https://hostname:8080/auth/realms/master/protocol/openid-connect/token`

Sets the `Content-Type` to `application/x-www-form-urlencoded`

and put the following in the body:

    username=<username>&password=<password>&client_id=admin-cli&grant_type=password"
66801793,Does Keycloak need a database,"I have setup Keycloak as a SAML broker, and authentication is done by an external IdP provided by the authorities. Users logging in using this IdP are all accepted and all we need from Keycloak is an OAuth token to access our system.
I have tried both the default setup using H2 and running with an external MariaDB.

The external IdP provides us with a full name of the user and a personal ID. Both data are covered by GDPR and I really do not like the sound of storing that data in a database running in the DMZ. Opening up for Keycloak to access a database in the backend is also not a good solution, especially when I do not need users to be stored.

The benefit of running without a database is that I have a simpler DMZ setup as I really do not need to store anything about the users but on the backend.

Do I need a database, and if not how do I run Keycloak without it?",66801863,"> Do I need a database, and if not how do I run Keycloak without it?

Yes, however, out-of-the-box Keycloak runs without having to deploy any external DB. From the Keycloak official documentation section [Relational Database Setup][1] one can read:

> **Keycloak comes with its own embedded Java-based relational database
> called H2. This is the default database that Keycloak will use to
> persist data and really only exists so that you can run the
> authentication server out of the box.** 

So out-of-the-box you cannot run Keycloak without a DB. 

That being said from the same documentation on can read: 

> We highly recommend that you replace it with a more production ready external database. The H2 database is not very viable in high concurrency situations and should not be used in a cluster either. 

So regarding this: 

> The benefit running without a database is that I have a simpler DMZ
> setup  as I really do not need to store anything about the users but
> on the backend.

You would still be better offer deploying another DB, because Keycloak stores more than just the users information in DB (*e.g.,* realm information, groups, roles and so on).


> The external IdP provides us with a full name of the user and a
> personal ID. Both data are covered by GDPR and I really do not like
> the sound of storing that data in a database running in the DMZ.
> Opening up for Keycloak to access a database in the backend is also
> not a good solution, especially when I do not need users to be stored.

You can configured that IDP and Keycloak in a manner that the users are not imported to the Keycloak whenever those user authenticate.



  [1]: https://www.keycloak.org/docs/latest/server_installation/#_database"
58267875,Keycloak - What is the best way to get User's role,"Hi I'm using Keycloak and I would like to know what is the best way to get User Role. I'm using a SPA written in ReactJS and it needs to know the user's role. Is there a Keycloak API to get this? or should I get it from the JWT token. Either way, what is the option that I should go with. Thank you.",58275251,"If you assigned role to a user, then this role is a claim inside JWT access token provided by Keycloak.

A user would have to be authenticated before seeing some application content. 

After successful authentication, access token would be given to client (can be application gateway or ui application) and then role can be extracted from it and used. 

"
51980195,Multiple authentication methods for a user in Keycloak,"I would like to let my users have a choice which authentication method to use. For example, they could be presented with a menu to pick an option (username/pass, username/pass+OTP, etc).
Then, Keycloak should, based on their choice, assign specific scope to the token.

Is this possible to do with Keycloak (probably by somehow utilizing auth methods chaining) and how? I couldn’t find this in the documentation but it seems as a reasonable use-case to me.
",53435948,"Here is my solution: 

[![enter image description here][1]][1]


Circled authenticators are custom ones for which I provided a custom implementation.
I used the fall-through mechanism, which means I that first authenticator implements a custom form: [![enter image description here][2]][2]


which lets the user choose authenticator and captures user's choice in a variable.
Later, this variable is used in the following authenticators to decide whether to do the authentication or to pass on control to the next authenticator. <br>

You can read more about Authentication SPI in the following page: https://www.keycloak.org/docs/latest/server_development/index.html#_auth_spi 
<br>

And [here][3] you can see how to implement custom authenticator.


  [1]: https://i.stack.imgur.com/WvgQQ.png
  [2]: https://i.stack.imgur.com/5Qtbb.png
  [3]: https://github.com/keycloak/keycloak/tree/master/examples/providers/authenticator"
65200310,Export users and roles from Keycloak,"I created users and roles in Keycloak which I want to export.

When I tried to export them using the realm's ""Export"" button in UI I got a JSON file downloaded.
 
[![enter image description here][1]][1]

But I couldn't find any users or roles in the exported file `realm.json`

How can I export a realm JSON including users and roles from Keycloak?

  [1]: https://i.stack.imgur.com/2uTPu.png",65200689,"**Update:** The `/auth` path was removed starting with [Keycloak 17 Quarkus distribution][4]. So you might need to remove the `/auth` from the endpoint calls presented on this answer.

[4]: https://stackoverflow.com/a/71902419/1366871

----


You will not be able to do that using the export functionality. However, you can get that information using the [Keycloak Admin REST API][1]; to call that API, you need an access token from a user with the proper permissions. For now, I will be using the `admin` user from the `master` realm, but later I will explain how you can use another user:

```sh
curl https://$KEYCLOAK_HOST/auth/realms/master/protocol/openid-connect/token \
    -d ""client_id=admin-cli"" \
    -d ""username=$ADMIN_NAME"" \
    -d ""password=$ADMIN_PASSWORD"" \
    -d ""grant_type=password""
```

You will get a JSON response with the admin's token. Extract the value of property `access_token` from that response. Let us save it in the variable `$ACCESS_TOKEN` for later reference.

To [get the list of users][2] from your realm `$REALM_NAME`:

```sh
curl -X GET https://$KEYCLOAK_HOST/auth/admin/realms/$REALM_NAME/users \
     -H ""Content-Type: application/json"" \
     -H ""Authorization: bearer $ACCESS_TOKEN""
```

To [get the realm roles][3]:
```sh
curl -X GET https://$KEYCLOAK_HOST/auth/admin/realms/$REALM_NAME/roles \
     -H ""Content-Type: application/json"" \
     -H ""Authorization: bearer $ACCESS_TOKEN""
```

Now you just need to save the JSON responses from those endpoints into JSON files.

**Assigning the proper user permissions**

For those that do not want to get an access token from the master admin user, you can get it from another user but that user needs the permission `view-users` from the `realm-management` client. For that you can:

**(OLD Keycloak UI)**
- Go to Users, and then the user in question
- Go to the tab `Role Mappings` 
- In `client roles` select `realm-management`
- Select the role `view-users` and click on `Add selected`

**(New Keycloak UI)**
- Go to Users, and then the user in question
- Go to the tab `Role Mappings` 
- Click on `Assign role`
- In `Search by role name` type `view-users`
- Select the role and assign it

  [1]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_authentication_management_resource
  [2]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_getusers
  [3]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_getroles"
62149363,Searching users in Keycloak from Java code,"I am using Spring Boot, Keycloak 10, java 8 and keycloak-admin-client jar. I am able to get user, his groups and roles.

When it comes to search I see different search method options for example I could :

     List<UserRepresentation> search = getKeycloakInstance().realm(""my-realm"").users()
                    .search(""username"");

https://www.keycloak.org/docs-api/10.0/javadocs/org/keycloak/admin/client/resource/UsersResource.html

But what i need to do i to write couple of methods:

- search by roles (so search users who has some roles)

- search by groups and group attributes

- search by text (firstname, lastname, email) in 'contains' manner: *mytext*

- search by roles and text

- search by list of ids (uuids of users)


I dont' see such possibilities in keycloak-admin-client, or it is possible of what else should I use instead of keycloak-admin-client ?",62149799,"Unfortunately, keycloak-admin-client doesn't provide lots of search options. 


How to find users by role:

    RoleResource roleResource = getKeycloakInstance().realm(""realm_name"")
                              .roles().get(""role_name"");  
    roleResource.getRoleUserMembers();

How to find all users in the group:

    getKeycloakInstance().realm(""realm_name"").groups().group(""your_group"").members();

How to find users by username, firstName, lastName, email:

    getKeycloakInstance().realm(""my-realm"").users()
                .search(""username"", ""lastName"", ""email"");


If it's okay for you, try to use [Keycloak Admin REST API][1] to get more search opportunities. 

  [1]: https://www.keycloak.org/docs-api/5.0/rest-api/index.html"
62916513,Establish SSO/set cookies with access or id token/token exchange,"I'm allowing users logged in an external application to jump into our application with their access token through Keycloak's identity brokering and external to internal token exchange.

Now I'd like to establish an SSO session in an embedded JxBrowser in our application similar to a regular browser login flow, where three cookies are set in the browser: AUTH_SESSION, KEYCLOAK_SESSION(_LEGACY) and KEYCLOAK_IDENTITY(_LEGACY).

KEYCLOAK_IDENTITY contains a token of type `Serialized-ID` which looks somewhat similar to an ID token.

Is it possible to create the KEYCLOAK_IDENTITY cookie using the exchanged (internal) access and/or ID token and, provided that the other two cookies are correctly created as well, would this establish a valid SSO session?

Basically all I am missing is how I could obtain or create the `Serialized-ID` type token.",63154387,"One way to achieve this:

 1. Implement a custom endpoint following this [example][1]

Note that the provider works fine for me without registering it in `standalone.xml`, I'm just adding the JAR to the Keycloak Docker image.

 2. Add a method that validates a given access token, looks up the user, gets the user session and sets the cookies in the response (most error handling omitted for brevity):

        @GET
        @Produces(MediaType.APPLICATION_JSON)
        @Path(""sso"")
        public Response sso(@Context final HttpRequest request) {
            final HttpHeaders headers = request.getHttpHeaders();
            final String authorization = headers.getHeaderString(HttpHeaders.AUTHORIZATION);
            final String[] value = authorization.split("" "");
            final String accessToken = value[1];
            final AccessToken token = Tokens.getAccessToken(accessToken, keycloakSession);

            if (token == null) {
                throw new ErrorResponseException(Errors.INVALID_TOKEN, ""Invalid access token"", Status.UNAUTHORIZED);
            }

            final RealmModel realm = keycloakSession.getContext().getRealm();
            final UriInfo uriInfo = keycloakSession.getContext().getUri();
            final ClientConnection clientConnection = keycloakSession.getContext().getConnection();

            final UserModel user = keycloakSession.users().getUserById(token.getSubject(), realm);

            final UserSessionModel userSession = keycloakSession.sessions().getUserSession(realm, token.getSessionState());

            AuthenticationManager.createLoginCookie(keycloakSession, realm, user, userSession, uriInfo, clientConnection);

            return Response.noContent().build();
        }

Disclaimer: I am not completely certain this implementation does not imply any security issues, but since `Tokens.getAccessToken(accessToken, keycloakSession)` does full validation of the access token, setting the cookies should only be possible with a valid access token.

For CORS, add:

    @OPTIONS
    @Produces(MediaType.APPLICATION_JSON)
    @Path(""sso"")
    public Response preflight(@Context final HttpRequest request) {
        return Cors.add(request, Response.ok("""", MediaType.APPLICATION_JSON))
                .auth()
                .preflight()
                .allowedMethods(""GET"", ""OPTIONS"")
                .build();
    }

and in `sso()`:

        return Cors.add(request, Response.ok("""", MediaType.APPLICATION_JSON))
                .auth()
                .allowedMethods(""GET"")
                .allowedOrigins(token)
                .build();

What I am uncertain about is why Firefox preflights the `GET` request, making it necessary to handle that.

  [1]: https://github.com/keycloak/keycloak/tree/master/examples/providers/rest"
57960618,Springboot testing with keycloak,"I'm trying to run simple unit test, Keycloak is configured in proper way( I tested it and my mvc app is connecting and users are authenticated_ but now I tried to test my controllers and even though 
I used spring slices  keycloak adapter is invoked and giving me errors. Adapter configuration is mostly brought from keycloak documentation

    @WebMvcTest(UserController.class)
    class UserControllerTest {
    
   
    
        @MockBean
        UserService userService;
    
        @Autowired
        MockMvc mockMvc;
    
        @BeforeEach
        void setUp() {
        }
    
        @AfterEach
        void tearDown() {
            reset(userService);
        }
    
        @Test
        void logout() throws Exception {
            mockMvc.perform(get(""/logout""))
                    .andExpect(status().isOk());
        }
    }

but I've got errors when I try to run it, stack trace:

    java.lang.NullPointerException
    	at org.keycloak.adapters.KeycloakDeploymentBuilder.internalBuild(KeycloakDeploymentBuilder.java:57)
    	at org.keycloak.adapters.KeycloakDeploymentBuilder.build(KeycloakDeploymentBuilder.java:205)
    	at org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver.resolve(KeycloakSpringBootConfigResolver.java:37)
    	at org.keycloak.adapters.springsecurity.config.KeycloakSpringConfigResolverWrapper.resolve(KeycloakSpringConfigResolverWrapper.java:40)
    	at org.keycloak.adapters.AdapterDeploymentContext.resolveDeployment(AdapterDeploymentContext.java:89)
    	at org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter.doFilter(KeycloakPreAuthActionsFilter.java:81)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
    	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
    	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
    	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
    	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
    	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
    	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
    	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)
    	at org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:133)
    	at org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:182)
    	at org.czekalski.userkeycloak.controller.UserControllerTest.logout(UserControllerTest.java:50)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:498)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:532)
    	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:171)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:167)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:114)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:59)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:108)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
    	at java.util.ArrayList.forEach(ArrayList.java:1257)
    	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
    	at java.util.ArrayList.forEach(ArrayList.java:1257)
    	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)
    	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
    	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
    	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
    	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
    	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
    	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
    	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
    	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
    	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:74)
    	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
    	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
    	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)



adding to test `@TestPropertySource(""classpath:secTest.properties"")` where inside secTest.properties
`keycloak.enabled = false` didn't help

code under test:

    @Controller
    public class UserController {
    
        private final UserService userService;
    
        public UserController( UserService userService) {
    
            this.userService = userService;
        }
    
      
    
        @GetMapping(""/index"")
        public String logout(){
            return ""users/logout"";
        }
    
    
        @GetMapping(""/logged"")
        public String loggedIn(Model model){
            model.addAttribute(""token"",   userService.getloggedInUser());
            return ""users/logged"";
        }

",60165159,"I just wrote a set of libs [to ease unit-testing of secured Spring apps][1].

It includes a `@WithMockKeycloackAuth` annotation, along with Keycloak dedicated `MockMvc` request post-processor and `WebTestClient` configurer / mutator

Sample usage:
```java
@RunWith(SpringRunner.class)
@WebMvcTest(GreetingController.class)
@ContextConfiguration(classes = GreetingApp.class)
@ComponentScan(basePackageClasses = { KeycloakSecurityComponents.class, KeycloakSpringBootConfigResolver.class })
public class GreetingControllerTests extends ServletUnitTestingSupport {
	@MockBean
	MessageService messageService;

	@Test
	@WithMockKeycloackAuth
	public void whenUserIsNotGrantedWithAuthorizedPersonelThenSecretRouteIsNotAccessible() throws Exception {
		mockMvc().get(""/secured-route"").andExpect(status().isForbidden());
	}

	@Test
	@WithMockKeycloackAuth(""AUTHORIZED_PERSONNEL"")
	public void whenUserIsGrantedWithAuthorizedPersonelThenSecretRouteIsAccessible() throws Exception {
		mockMvc().get(""/secured-route"").andExpect(content().string(is(""secret route"")));
	}

    @Test
    @WithMockKeycloakAuth(
            authorities = { ""USER"", ""AUTHORIZED_PERSONNEL"" },
            id = @IdTokenClaims(sub = ""42""),
            oidc = @OidcStandardClaims(
                    email = ""ch4mp@c4-soft.com"",
                    emailVerified = true,
                    nickName = ""Tonton-Pirate"",
                    preferredUsername = ""ch4mpy""),
            privateClaims = @ClaimSet(stringClaims = @StringClaim(name = ""foo"", value = ""bar"")))
    public void whenAuthenticatedWithKeycloakAuthenticationTokenThenCanGreet() throws Exception {
        mockMvc().get(""/greet"")
                .andExpect(status().isOk())
                .andExpect(content().string(startsWith(""Hello ch4mpy! You are granted with "")))
                .andExpect(content().string(containsString(""AUTHORIZED_PERSONNEL"")))
                .andExpect(content().string(containsString(""USER"")));
```

Depending of how much of the tooling I propose you wish to you might get `spring-security-oauth2-test-addons` or `spring-security-oauth2-test-webmvc-addons` from maven-central:
```xml
<dependency>
  <groupId>com.c4-soft.springaddons</groupId>
  <artifactId>spring-security-oauth2-test-addons</artifactId>
  <version>2.3.4</version>
  <scope>test</scope>
</dependency>
<dependency>
  <groupId>com.c4-soft.springaddons</groupId>
  <artifactId>spring-security-oauth2-test-webmvc-addons</artifactId>
  <version>2.3.4</version>
  <scope>test</scope>
</dependency>
```
First is enough if you're only interested in `@WithMockKeycloakAuth` annotation. Second adds fluent API (MockMvc request post-processor) and other stuff like MockMvc wrapper with default values for content-type & accept headers


  [1]: https://github.com/ch4mpy/spring-addons"
51626034,Create user in keycloak through keycloak admin client returns IllegalArgumentException,"I want to create a user through keycloak admin client but I am getting: 
> java.lang.IllegalArgumentException: RESTEASY003720: path param realm has not been provided by the parameter map

Here's my bean for keycloak:

    @Bean
    Keycloak keycloak() {
    return KeycloakBuilder
        .builder()
        .serverUrl(localhost:9080/auth)
        .realm(REALM)
        .clientId(CLIENT_ID)
        .username(USERNAME)
        .password(PASSWORD)
        .resteasyClient(new ResteasyClientBuilder().connectionPoolSize(10).build())
        .build();
    }

I use this code for calling keycloak:

    CredentialRepresentation credentialRepresentation = new 
    CredentialRepresentation();
    credentialRepresentation.setType(CredentialRepresentation.PASSWORD);
    credentialRepresentation.setValue(password);
    UserRepresentation userRepresentation = new UserRepresentation();
    userRepresentation.setUsername(username);
    userRepresentation.setFirstName(firstName);
    userRepresentation.setLastName(lastName);
    userRepresentation.setEnabled(true);
    userRepresentation.setCredentials(
        Arrays.asList(credentialRepresentation));
    keycloak.realm(REALM).users().create(userRepresentation);


both keycloak and keycloak admin client are the same version (4.0.0.Final)

My stacktrace looks like this:

>java.lang.IllegalArgumentException: RESTEASY003720: path param realm has not been provided by the parameter map
>at org.jboss.resteasy.specimpl.ResteasyUriBuilder.replaceParameter(ResteasyUriBuilder.java:659)
>at org.jboss.resteasy.specimpl.ResteasyUriBuilder.buildString(ResteasyUriBuilder.java:581)
>at org.jboss.resteasy.specimpl.ResteasyUriBuilder.buildFromValues(ResteasyUriBuilder.java:780)
>at org.jboss.resteasy.specimpl.ResteasyUriBuilder.build(ResteasyUriBuilder.java:772)
>at org.jboss.resteasy.client.jaxrs.internal.ClientWebTarget.getUri(ClientWebTarget.java:108)
>at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.createRequest(ClientInvoker.java:124)
>at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:104)
>at org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:76)
>at com.sun.proxy.$Proxy240.grantToken(Unknown Source)
>at org.keycloak.admin.client.token.TokenManager.grantToken(TokenManager.java:89)
>at org.keycloak.admin.client.token.TokenManager.getAccessToken(TokenManager.java:69)
>at org.mycompany.usermanagement.service.KeycloakService.createUserInSSO(KeycloakService.java:45)

and here is my build.gradle

    compile group: 'org.keycloak', name: 'keycloak-admin-client', version: '4.0.0.Final'
    compile group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.4.Final'
    compile group: 'org.jboss.resteasy', name: 'resteasy-client', version: '3.1.4.Final'
    compile group: 'org.jboss.resteasy', name: 'resteasy-jackson2-provider', version: '3.1.4.Final'",51775553,"Are you using Spring Boot?<br/>

I have tried your scenario for myself, and works well for me (tested on keycloak 4.0.0 and Spring Boot 1.5.10.RELEASE).<br/>

I have done 1 change that the way you create Bean Keycloak (my code is from official [docs](https://www.keycloak.org/docs/3.2/server_development/topics/admin-rest-api.html)). Make sure that ``realm`` is ``master`` and ``client_id`` is ``admin-cli``.

    @Bean
    Keycloak initKeycloakWithAdminRole() {
        return Keycloak.getInstance(
                ""http://localhost:8080/auth"",
                ""master"",
                ""admin"",
                ""admin"",
                ""admin-cli"");

<br/>
### My code

Service
[Code][1]

Controller [Code][2]

Depedencies [here][3]
    


  [1]: https://i.stack.imgur.com/VtcIh.png
  [2]: https://i.stack.imgur.com/8eZnd.png
  [3]: https://i.stack.imgur.com/XC4lz.png"
47199243,Spring Keycloak adapter Permissions Policy Enforcer. How to set it up,"First of all I'm using 

 - keycloak-authz-client-3.3.0.Final 
 - spring boot 1.5.8.RELEASE
 - spring-boot-starter-security

I've been playing with Keycloak spring adapter exploring the examples since we want to adopt it to our project. 

I was able to make it run for Roles easily using this tutorial:
https://dzone.com/articles/easily-secure-your-spring-boot-applications-with-k

After that I moved to permissions and that's when it gets trickier (that's also our main goal). 

I want to achieve something like described in here (9.1.2):
http://www.keycloak.org/docs/2.4/authorization_services_guide/topics/enforcer/authorization-context.html#

 

 - To get permissions you need to setup in Keycloak Authorization, credentials, and then create Resources or Scopes and Policies to be able to create permissions (it took me a while but I got it working). Testing in the Evaluater everything seems fine.

 - Next step was to get user permissions on the Spring side. In order to do that I had to enable:
keycloak.policy-enforcer-config.enforcement-mode=permissive

The moment I enable this I get everytime this exception 

    java.lang.RuntimeException: Could not find resource.
	at org.keycloak.authorization.client.resource.ProtectedResource.findAll(ProtectedResource.java:88)
    at org.keycloak.adapters.authorization.PolicyEnforcer.configureAllPathsForResourceServer...
    ...
    Caused by: org.keycloak.authorization.client.util.HttpResponseException: 
    Unexpected response from server: 403 / Forbidden



No matter what address I hit in the server.


 - So I started to investigate what was the root of the problem. Looking at some examples how to manually get the permissions I actually got them in postman with the following request:
 http://localhost:8080/auth/realms/${myKeycloakRealm}/authz/entitlement/${MyKeycloakClient}
including the header Authorization : bearer ${accessToken}
response was {""rpt"": ${jwt token}} that actually contains the permissions

 - So knowing this was working it must be something wrong with the Spring adapter. Investigating a bit further on the Keycloak exception I found that that error was occurring the moment the adapter was getting all the resources. For that it was using the following url:
http://localhost:28080/auth/realms/license/authz/protection/resource_set
with a different token in the headers (that I copied when debugging)
So when I tried it in postman I also got a 403 error, but with a json body:

{
    ""error"": ""invalid_scope"",
    ""error_description"": ""Requires uma_protection scope.""
}

I've enabled and disabled all uma configuration within keycloak and I can't make it work. Can please someone point me into the right direction?


**Update**


I've now updated Keycloak adapter to 3.4.0.final and I'm getting the following error in the UI:

Mon Nov 20 10:09:21 GMT 2017
There was an unexpected error (type=Internal Server Error, status=500).
Could not find resource. Server message: {""error"":""invalid_scope"",""error_description"":""Requires uma_protection scope.""}

(Pretty much the same I was getting in the postman request)

I've also printed all the user roles to make sure the uma_protection role is there, and it is.

Another thing I did was to disable spring security role prefix to make sure it wasn't a mismatch on the role.

**Update 2**


Was able to resolve the 403 issue (you can see it in the response below).
Still getting problems obtaining KeycloakSecurityContext from the HttpServletRequest


**Update 3**

Was able to get KeycloakSecurityContext like this:

        Principal principal = servletRequest.getUserPrincipal();
        KeycloakAuthenticationToken token = (KeycloakAuthenticationToken) principal;
        OidcKeycloakAccount auth = token.getAccount();
        KeycloakSecurityContext keycloakSecurityContext = auth.getKeycloakSecurityContext();

        AuthorizationContext authzContext = keycloakSecurityContext.getAuthorizationContext();


The problem now is that the **AuthorizationContext** is always null.

",47391330,"I've managed to get it working by adding uma_protection role to the **Service Account Roles tab in Keycloak client configuration** 



[![Here's the place where it is in Keycloak][1]][1]


More information about it here:
http://www.keycloak.org/docs/2.0/authorization_services_guide/topics/service/protection/whatis-obtain-pat.html



Second part of the solution:

It's mandatory to have the security constrains in place even if they don't mean much to you. Example:

    keycloak.securityConstraints[0].authRoles[0] = ROLE1
    keycloak.securityConstraints[0].securityCollections[0].name = protected
    keycloak.securityConstraints[0].securityCollections[0].patterns[0] = /*


Useful demos:
https://github.com/keycloak/keycloak-quickstarts


  [1]: https://i.stack.imgur.com/FPDo7.png"
50523816,How to register a custom ProtocolMapper in Keycloak?,"I'm struggling with registering a custom ProtocolMapper in Keycloak. I would like to add some data from my database on token request. So i followed the idea given in https://stackoverflow.com/questions/43376233/keycloak-add-extra-claims-from-database-external-source.

I implemented the ProtocolMapper interface and added the file 

> META-INF/services/org.keycloak.protocol.ProtocolMapper

containing the reference to my class. So far so good and Keycloak recognizes the new implementation. I'm also able to configure it via the admin console.

To add some data to the token I think I must also add one/some of the interfaces

> org.keycloak.protocol.oidc.mappers.UserInfoTokenMapper
> org.keycloak.protocol.oidc.mappers.OIDCIDTokenMapper
> org.keycloak.protocol.oidc.mappers.OIDCAccessTokenMapper

and implement the methods according to the interface(s).

The problem now is that as soon as I add the interface I get the following log message:

    08:55:07,292 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-6) MSC000001: Failed to start service jboss.deployment.unit.""keycloak-spi.jar"".POST_MODULE: org.jboss.msc.service.StartException in service jboss.deployment.unit.""keycloak-spi.jar"".POST_MODULE
    : WFLYSRV0153: Failed to process phase POST_MODULE of deployment ""keycloak-spi.jar""
            at org.jboss.as.server.deployment.DeploymentUnitPhaseService.start(DeploymentUnitPhaseService.java:172)
            at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:2032)
            at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1955)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
            at java.lang.Thread.run(Unknown Source)
    Caused by: java.lang.NoClassDefFoundError: Failed to link at/lotterien/jam/keycloak/spi/JamAuthorizationInfoProtocolMapper (Module ""deployment.keycloak-spi.jar"" from Service Module Loader): org/keycloak/protocol/oidc/mappers/UserInfoTokenMapper
            at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
            at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
            at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
            at java.lang.reflect.Constructor.newInstance(Unknown Source)
            at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:446)
            at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:274)
            at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:77)
            at org.jboss.modules.Module.loadModuleClass(Module.java:713)
            at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
            at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
            at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
            at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
            at java.lang.Class.forName0(Native Method)
            at java.lang.Class.forName(Unknown Source)
            at java.util.ServiceLoader$LazyIterator.nextService(Unknown Source)
            at java.util.ServiceLoader$LazyIterator.next(Unknown Source)
            at java.util.ServiceLoader$1.next(Unknown Source)
            at org.keycloak.provider.DefaultProviderLoader.load(DefaultProviderLoader.java:60)
            at org.keycloak.provider.ProviderManager.load(ProviderManager.java:92)
            at org.keycloak.services.DefaultKeycloakSessionFactory.loadFactories(DefaultKeycloakSessionFactory.java:214)
            at org.keycloak.services.DefaultKeycloakSessionFactory.deploy(DefaultKeycloakSessionFactory.java:115)
            at org.keycloak.provider.ProviderManagerRegistry.deploy(ProviderManagerRegistry.java:42)
            at org.keycloak.subsystem.server.extension.KeycloakProviderDeploymentProcessor.deploy(KeycloakProviderDeploymentProcessor.java:55)
            at org.jboss.as.server.deployment.DeploymentUnitPhaseService.start(DeploymentUnitPhaseService.java:165)
            ... 5 more

Why does Keycloak not find its own interface? Shouldn't it be provided out of the box?

What do I miss to make it work?

----------

**Edit 1**

I got a little bit further. I added a file 

> META-INF/jboss-deployment-structure.xml

with content

    <?xml version=""1.0"" encoding=""UTF-8""?>
    <jboss-deployment-structure>
        <deployment>
            <dependencies>
                <module name=""org.keycloak.keycloak-services""/>
            </dependencies>
        </deployment>
    </jboss-deployment-structure>

and now the exception is gone.

Unfortunately the method *transformUserInfoToken()* in my class is still not called on token request.

Can anyone put me in the right direction please?",50528007,"It finally works. Even there are still open questions I could implement the needed functionality.

I had to implement the Interface
> org.keycloak.protocol.oidc.mappers.OIDCAccessTokenMapper

(instead of `org.keycloak.protocol.oidc.mappers.UserInfoTokenMapper`)

Now my *transformAccessToken()* method is called on every request to URL `http://<host>:<port>/auth/realms/testrealm/protocol/openid-connect/token`

I think the problem came from my misunderstanding of the terms AccessToken, UserInfo and IDToken. I thought all three are part of the token generated. But it seems the *OIDCAccessTokenMapper* is the only way to get additional information into the access token.

The remaining open question for me is where the UserInfo and the IDToken would appear. Maybe somebody can give an answer for that.
"
61815866,Disable Refresh Token in Keycloak,"We have an Angular SPA that is authorized by OIDC using the Implicit Flow. We use Keycloak as our authorization server. The Access Token has a short lifespan and is refreshed regularly via a hidden iframe.

After reading that the Authorization Code Flow + PKCE is the new recommended way to authorize SPA's, we decided to switch flows.
Everything works fine, but Keycloak does give us a Refresh Token (along with Access and ID-Token) every time we call the Token-Endpoint.
As there is no secure way to store the Refresh Token, we want to continue using the hidden iframe method for refreshing the access token.

Is there a way to disable refresh tokens in Keycloak?
Or are we missing something? Is it OK to store Refresh Tokens in a SPA?",69984112,"More recent versions of Keycloak have implemented this feature at the client level under the ""OpenID Connect Compatibility Modes"" section.

I've verified with version 14.x."
60147033,Keycloak fails to import exported realm running in docker,"I started my keycloak service using the command: 
```
docker run -d -p 8180:8080 -e KEYCLOAK_USER=admin -e \
KEYCLOAK_PASSWORD=admin -v $(pwd):/tmp --name kc \
jboss/keycloak:8.0.2
```

I created a new realm on keycloak only giving it a name, nothing else. Exported it running the command:
```
docker exec -it kc keycloak/bin/standalone.sh \
-Djboss.socket.binding.port-offset=100 -Dkeycloak.migration.action=export \
-Dkeycloak.migration.provider=singleFile \
-Dkeycloak.migration.realmName=my_realm \
-Dkeycloak.migration.usersExportStrategy=REALM_FILE \
-Dkeycloak.migration.file=/tmp/my_realm.json
```

I now have the realm in the my_realm.json file. I then start a new keycloak using docker compose to set up my entire test environment. I build a new docker image with the this DockerFile:
```
FROM jboss/keycloak:8.0.2

COPY my_realm.json /tmp/my_realm.json

ENV KEYCLOAK_IMPORT /tmp/my_realm.json
ENV KEYCLOAK_MIGRATION_STRATEGY OVERWRITE_EXISTING
```
Docker compose:
```
version: '3.4'
volumes:
  postgres_kc_data:
    driver: local
services:
  kc_postgresql:
    image: postgres:11.5
    volumes:
      - postgres_kc_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: kc
      POSTGRES_USER: kc
      POSTGRES_DB: kcdb
    ports:
      - 50009:5432
  keycloak:
    build: ""./keycloak/"" # ref to folder with above DockerFile
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: kc_postgresql
      DB_DATABASE: kcdb
      DB_SCHEMA: public
      DB_USER: kc
      DB_PASSWORD: kc
    depends_on:
      - kc_postgresql
    ports:
    - 8080:8080
``` 

The log output from running docker compose indicates that it is not able to import realm, and suggests something about validating the clients. I added no clients, so these are the default ones.

```
08:39:46,713 WARN  [org.keycloak.services] (ServerService Thread Pool -- 67) KC-SERVICES0005: Unable to import realm Demo from file /tmp/my_realm.json.: java.lang.NullPointerException
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.url.DefaultHostnameProvider.resolveUri(DefaultHostnameProvider.java:83)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.url.DefaultHostnameProvider.getScheme(DefaultHostnameProvider.java:38)
	at org.keycloak.keycloak-server-spi@8.0.2//org.keycloak.models.KeycloakUriInfo.<init>(KeycloakUriInfo.java:46)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.services.DefaultKeycloakContext.getUri(DefaultKeycloakContext.java:79)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.services.util.ResolveRelative.resolveRootUrl(ResolveRelative.java:45)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.validation.DefaultClientValidationProvider.validate(DefaultClientValidationProvider.java:44)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.validation.DefaultClientValidationProvider.validate(DefaultClientValidationProvider.java:37)
	at org.keycloak.keycloak-server-spi-private@8.0.2//org.keycloak.validation.ClientValidationUtil.validate(ClientValidationUtil.java:30)
	at org.keycloak.keycloak-server-spi-private@8.0.2//org.keycloak.models.utils.RepresentationToModel.createClients(RepresentationToModel.java:1224)
	at org.keycloak.keycloak-server-spi-private@8.0.2//org.keycloak.models.utils.RepresentationToModel.importRealm(RepresentationToModel.java:362)
	at org.keycloak.keycloak-services@8.0.2//org.keycloak.services.managers.RealmManager.importRealm(RealmManager.java:506)

```
Any pointers are welcome!

",60373405,Upgrading to 9.0.0 fixes it for me.
35704546,How to use the keycloak admin-url for OpenID logout requests,"JBoss keycloak offers an admin url in the client settings, where you can react on logout push events or _other_ events. Unfortunatly I cannot find any documentation about how to use this url? Can you give me a hint, if this is e.g. part of OpenID Spec or if a API Doc exists for this.

Especially I want to know how I can realise a client endpoint, which reacts on logout or revocation requests from the keycloak server.

 * Documentation in KC about the Admin URL: <http://keycloak.github.io/docs/userguide/keycloak-server/html/applicationClustering.html#admin-url-configuration>

Thanks
Christian",36106725,"AFAIK the use of the Admin URL is Keycloak specific, and not part of Open ID Connect or OAuth. 

I suppose you'll need to take a look at the code, i.e. [PreAuthActionsHandler#handleRequest][1] handles URLs ending with `k_logout` and `k_push_not_before`.

The easiest way to handle these events is to use a Keycloak client adapter. The adapter (available for Jetty, Tomcat and others) will automatically handle this for you. Just specify any URL of your deployed application and the client adapter will do the rest.

  [1]: https://github.com/keycloak/keycloak/blob/master/adapters/oidc/adapter-core/src/main/java/org/keycloak/adapters/PreAuthActionsHandler.java"
47305946,Keycloak: getting back from user profile page,"In my application I have a link that redirects to the user's account page on the Keycloak server.
In this page the user can update his personal information.

The problem is that after entering his account page the user has no way to get back to the application.

There's a way to let the user get back without editing the page theme? ",47313003,"I found the answer by looking at the freemaker template.

In my case I had to:

1. Set the application URL in the **Base URL** option in the Keycloak client settings.
2. Append the parameter `?referrer=<Client ID>` on the URL that links to the user profile page.

   ie `http://127.0.0.1:8080/auth/realms/<realm>/account?referrer=<Client ID>`

With these two settings the link to go back to the application will be visible."
57474253,How to edit standalone.xml file dynamically in keycloak,"I am trying to edit the standalone.xml through docker and trying to add but the keycloak is taking its `standalone.xml` . But I am able to see the changes inside the standalone.xml file. I need to add this line in standalone.xml file

     <provider>module:org.keycloak.examples.event-sysout</provider>

Also tried hot deployement but then can't fetch third party libraries code ",57477536,"First, it seems in a docker container by default standalone-ha.xml is used. You can find this in /opt/jboss/tools/docker-entrypoint.sh.
Second, I think after changing configuration file you'll have to restart keycloak server (container).

Not sure what do you mean by ""dynamically"". But it will be easier to modify the file locally and build a custom docker image. Dockerfile may look like:

    FROM jboss/keycloak:6.0.1
    ADD <path on your system>/standalone-ha.xml /opt/jboss/keycloak/standalone/configuration/standalone-ha.xml"
56666054,Keycloak: mapping username on subject claim,"I need to configure Keycloak so that it creates a JWT with claim ""sub"" populated with the username, instead of the default userId in sub.

It means that instead of this token:

    {
        ""jti"": ""b1384883-9b59-4788-b09f-98b40b7e3c3b"",
       ...
        ""sub"": ""fbdb4e4a-6e93-4b08-a1e7-0b7bd08520a6"",
        ""preferred_username"": ""m123456""
    }

I need to receive:  

     {
        ""jti"": ""b1384883-9b59-4788-b09f-98b40b7e3c3b"",
        ...
        ""sub"": ""m123456"",
        ""preferred_username"": ""m123456""
     }

Could you please suggest how to do that?

I tried username mapper, but it adds a second ""sub"" claim and with the jwt is not valid.

",56669553,"I solved in this way.

1) In ""Clients"" configure section choose your client

2) Go to ""Mappers"" tab and Create a new ""Script Mapper""

3) An editable section called ""Script"" will open and inside it you can edit the following line:  `token.setSubject(user.getUsername());`

4) Now my token contains  `""sub"": ""user123456""`

5) Take a look to this image

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/MWP8u.png"
51728612,View/configure access log of Keycloak HTTP server,"How to view/configure access logs of HTTP server Keycloak uses?

I'm trying to investigate *connection_refused_error* to Keycloak admin UI.
",51761906,"Try adding the following `<access-log/>` tag to your server configuration file, for example: `standalone/configuration/standalone.xml`.

            <subsystem xmlns=""urn:jboss:domain:undertow:4.0"">
                <buffer-cache name=""default""/>
                <server name=""default-server"">
                    ...
                    <host name=""default-host"" alias=""localhost"">
                        <location name=""/"" handler=""welcome-content""/>
                        <!-- Add the following one line -->
                        <access-log prefix=""access."" />
                        <http-invoker security-realm=""ApplicationRealm""/>
                        <filter-ref name=""proxy-peer""/>
                    </host>
                </server>

You can see `access.log` in your `standalone/log/` directory after restarting your Keycloak server and the log file is rotated daily with a name like `access.2019-07-26.log`.

**EDIT:**

You can also use JBoss CLI as follows:

```
$ ./jboss-cli.sh
You are disconnected at the moment. Type 'connect' to connect to the server or 'help' for the list of supported commands.
[disconnected /] connect
[standalone@localhost:9990 /] /subsystem=undertow/server=default-server/host=default-host/setting=access-log:add
{""outcome"" => ""success""}
```

these commands adds the one line to `standalone.xml`:

```xml
<access-log/>
```

the next command shows the access log settings (default values):

```
[standalone@localhost:9990 /] /subsystem=undertow/server=default-server/host=default-host/setting=access-log:read-resource
{
    ""outcome"" => ""success"",
    ""result"" => {
        ""directory"" => expression ""${jboss.server.log.dir}"",
        ""extended"" => false,
        ""pattern"" => ""common"",
        ""predicate"" => undefined,
        ""prefix"" => ""access_log."",
        ""relative-to"" => undefined,
        ""rotate"" => true,
        ""suffix"" => ""log"",
        ""use-server-log"" => false,
        ""worker"" => ""default""
    },
    ""response-headers"" => {""process-state"" => ""reload-required""}
}
```

You can change an attribute (for example, `prefix`) by the command:

```
[standalone@localhost:9990 /] /subsystem=undertow/server=default-server/host=default-host/setting=access-log:write-attribute(name=prefix,value=access.)
```
"
49190827,Keycloak logout does not end session,"I am using Keycloak 3.4 in a Java Application using Spring Framework and Jetty 8.1 with Keycloak Jetty-81-Adapter 3.4.

According to the Keycloak documentation I should be able to use the HttpServletRequest in a Java EE application to logout from Keycloak. However, this does not work in my case, even though Jetty supports HttpServletRequests.

> You can log out of a web application in multiple ways. For Java EE servlet containers, you can call HttpServletRequest.logout()..

If I try to logout this way, I get redirected to keycloak (login screen with option to choose from multiple realm logins). When I choose my preferred realm however, I am immediately logged in to the webapplication again, without having to provide any credentials.

I tried the alternative approach, by redirecting to Keycloak:

> For other browser applications, you can redirect the browser to  
http://auth-server/auth/realms/{realm-name}/protocol/openid-connect/logout?redirect_uri=encodedRedirectUri

 but it throws a connection refused error in the Keycloak log, because Keycloak tries to call my webapp in a direct way. It has no effect on the Keycloak session, which stays active. I strongly prefer no serverside calls necessary from Keycloak to the webapp directly.

Any suggestions why the `HttpServletRequest.logout()` does not destroy the keycloak session in my case? 
Is the Jetty implementation of the HttpServletRequest so different from the Java EE implementation that it could not work at all?",49190913,"I have had a similar experience when using a remote (OIDC) identity provider. What I found was that the `HttpServletRequest.logout` did actually destroy the session in `Keycloak`, but did not propagate to the logout url of my remote identity provider. When going to the remote login-site, it just immediatly redirected me back, seeing that I had an active session. This looked a lot like the keycloak session wasn't actually invalidated, but I checked and it was. Using a browser redirect to the url did logout on both places. Might be a bug in `Keycloak`.

Could it be that you are facing the same problem? To verify, try logging out, then select your client in keycloak and list sessions, to see whether it still exists in Keycloak."
47956933,Keycloak upgrade while running on docker,"I'm planning to run my keycloak instance using docker (http://blog.keycloak.org/2015/04/running-keycloak-cluster-with-docker.html) with simplest possible stack 

1. Docker image for keycloak itself, latest tag
2. Mysql image for keycloak db with docker volume attached for persistance

The only question that I can't figure out now is how to upgrade keycloak to latest when they release new version and DB schema needs migration. They provide steps how to do migration (https://github.com/keycloak/keycloak-documentation/blob/master/server_admin/topics/MigrationFromOlderVersions.adoc) but I cannot figure out what steps should happen when your keycloak is containerized.

Any advice will be much appreciated.",48114278,"**DB migration**

Keycloak [comes with Liquibase][1] for managing DB versions. What you have to do to upgrade your keycloak should be:

 - Backup your DB content and non-DB content (custom providers, themes,
    and so on).
    

 - Run docker again with a newer keycloak tag. Then, Liquibase will
    detect an older version of the DB and perform the necessary steps in
    order to have it updated. Remember you must provide keycloak with
    some user to grant DB altering permissions.

**Config file migration**

There's no automation for this task. If you haven't altered the configuration files, just run the new image. If you have edited them, you need to prepare them for the new version and run the image.

As I've got keycloak configured to run behind a reverse proxy and that needs to have custom configuration files, I wrote a Dockerfile to have my own keycloak docker image, with my own configuration wrapped:

    FROM jboss/keycloak-mysql:2.4.0.Final
    ADD standalone.xml /opt/jboss/keycloak/standalone/configuration
    ADD standalone-ha.xml /opt/jboss/keycloak/standalone/configuration
    CMD [""-b"", ""0.0.0.0""]

**Provider, theme... migration**

If you have implemented custom providers or other kind of things, you'll need to check their compatibility with the new version. Otherwise, you might need to rewrite them.


----------


As a rule, using **latest** tag is generally a bad idea for production environments, for any image. There is the risk to have any developer/sysadmin running `docker pull` command and performing the updating process automatically, which I guess is not what you want. Better stick to fixed version numbers and perform updates yourself, having done the backups first.

**See also:**

 - [Keycloak docker tags][3]


  [1]: https://github.com/keycloak/keycloak/blob/master/misc/UpdatingDatabaseSchema.md
  [3]: https://hub.docker.com/r/jboss/keycloak/tags/"
42071682,How to update password via keyclaok admin rest api by execute-actions-email,"I am trying to trigger the password-reset process in keycloack, such that the user receives an email to set a new password. Unfortunately I always get 400 response with 

> com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token
 at [Source: io.undertow.servlet.spec.ServletInputStreamImpl@89719e69; line: 1, column: 1]

I call keycloak on described api: ""PUT /admin/realms/{realm}/users/{id}/execute-actions-email"" with following object:

    {""actions"":[""UPDATE_PASSWORD""]}

see:
http://www.keycloak.org/docs/rest-api/index.html#_send_a_update_account_email_to_the_user",42114571,"Solution: Use only `[""UPDATE_PASSWORD""]` as body for your request and it works...

an in java: `Entity.json(""[\""UPDATE_PASSWORD\""]"");`"
72019588,"How to avoid ""timeout when waiting for 3rd party check iframe message"" with Keycloak and Angular","I'm trying to securize an Angular app with a Keycloak server. I've followed some tutorials that give more or less the same instructions in order to do so, but I got stuck with the following error:
> Timeout when waiting for 3rd party check iframe message.

I start my keycloak server using the following docker-compose configuration:
```
auth:
  container_name: nerthus-tech-auth
  image: quay.io/keycloak/keycloak:17.0.1
  command: start-dev
  environment:
    KEYCLOAK_ADMIN: admin
    KEYCLOAK_ADMIN_PASSWORD: admin
    KC_DB: postgres
    KC_DB_URL: jdbc:postgresql://database:5432/keycloak
    KC_DB_USERNAME: keycloak
    KC_DB_PASSWORD: str0ngP@ssword
  ports:
    - 10010:8080
```
I've created a realm (nerthus) and a client (blog) which is public and has the following configuration:
- Root URL: http://localhost:4200
- Valid redirect URLs: http://localhost:4200/* (which in my understanding I should be able to abbreviate as *)
- Web origins: +

On the Angular app side, I've installed the keycloak-angular and keycloak-js dependencies:
```
""keycloak-angular"": ""^9.1.0"",
""keycloak-js"": ""^16.1.1""
```

I've also registered an initializer for Keycloak:
```
providers: [
  {
    provide: APP_INITIALIZER,
    useFactory: initializeKeycloak,
    multi: true,
    deps: [KeycloakService]
  }
]
```

```
function initializeKeycloak(keycloakService: KeycloakService) {
  return () => keycloakService.init({
                                      config: {
                                        url: 'http://localhost:10010',
                                        realm: 'nerthus',
                                        clientId: 'blog'
                                      }
                                    });
}
```

For that one I also tried to use initOptions.onLoad (with ""login-required"" and ""check-sso""), but that causes the app to require authentication to access any page, which is not the intended behaviour.

I want only the guarded page to require authentication. Hence the guard I set up:
```
@Injectable({
  providedIn: 'root'
})
export class AuthGuard extends KeycloakAuthGuard {
  constructor(protected override readonly router: Router,
              protected override readonly keycloakAngular: KeycloakService) {
    super(router, keycloakAngular);
  }

  async isAccessAllowed(route: ActivatedRouteSnapshot,
                        state: RouterStateSnapshot): Promise<boolean | UrlTree> {
    if (!this.authenticated) {
      await this.keycloakAngular.login({ redirectUri: window.location.origin + state.url });
    }

    return this.authenticated;
  }
}
```

Surely I'm missing something, but I can't make it work. I tried to be succinct, so if some important information is missing, please ask me.",72069273,"My solution is set the checkLoginIframe to false. Below is my configuration: 

     keycloak.init({
      config: {
          url: 'http://localhost:10010',
          realm: 'nerthus',
          clientId: 'blog'
      },
      initOptions: {
        
        pkceMethod: 'S256', 
        // must match to the configured value in keycloak
        redirectUri: 'http://localhost:4200/your_url',   
        // this will solved the error 
        checkLoginIframe: false
      }});

Hopes it will helps. =)"
60312517,Keycloak - Add/Remove Realm role from a user using APIcalls,"passing userRepresentation.id
to  keycloakServerURL + ""/auth/admin/realms/XXXX/users/""+userId+""/role-mappings/realm""
I get these roles for a certain user...

    [
    	{
    		""id"": ""xxxxxxx-1faf-4604-832a-fa7ab7eb4344"",
    		""name"": ""uma_authorization"",
    		""description"": ""${role_uma_authorization}"",
    		""composite"": false,
    		""clientRole"": false,
    		""containerId"": ""XXXX""
    	},
    	{
    		""id"": ""xxxxxxx-ad9f-444e-adf4-be11ab7a3d98"",
    		""name"": ""member_paid"",
    		""description"": ""Membership Paid"",
    		""composite"": false,
    		""clientRole"": false,
    		""containerId"": ""XXXX""
    	},
    	{
    		""id"": ""xxxxx-2d73-48a8-844d-a953cb570270"",
    		""name"": ""offline_access"",
    		""description"": ""${role_offline-access}"",
    		""composite"": false,
    		""clientRole"": false,
    		""containerId"": ""XXXX""
    	}
    ]

I cannot figure out which API I am supposed to use to add/remove a role from/to the User.

Please can you advise what is the API I need to use

The best I can find is this one below but I don't know what the params (Path and request property should be)...

	public void removeRole(JsonObject userToken, String clientId, String role) throws IOException {

        /auth/admin/realms/XXXX/groups/"" + role + ""/role-mappings/clients/"" + clientId);
	
		...
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setRequestMethod(""POST"");

		con.setRequestProperty(""id"", clientId);
		con.setRequestProperty(""name"", role);
		....",60314550,"**Endpoints** are

Get Role Mappings:

> GET /auth/admin/realms/{Realm}/users/{userid}/role-mappings/realm

Add Role Mappings:

> POST /auth/admin/realms/{Realm}/users/{userid}/role-mappings/realm

Delete Role Mappings:

> DELETE /auth/admin/realms/{Realm}/users/{userid}/role-mappings/realm


## Example Add Role ##

You have a role e.g. named `testrole` with the id `dc5572a5-b7e0-4c4b-b841-dc88108df70f` (you see it in the url when you have opened the keycloak admin GUI, or you fetch it with some other RestAPI Request)

Now we have a Request of Type `POST` to the endpoint `/auth/admin/realms/{Realm}/users/{userid}/role-mappings/realm` with a body of type `application/json` and the following body-value

    [
        {
            ""id"": ""dc5572a5-b7e0-4c4b-b841-dc88108df70f"",
            ""name"" : ""testrole""
        }
    ]

After successful execution you get a response with HTTP-Code 204 => The `testrole` - role mapping is applied to this user

### Example Curl Request ###

    curl --request POST \
      --url http://localhost/auth/admin/realms/{Realm}/users/{userid}/role-mappings/realm \
      --header 'authorization: Bearer eyJh......h3RLw' \
      --header 'content-type: application/json' \
      --data '[
        {
            ""id"": ""dc5572a5-b7e0-4c4b-b841-dc88108df70f"",
            ""name"" : ""testrole""
        }
    ]'


If you want to delete it again, just send the same request (same body) but with the HTTP-method `DELETE` instead of `POST`

Please let me now if this solved your issue

"
51958647,NullPointerException on all KeyCloak Admin API Calls,"I am trying to make calls to the KeyCloak Admin API using the Java client.  Regardless of which operation I try -- create a realm, create user accounts, etc. -- I get the following Exception:

> javax.ws.rs.ProcessingException: java.lang.NullPointerException 	at
> org.keycloak.admin.client.resource.BearerAuthFilter.filter(BearerAuthFilter.java:53)
> 	at
> org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.filterRequest(ClientInvocation.java:573)
> 	at
> org.jboss.resteasy.client.jaxrs.internal.ClientInvocation.invoke(ClientInvocation.java:438)
> 	at
> org.jboss.resteasy.client.jaxrs.internal.proxy.ClientInvoker.invoke(ClientInvoker.java:102)
> 	at
> org.jboss.resteasy.client.jaxrs.internal.proxy.ClientProxy.invoke(ClientProxy.java:76)
> 	at com.sun.proxy.$Proxy214.create(Unknown Source)


My KeyCloak code looks like this...

    Keycloak kc = KeycloakBuilder.builder().realm(""master"").clientId(""admin-cli"").username(""admin"")	.password(""password"").serverUrl(""http://localhost:8880/auth"")
    				.resteasyClient(new ResteasyClientBuilder().connectionPoolSize(10).build()).build();
    
    RealmRepresentation realm = new RealmRepresentation();
    		realm.setDisplayName(displayName);
    		realm.setDisplayNameHtml(displayName);
    		realm.setRealm(realmName);
    		realm.setEnabled(enabled);
    
    kc.realms().create(realm);

It is at this point I see the Exception.  Any idea on what could be going wrong here?  I see the Exception on ALL operations against the admin API.  I know that the data is available, because I am able to make a curl call against the admin API and it works fine.

    curl -vki -H ""Authorization: Bearer XXXXX"" http://localhost:8880/auth/admin/realms/master

When I make this call, I see the expected results.  I only get failures when using the Java client.  Any idea what's going on here??

***UPDATE***

I've increased the debugging logs on my KeyCloak instance.  I see the following messages after attempting to create a security realm.  (Note:  I see similar errors regardless of what operation I perform)

    14:36:16,553 DEBUG [org.keycloak.transaction.JtaTransactionWrapper] (default task-24) new JtaTransactionWrapper
    14:36:16,553 DEBUG [org.keycloak.transaction.JtaTransactionWrapper] (default task-24) was existing? false
    14:36:16,557 DEBUG [org.keycloak.authentication.AuthenticationProcessor] (default task-24) AUTHENTICATE CLIENT
    14:36:16,557 DEBUG [org.keycloak.authentication.ClientAuthenticationFlow] (default task-24) client authenticator: client-secret
    14:36:16,557 DEBUG [org.keycloak.authentication.ClientAuthenticationFlow] (default task-24) client authenticator SUCCESS: client-secret
    14:36:16,557 DEBUG [org.keycloak.authentication.ClientAuthenticationFlow] (default task-24) Client admin-cli authenticated by client-secret
    14:36:16,558 DEBUG [org.keycloak.authentication.AuthenticationProcessor] (default task-24) AUTHENTICATE ONLY
    14:36:16,559 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) processFlow
    14:36:16,559 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) check execution: direct-grant-validate-username requirement: REQUIRED
    14:36:16,559 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator: direct-grant-validate-username
    14:36:16,560 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) invoke authenticator.authenticate: direct-grant-validate-username
    14:36:16,560 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator SUCCESS: direct-grant-validate-username
    14:36:16,561 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) check execution: direct-grant-validate-password requirement: REQUIRED
    14:36:16,561 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator: direct-grant-validate-password
    14:36:16,561 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) invoke authenticator.authenticate: direct-grant-validate-password
    14:36:16,658 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator SUCCESS: direct-grant-validate-password
    14:36:16,658 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) check execution: direct-grant-validate-otp requirement: OPTIONAL
    14:36:16,659 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator: direct-grant-validate-otp
    14:36:16,659 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) invoke authenticator.authenticate: direct-grant-validate-otp
    14:36:16,659 DEBUG [org.keycloak.authentication.DefaultAuthenticationFlow] (default task-24) authenticator ATTEMPTED: direct-grant-validate-otp
    14:36:16,661 DEBUG [org.keycloak.services.managers.AuthenticationSessionManager] (default task-24) Removing authSession 'df66e278-8ffe-47ab-84d1-36ffe9152021'. Expire restart cookie: true
    14:36:16,673 DEBUG [org.keycloak.events] (default task-24) type=LOGIN, realmId=master, clientId=admin-cli, userId=c830af10-3cfd-4ce0-b1aa-83a857a290d7, ipAddress=172.18.0.1, auth_method=openid-connect, token_id=8876c7ad-3ea4-4356-8fc2-f9b50112b952, grant_type=password, refresh_token_type=Refresh, scope='profile email', refresh_token_id=4c2325fc-0bb5-40d9-af55-4985546fd39a, client_auth_method=client-secret, username=kcadmin
    14:36:16,673 DEBUG [org.keycloak.transaction.JtaTransactionWrapper] (default task-24) JtaTransactionWrapper  commit
    14:36:16,676 DEBUG [org.keycloak.transaction.JtaTransactionWrapper] (default task-24) JtaTransactionWrapper end

***UPDATE 2***

It appears as though this issue is related to running this code within a Java EE container.  If I run the exact same code in a standalone class, it works with no issue.  However, if I copy and paste the code to a servlet and attempt to run it, I receive the `NullPointerException`.  I am running the code on Wildfly 13 when I encounter the problem.  I also see this issue when running integration tests via Arquillian.  My assumption is that it must have something to do with dependencies, but I'm at a loss as to what needs to be changed.",51971600,"Solved!!  Apparently my Wildfly 13.0 instance was configured to enable Java EE 8 support.  This seems to be the root cause of the issue, because removing that flag enabled all test cases to work as expected.  Not sure why this was a problem, but it was definitely the underlying issue."
43222769,How to create keycloak client role programmatically and assign to user,"I want to create keycloak client role programmatically and assign to user created dynamically. Below is my code for creating user 

    UserRepresentation user = new UserRepresentation();
	user.setEmail(""xxxxx@xxx.com"");
	user.setUsername(""xxxx"");
	user.setFirstName(""xxx"");
	user.setLastName(""m"");
	user.setEnabled(true);
	Response response = kc.realm(""YYYYY"").users().create(user);

",43252205,"Here is a solution to your request (not very beautiful, but it works):

    // Get keycloak client
    Keycloak kc = Keycloak.getInstance(""http://localhost:8080/auth"",
                    ""master"", ""admin"", ""admin"", ""admin-cli"");
    
    // Create the role
    RoleRepresentation clientRoleRepresentation = new RoleRepresentation();
    clientRoleRepresentation.setName(""client_role"");
    clientRoleRepresentation.setClientRole(true);
    kc.realm(""RealmID"").clients().findByClientId(""ClientID"").forEach(clientRepresentation ->
    	kc.realm(""RealmID"").clients().get(clientRepresentation.getId()).roles().create(clientRoleRepresentation)
    );
    
    // Create the user
    UserRepresentation user = new UserRepresentation();
    user.setUsername(""test"");
    user.setEnabled(true);
    Response response = kc.realm(""RealmID"").users().create(user);
    String userId = getCreatedId(response);
    
    // Assign role to the user
    kc.realm(""RealmID"").clients().findByClientId(""ClientID"").forEach(clientRepresentation -> {
    	RoleRepresentation savedRoleRepresentation = kc.realm(""RealmID"").clients()
    			.get(clientRepresentation.getId()).roles().get(""client_role"").toRepresentation();
    	kc.realm(""RealmID"").users().get(userId).roles().clientLevel(clientRepresentation.getId())
                .add(asList(savedRoleRepresentation));
    });
    
    // Update credentials to make sure, that the user can log in
    UserResource userResource = kc.realm(""RealmID"").users().get(userId);
    userResource.resetPassword(credential);
    
With the help method:

    private String getCreatedId(Response response) {
        URI location = response.getLocation();
        if (!response.getStatusInfo().equals(Response.Status.CREATED)) {
            Response.StatusType statusInfo = response.getStatusInfo();
            throw new WebApplicationException(""Create method returned status "" +
                    statusInfo.getReasonPhrase() + "" (Code: "" + statusInfo.getStatusCode() + ""); expected status: Created (201)"", response);
        }
        if (location == null) {
            return null;
        }
        String path = location.getPath();
        return path.substring(path.lastIndexOf('/') + 1);
    }"
40776626,Keycloak Remove First Name and Last Name fields on Registration Screen,"In Keycloak we have a created a custom ftl registration theme that has removed the optional first name and last name fields. Our system only requires the user to have an email address and password.

However when the user hits enter an error is displayed indicating that the first name and last name need to be entered. 

In the Keycloak UserModel these fields are optional, and it is also possible to create users via the admin console / api without firstname and lastname. 

How do we remove these fields from the keycloak form validation on the registration screen?",40776783,"Profile Validation can be disabled from the Authentication -> Flows area in the Admin Console.

Changing the dropdown option to 'Registration' will display the actions used on the Registration Form.  Setting 'Profile Validation' to DISABLED will prevent the [RegistrationProfile][1] Form Action from being used.

This will prevent all 3 fields (First Name, Last Name & Email) from being checked, you would probably need to implement your own validation action if you wanted more control over which fields to check.


  [1]: https://github.com/keycloak/keycloak/blob/master/services/src/main/java/org/keycloak/authentication/forms/RegistrationProfile.java ""RegistrationProfile"""
58436689,React keycloak TypeError: kc.updateToken(...).success is not a function,"I was on keycloak implementation.

This is my keycloak init config:

    const token = localStorage.getItem('kc_token');
    const refreshToken = localStorage.getItem('kc_refreshToken');

    export const keycloakInitConfig = {
      onLoad: 'login-required',
      promiseType: 'native',
      token,
      refreshToken,
    };

And sometimes I got this error

> TypeError: kc.updateToken(...).success is not a function

if anybody can help me, very thanks.

**UPDATE 1:**

                            kc.updateToken(-1).success(function() {
                                kc.onAuthSuccess && kc.onAuthSuccess();
                                initPromise.setSuccess();
                            }).error(function() {
                                kc.onAuthError && kc.onAuthError();
                                if (initOptions.onLoad) {
                                    onLoad();
                                } else {
                                    initPromise.setError();
                                }
                            });

I have this in `node_modules` and my `keycloak-js` version is `6.0.0`.

**UPDATE 2:**

```
export const keycloakInitConfig = {
  onLoad: 'login-required',
  promiseType: 'native',
  token,
  refreshToken,
};

export const onKeycloakEvent = (store) => (event, error) => {
  console.log('event?????', event);
  if (event === 'onAuthSuccess') {
    keycloak.loadUserProfile()
      .then((userInfo) => {
        store.dispatch({
          type: actionTypes.SET_USER_INFO,
          payload: { user: userInfo },
        });
      })
      .catch((err) => {
        console.log('loadUserProfile: ', err);

        localStorage.removeItem('kc_token');
        localStorage.removeItem('kc_idToken');
        localStorage.removeItem('kc_refreshToken');

        store.dispatch({
          type: actionTypes.LOG_OUT,
        });

        keycloak.logout();
      });
  } else if (error) {
    console.log('onKeycloakEvent', event, error);
  }
};

export const onKeycloakTokens = (tokens) => {
  localStorage.setItem('kc_token', tokens.token);
  localStorage.setItem('kc_idToken', tokens.idToken);
  localStorage.setItem('kc_refreshToken', tokens.refreshToken);
};
```
And KeycloakProvider

    ReactDOM.render(
      <KeycloakProvider
        keycloak={keycloak}
        initConfig={keycloakInitConfig}
        onEvent={onKeycloakEvent(store)}
        onTokens={onKeycloakTokens}
      >
        ...
      </KeycloakProvider>,
      document.getElementById('root'),
    );",58577040,"This is an issue with keycloak-js itself and it is set to be released with version 8.0.0 of keycloak-js.

Also react-keycloak is not using .success() internally.

See here for more details about the issue .
[KEYCLOAK-8938][1]

I'd suggest you to avoid using promiseType: 'native' in your setup.


  [1]: https://issues.jboss.org/browse/KEYCLOAK-8938?_sscc=t"
71872587,Logout from next-auth with keycloak provider not works,"I have a nextjs application with next-auth to manage the authentication.

Here my configuration

```
....
export default NextAuth({
  // Configure one or more authentication providers
  providers: [
    KeycloakProvider({
      id: 'my-keycloack-2',
      name: 'my-keycloack-2',
      clientId: process.env.NEXTAUTH_CLIENT_ID,
      clientSecret: process.env.NEXTAUTH_CLIENT_SECRET,
      issuer: process.env.NEXTAUTH_CLIENT_ISSUER,
      profile: (profile) => ({
        ...profile,
        id: profile.sub
      })
    })
  ],
....
```

Authentication works as expected, but when i try to logout using the next-auth signOut function it doesn't works. Next-auth session is destroyed but keycloak mantain his session.",71872588,"After some research i found a reddit conversation https://www.reddit.com/r/nextjs/comments/redv1r/nextauth_signout_does_not_end_keycloak_session/ that describe the same problem.

Here my solution.

I write a custom function to logout 
```
  const logout = async (): Promise<void> => {
    const {
      data: { path }
    } = await axios.get('/api/auth/logout');
    await signOut({ redirect: false });
    window.location.href = path;
  };
```

And i define an api path to obtain the path to destroy the session on keycloak `/api/auth/logout`
```
export default (req, res) => {
  const path = `${process.env.NEXTAUTH_CLIENT_ISSUER}/protocol/openid-connect/logout? 
                redirect_uri=${encodeURIComponent(process.env.NEXTAUTH_URL)}`;

  res.status(200).json({ path });
};
```

**UPDATE** 

In the latest versions of keycloak (at time of this post update is 19.\*.\* -> https://github.com/keycloak/keycloak-documentation/blob/main/securing_apps/topics/oidc/java/logout.adoc) the redirect uri becomes a bit more complex

```
export default (req, res) => {

  const session = await getSession({ req });

  let path = `${process.env.NEXTAUTH_CLIENT_ISSUER}/protocol/openid-connect/logout? 
                post_logout_redirect_uri=${encodeURIComponent(process.env.NEXTAUTH_URL)}`;

if(session?.id_token) {
  path = path + `&id_token_hint=${session.id_token}`
} else {
  path = path + `&client_id=${process.env.NEXTAUTH_CLIENT_ID}`
}

  res.status(200).json({ path });
};
```

> Note that you need to include either the client_id or id_token_hint parameter in case that post_logout_redirect_uri is included.


"
57914517,How to redirect angular app from keycloak login to specific routes,"I am writing an **Angular 8** app that uses **Keycloak 7.0.0** for user authentication and authorization. 

Current workflow specifies:

 1. A user accesses the web site which is written in Angular
 2. The user gets redirected to Keycloak server for a specific realm login
 3. After a successful login the user will be redirected to one of several (Angular) routes - depending upon the user's role defined in Keycloak (however, the redirect route is being determined inside an angular component which gets user role and redirects). So, after login Keycloak redirects to empty route and the component sets redirect route. 

The issue is that after a successful login, if a user were to open another tab and enter a URL with route being specified, Keycloak would find a token and cookie for current session and not authenticate the user, but would  still redirect him to the empty route. After that, the feature that redirects to routes depending on user role, would redirect to the default route for the user's role.

I am interested how to enable Keycloak to, after validating login, redirect to the initial route it received, and not just the empty route?

I hope, no code would be needed because the code is in a private repository. I am using **keycloak-angular** and **keycloak-js** npm modules. Also, I have defined the **keycloak.servise.ts** that has access to the user's token and specifies that the login is required. 

P.S. I am not using the **authguard** to implement protected routes, but Keycloak redirects to the empty route and then, depending on user's roles, the component in the empty role redirects to the default one and locks those components that are not permitted. ",63668311,"Provide KeycloakLoginOptions in the Login method of KeycloakService.

e.g. 

    keycloakLoginOptions: KeycloakLoginOptions = {
        redirectUri: 'http://localhost:4200/dashboard'
      }

and then call this:
 

    this.keycloakService.login(this.keycloakLoginOptions);"
55454777,Keycloak says 403 Forbidden for HTTP Methods other than GET,"I`m setting up a Keycloak instance to work with spring boot app with spring security included. I use postman to test the service. I start with getting new access token and that works fine. When I do a HTTP GET call to secured endpoint - everything goes ok, staff is returned. But when I do a HTTP POST/PUT/DELETE call to secured endpoint Keycloak says Error 403 Forbidden. Please take a look and tell me what goes wrong. 

I have already tested http.csrf().disable() option, and then works fine, but it is not the solution for production.

SecurityConfig.java

<!-- language: lang-java -->

    @Configuration
    @EnableWebSecurity
    @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
    class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
    
    
        @Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) {
            KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
            keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(new SimpleAuthorityMapper());
            auth.authenticationProvider(keycloakAuthenticationProvider);
        }
    
        @Bean
        public KeycloakSpringBootConfigResolver KeycloakConfigResolver() {
            return new KeycloakSpringBootConfigResolver();
        }
    
        @Bean
        @Override
        protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
        }
    
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            super.configure(http);
            http
                    .authorizeRequests()
                    .antMatchers( ""/api/**"").hasRole(""my_admin"")
                    .anyRequest().permitAll();
        }

application.yml:
```
keycloak:
  auth-server-url: http://localhost:11080/auth
  realm: myrealm
  resource: myclient
  public-client: true
  principal-attribute: preferred_username
  ssl-required: external
  use-resource-role-mappings: true
```

Some logs from application (keycloak trace log level):
```
2019-04-01 14:04:54.741 DEBUG 2952 --- [io-1080-exec-10] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:1080/api/my-endpoint
2019-04-01 14:04:54.741 DEBUG 2952 --- [io-1080-exec-10] .k.a.t.AbstractAuthenticatedActionsValve : AuthenticatedActionsValve.invoke /api/my-endpoint
2019-04-01 14:04:54.741 DEBUG 2952 --- [io-1080-exec-10] o.k.a.AuthenticatedActionsHandler        : AuthenticatedActionsValve.invoke http://localhost:1080/api/my-endpoint
2019-04-01 14:04:54.741 DEBUG 2952 --- [io-1080-exec-10] o.k.a.AuthenticatedActionsHandler        : Policy enforcement is disabled.
2019-04-01 14:04:54.742 DEBUG 2952 --- [io-1080-exec-10] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:1080/error
2019-04-01 14:04:54.743 DEBUG 2952 --- [io-1080-exec-10] f.KeycloakAuthenticationProcessingFilter : Request is to process authentication
2019-04-01 14:04:54.743 DEBUG 2952 --- [io-1080-exec-10] f.KeycloakAuthenticationProcessingFilter : Attempting Keycloak authentication
2019-04-01 14:04:54.743 TRACE 2952 --- [io-1080-exec-10] o.k.adapters.RequestAuthenticator        : --> authenticate()
2019-04-01 14:04:54.743 TRACE 2952 --- [io-1080-exec-10] o.k.adapters.RequestAuthenticator        : try bearer
2019-04-01 14:04:54.743 DEBUG 2952 --- [io-1080-exec-10] o.k.a.BearerTokenRequestAuthenticator    : Found [1] values in authorization header, selecting the first value for Bearer.
2019-04-01 14:04:54.743 DEBUG 2952 --- [io-1080-exec-10] o.k.a.BearerTokenRequestAuthenticator    : Verifying access_token
2019-04-01 14:04:54.743 TRACE 2952 --- [io-1080-exec-10] o.k.a.BearerTokenRequestAuthenticator    : 	access_token: eyJhbs...blablab....signature
2019-04-01 14:04:54.744 DEBUG 2952 --- [io-1080-exec-10] o.k.a.BearerTokenRequestAuthenticator    : successful authorized
2019-04-01 14:04:54.744 TRACE 2952 --- [io-1080-exec-10] o.k.a.RefreshableKeycloakSecurityContext : checking whether to refresh.
2019-04-01 14:04:54.744 TRACE 2952 --- [io-1080-exec-10] org.keycloak.adapters.AdapterUtils       : useResourceRoleMappings
2019-04-01 14:04:54.744 TRACE 2952 --- [io-1080-exec-10] org.keycloak.adapters.AdapterUtils       : Setting roles: 
2019-04-01 14:04:54.744 TRACE 2952 --- [io-1080-exec-10] org.keycloak.adapters.AdapterUtils       :    role: my_admin
2019-04-01 14:04:54.744 DEBUG 2952 --- [io-1080-exec-10] a.s.a.SpringSecurityRequestAuthenticator : Completing bearer authentication. Bearer roles: [my_admin] 
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] o.k.adapters.RequestAuthenticator        : User 'my_user' invoking 'http://localhost:1080/error' on client 'myclient'
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] o.k.adapters.RequestAuthenticator        : Bearer AUTHENTICATED
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] f.KeycloakAuthenticationProcessingFilter : Auth outcome: AUTHENTICATED
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] f.KeycloakAuthenticationProcessingFilter : Authentication success using bearer token/basic authentication. Updating SecurityContextHolder to contain: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@fb0506b7: Principal: my_user; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@ecf147d; Granted Authorities: ROLE_my_admin
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] o.k.a.AuthenticatedActionsHandler        : AuthenticatedActionsValve.invoke http://localhost:1080/error
2019-04-01 14:04:54.745 DEBUG 2952 --- [io-1080-exec-10] o.k.a.AuthenticatedActionsHandler        : Policy enforcement is disabled.
```",57353601,"I found out that I have not used CSRF token in ajax requests. Spring Security automatically enables CSRF protection. CSRF token is automatically generated for first call of web service and it has session scope. You need to save that token in meta tag. It is required to include CSRF token to every non-GET request (GET requests are not needed to be protected with CSRF token, beacuse they are designed to non-modifying API calls).

<br>Solution: Just need to include that line in header of html page (thymeleaf):<br>
`<html xmlns:th=""http://www.thymeleaf.org"" xmlns:sec=""http://www.thymeleaf.org/extras/spring-security"">
<meta id=""_csrf"" name=""_csrf"" th:content=""${_csrf.token}""/>`

and use it in ajax call in header:<br>
`headers: {
  'X-CSRF-TOKEN': $('#_csrf').attr('content')
 },`
"
54865086,Keycloak not able to connect external DB after database restart?,"We are using Keycloak 4.2.1.Final and we noticed some weird issue.Keycloak is using external DB [Maria DB]

**How to reproduce the issue ?**

 1. Install and run the Keycloak.
 2. Use external DB to store data and we use a mariadb.
 3. Keycloak up/running,MariaDB up and running
 4. Now stop Mariadb service `systemctl stop  mariadb` and then start mariadb `systemctl start mariadb` and check keycloak wont work
 5. Try to login to keycloak https://localhost:8666/auth and check it wont allow to login.
 6. In server log it will show Connection is closed 

**Solution 1 -**

After restarting the Mariadb its mandatory to start the Keycloak service as well 
`service keycloak restart` then Keycloak will start responding properly.

But this is not a feasible Solution ,I am looking a proper solution for this .Anyone ever face or checked this type of issue?

 ",54883659,"At last this issue is resolve by modifying Stanalone.xml file of Keycloak.You can find the file into this location `/opt/keycloak/standalone/configuration/standalone.xml` ,you have to add below lines into the file 

   

     <validation>                   
           <check-valid-connection-sql>select 1</check-valid-connection-sql>
           <background-validation>true</background-validation>
           <background-validation-millis>15000</background-validation-millis>
        </validation>

This lines should be added inside `<datasource/>` tag after adding above changes `<datasource/>` will be look like this
 

    <datasource jndi-name=""java:jboss/datasources/KeycloakDS"" pool-name=""KeycloakDS"" enabled=""true"" use-java-context=""true""> 
         <connection-url>jdbc:mariadb://localhost:3306/DBName?autoReconnect=true</connection-url>
               <driver>mariadb</driver> 
                <security> 
                 <user-name>user</user-name> 
                 <password>${VAULT::datasource::default-password::1}</password>
                 </security>
    			 <validation>                     
    			 <check-valid-connection-sql>select 1</check-valid-connection-sql>
                 <background-validation>true</background-validation>
                  <background-validation-millis>15000</background-validation-millis>
                  </validation>
    </datasource>

"
46810019,Assign Roles programmatically to Groups with Keycloak API,"currently I try around with the Keycloak API and the Java client. At the moment I struggle to assign Roles to Groups programmatically. Unfortunately the documentation is not very elaborate at this point.

Here my example code:

    @Test
    public void testPushGroupWithRealmRoles() throws IOException {

        GroupRepresentation group = new GroupRepresentation();
        group.setName(""JUnit Test Group realm roles"");

        String editRoleName = ""junit_edit"";
        String deleteRoleName = ""junit_delete"";

        RoleRepresentation editRole = getRealmRole(editRoleName);
        if (editRole == null) {
            editRole = new RoleRepresentation(editRoleName, ""is allowed to edit"", false);
            getKeycloak().realm(clientConfig.getRealm()).roles().create(editRole);
        }

        RoleRepresentation deleteRole = getRealmRole(deleteRoleName);
        if (deleteRole == null) {
            deleteRole = new RoleRepresentation(deleteRoleName, ""is allowed to delete"", false);
            getKeycloak().realm(clientConfig.getRealm()).roles().create(deleteRole);
        }

        group.setRealmRoles(Arrays.asList(editRole.getName(), deleteRole.getName()));

        GroupResource existingGroup = getGroupRepresentation(group.getName());

        if(existingGroup != null){
            existingGroup.update(group);
        } else{
            getKeycloak().realm(clientConfig.getRealm()).groups().add(group);
        }
     }

The Group is created if not exists, the Roles are created if they don't exist but the assignment

    group.setRealmRoles(Arrays.asList(editRole.getName(), deleteRole.getName()));

What needs to be given as arguments in the list of strings? The name of the role? The technical ID of the role? (both did not work for me).

Any help is appreciated!

*UPDATE*
Thanks to ravthiru I was able to solve my problem. The working code is this:

    @Test
    public void testPushGroupWithRealmRoles() throws IOException {

        /*
        ensure the roles exist
         */
        String editRoleName = ""junit_edit"";
        String deleteRoleName = ""junit_delete"";

        RoleRepresentation editRole = getRealmRole(editRoleName);
        if (editRole == null) {
            editRole = new RoleRepresentation(editRoleName, ""is allowed to edit"", false);
            getKeycloak().realm(clientConfig.getRealm()).roles().create(editRole);
        }

        RoleRepresentation deleteRole = getRealmRole(deleteRoleName);
        if (deleteRole == null) {
            deleteRole = new RoleRepresentation(deleteRoleName, ""is allowed to delete"", false);
            getKeycloak().realm(clientConfig.getRealm()).roles().create(deleteRole);
        }


        /*
        ensure the group exists
         */
        GroupRepresentation group = new GroupRepresentation();
        group.setName(""JUnit Test Group realm roles"");

        GroupResource existingGroup = getGroupResource(group.getName());

        if (existingGroup != null) {
            existingGroup.update(group);
        } else {
            getKeycloak().realm(clientConfig.getRealm()).groups().add(group);
        }


        /*
        assign roles to group
         */
        existingGroup.roles().realmLevel().add(Arrays.asList(editRole, deleteRole));
    }
",46840891,"If you have created role already then you can associate the role with group with the following code. 
   
     RoleRepresentation grouprole = realm.roles().get(""grouprole"").toRepresentation();

     List<RoleRepresentation> roles = new LinkedList<>();
     roles.add(grouprole);
     realm.groups().group(myGroup.getId()).roles().realmLevel().add(roles);

here ""grouprole"" role is associated to ""myGroup"" group"
54712132,How to authenticate a backend-to-backend with Spring Boot / Keycloak,"I'm trying to implement authentication throughout my backend services of a microservice oriented application using Keycloak and Spring Boot with Spring Security and JWT-tokens (bearer-only setting in Keycloak).

I have a backend service that requires authentication to access the REST endpoints. This service provides data for a web UI and also takes data to store in the database so that it can be processed later.
Authentication of the user in the UI and also the UI against that backend service already both work.

Then, there is another backend service that runs in the background, calculating values that should also be present in the first mentioned backend service. As that one requires authentication, the service doing the calculations first needs to retrieve an access token from Keycloak to authenticate against the other backend service for the HTTP post to work.

I'm trying to do the HTTP post with the KeycloakRestTemplate, but when I call the .postForObject method, I get an exception:

    Caused by: java.lang.IllegalStateException: Cannot set authorization header because there is no authenticated principal
    	at org.keycloak.adapters.springsecurity.client.KeycloakClientRequestFactory.getKeycloakSecurityContext(KeycloakClientRequestFactory.java:70)
    	at org.keycloak.adapters.springsecurity.client.KeycloakClientRequestFactory.postProcessHttpRequest(KeycloakClientRequestFactory.java:55)
    	at org.springframework.http.client.HttpComponentsClientHttpRequestFactory.createRequest(HttpComponentsClientHttpRequestFactory.java:160)
	
	
It seems that the calculation service does not retrieve the authentication token automatically before calling the other REST service. I did a lot of research on Google about all those Keycloak specific classes, but I didn't find out what I need to do.

Can anyone please give me a hint?
I also don't know which parts of the Spring config are relevant here but I will provide them if you need them.

**EDIT**

My application.properties of the calculation service looks like this:

    keycloak.auth-server-url=https://localhost/auth
    keycloak.realm=myrealm
    keycloak.bearer-only=true
    keycloak.resource=backend-service2
    keycloak.principal-attribute=preferred_username
    keycloak.cors=true
    keycloak.realm-key=<PUBKEY>
    keycloak.credentials.secret=<SECRET_UUID_STYLE>
    keycloak.use-resource-role-mappings=true

**UPDATE**

Thanks @Sai prateek and @Xtreme Biker. 
That seems to lead me to the right direction.

I applied this solution but I still get an exception, I think the keycloak configuration is wrong. I have three clients in keycloak now: webui, backend-service1, backend-service2.

The webui is configured as:
Access Type: public

The backend-service1 is configured as:
Access Type: bearer-only

The backend-service2 is configured as:
Access Type: bearer-only

The exception is:

    2019-02-18 11:15:32.914 DEBUG 22620 --- [  restartedMain] o.s.web.client.RestTemplate              : POST request for ""http://localhost:<PORT>/auth/realms/<REALM_NAME>/protocol/openid-connect/token"" resulted in 400 (Bad Request); invoking error handler
    
    Exception in thread ""restartedMain"" java.lang.reflect.InvocationTargetException
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:498)
    	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
    Caused by: error=""access_denied"", error_description=""Access token denied.""
    	at org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport.retrieveToken(OAuth2AccessTokenSupport.java:142)
    	at org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider.obtainAccessToken(ClientCredentialsAccessTokenProvider.java:44)
    	at org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainNewAccessTokenInternal(AccessTokenProviderChain.java:148)
    	at org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainAccessToken(AccessTokenProviderChain.java:121)
    	at org.springframework.security.oauth2.client.OAuth2RestTemplate.acquireAccessToken(OAuth2RestTemplate.java:221)
    	at org.springframework.security.oauth2.client.OAuth2RestTemplate.getAccessToken(OAuth2RestTemplate.java:173)
    	at org.springframework.security.oauth2.client.OAuth2RestTemplate.createRequest(OAuth2RestTemplate.java:105)
    	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:683)
    	at org.springframework.security.oauth2.client.OAuth2RestTemplate.doExecute(OAuth2RestTemplate.java:128)
    	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:644)
    	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:399)
    [STRIPPED]
    
    
    	... 5 more
    Caused by: error=""invalid_client"", error_description=""Bearer-only not allowed""
    	at org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(OAuth2ExceptionJackson2Deserializer.java:80)
    	at org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(OAuth2ExceptionJackson2Deserializer.java:33)
    	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)
    	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3072)
    	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:237)
    	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readInternal(AbstractJackson2HttpMessageConverter.java:217)
    	at org.springframework.http.converter.AbstractHttpMessageConverter.read(AbstractHttpMessageConverter.java:198)
    	at org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport$AccessTokenErrorHandler.handleError(OAuth2AccessTokenSupport.java:237)
    	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
    	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:730)
    	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:688)
    	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:654)
    	at org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport.retrieveToken(OAuth2AccessTokenSupport.java:137)
    	... 18 more

Also note that I changed the `keycloak.auth-server-url` to `http://localhost:<PORT>/auth` (no HTTPS) so the certificate validation does not fail due to self signed certificate in development.",54988643,"OK, found the solution myself: I needed to set the switch ""Service accounts enabled"" button to ON in the client config for ""backend-service2"" inside keycloak."
62107991,Keycloak in docker container + MySQL on host gives [org.keycloak.services] (ServerService Thread Pool -- 62) Failed to connect to database,"New to KeyCloak.

Trying to run KeyCloak in a container that would be accessing MySQL on host machine (currently Windows 10, production would be Linux)

Followed steps in [enter link description here][1] and when both KeyCloak and MySQL are in their own containers, it works according to the documentation there.

When trying to connect existing MySQL database on the host and run KeyCloak docker container like this:

    > docker run --name keycloak --network=""host"" -e DB_VENDOR=mysql -e DB_ADDR=host.docker.internal -e MYSQL_DATABASE=keycloak -e MYSQL_USERNAME=root -e MYSQL_PASSWORD=sqlpass -e KEYCLOAK_USER=kc-admin -e KEYCLOAK_PASSWORD=password jboss/keycloak

or even 

    docker run --name keycloak --network=host -e DB_VENDOR=MYSQL -e DB_ADDR=<actual ip address of host> -e MYSQL_DATABASE=keycloak -e MYSQL_USERNAME=root -e MYSQL_PASSWORD=sqlpass -e KEYCLOAK_USER=kc-admin -e KEYCLOAK_PASSWORD=password jboss/keycloak

Getting following error:

    WFLYCTL0186:   Services which failed to start:      service org.wildfly.clustering.jgroups.channel.ee: java.lang.IllegalStateException: java.net.BindException: [UDP] /172.18.0.1 is not a valid address on any local network interface

I think it's failing right after these messages...

    19:33:30,381 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-1) WFLYSRV0027: Starting deployment of ""keycloak-server.war"" (runtime-name: ""keycloak-server.war"")
    19:33:30,522 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-2) WFLYUT0006: Undertow HTTPS listener https listening on 0.0.0.0:8443

Searched internet for the so called 'production ready' scenario where MySQL database would be on host and KeyCloak could be in Docker container, didn't find much help.

What am I doing wrong? Any help / pointers appreciated. Thank you.


  [1]: https://registry.hub.docker.com/r/jboss/keycloak#!

Update:

When tried removing network - got different error. 

    docker run --rm --name keycloak  -e DB_VENDOR=MYSQL  -e DB_ADDR=docker.host.internal -e MYSQL_DATABASE=keycloak -e MYSQL_USERNAME=root -e MYSQL_PASSWORD=sqlpass -e KEYCLOAK_USER=kc-admin -e KEYCLOAK_PASSWORD=password jboss/keycloak


More specific about not able to connect to the database:

    20:14:28,844 FATAL [org.keycloak.services] (ServerService Thread Pool -- 62) java.lang.RuntimeException: Failed to connect to database


",62109056,"Got it. Turns out I needed to allow 'keycloak' user in MySQL instance to logon remotely (meaning not just from localhost but any other hosts).

I used following script to give access privileges for 'keycloak' user:

    USE keycloak;
    
    CREATE USER 'keycloak'@'localhost' IDENTIFIED WITH caching_sha2_password  BY 'password';
    CREATE USER 'keycloak'@'<ip address of container>' IDENTIFIED WITH caching_sha2_password  BY 'password';
    
    GRANT ALL PRIVILEGES ON keycloak.* TO 'keycloak'@'localhost';
    GRANT ALL PRIVILEGES ON keycloak.* TO 'keycloak'@'<ip address of container>';

Then use following command to run keycloak docker image as a daemon:

    docker run --rm --name keycloak -d  -p 8080:8080 -e DB_VENDOR=MYSQL -e DB_ADDR=host.docker.internal -e MYSQL_DATABASE=keycloak -e MYSQL_USERNAME=keycloak -e MYSQL_PASSWORD=password -e KEYCLOAK_USER=kc-admin -e KEYCLOAK_PASSWORD=password jboss/keycloak


Then go to http://localhost:8080/auth to access KeyCloak admin console and login using kc-admin user credentials defined previously.


To find out ip address of the container, used windows command line from this thread : [https://stackoverflow.com/questions/17157721/how-to-get-a-docker-containers-ip-address-from-the-host][1]


  [1]: https://stackoverflow.com/questions/17157721/how-to-get-a-docker-containers-ip-address-from-the-host"
48351383,How can I configure Keycloak to use HMAC algorithm as default instead of RSA?,"I have created a new realm in Keycloak and in the admin tab Keys -> Active I can see three entries: RSA, HMAC, AES.

Whenever a JWT token is generated the signature algorithm used is RSA. How can I use HMAC instead?",48641552,"I had the same question and found the following answers:

The latest documentation says that only rsa is supported for access tokens.
(http://www.keycloak.org/docs/3.3/server_admin/topics/realms/keys.html)

There is the plan to sign refresh tokens with hmac. Look at this user mailing list entry for more details: 
""It is not great to sign accessTokens and idTokens by HMAC anyway since the 
applications will need to have access to realm signing key. As it is 
symmetric stuff. This can be security hole as then the application can 
generate and sign tokens by itself. Hence we rather rely on the 
asymetric cryptography - Keycloak signs tokens with private key and 
application has just public key to verify signatures.""
http://lists.jboss.org/pipermail/keycloak-user/2017-May/010809.html

Here is the JIRA for it: 
https://issues.jboss.org/browse/KEYCLOAK-4623 and internally
https://issues.jboss.org/browse/KEYCLOAK-4622
"
40218752,ABAC with keycloak - Using Resource attributes in policy,"**What I am trying to achieve**

Protect a resource in Keycloak with policy like: 

    if (resource.status == 'draft') $evaluation.grant(); 
    else $evaluation.deny();

Going by their official [documents][1] and [mailing list responses][2], it seems attribute based access control is possible, however, I could not find a way of getting it to work.

**What I have tried**

 - Using [Authorization Services][3]: I was unable to figure out where and how I can inject the attributes from the resource instance. 
 - Using [Authorization Context][4]: I was hoping to get the policies associated with a resource and a scope so that I could evaluate them my self.

So far, I have managed to get no where with both approaches. To be honest, I have been overwhelmed by the terminology used in the Authorization services. 

**Question**
How can I use attributes of a resource instance while defining a policy in keycloak?

  [1]: https://keycloak.gitbooks.io/authorization-services-guide/content/topics/overview/overview.html
  [2]: http://lists.jboss.org/pipermail/keycloak-user/2016-July/007070.html
  [3]: https://keycloak.gitbooks.io/authorization-services-guide/content/topics/service/overview.html
  [4]: https://keycloak.gitbooks.io/authorization-services-guide/content/topics/enforcer/authorization-context.html",52818775,"I solved this problem in Keycloak 4.3 by creating a JavaScript policy because Attribute policies don't exist (yet). Here is an example of the code I got working (note that the attribute values are a list, so you have to compare against the first item in the list):

    var permission = $evaluation.getPermission();
    var resource = permission.getResource();
    var attributes = resource.getAttributes();
    
    if (attributes.status !== null && attributes.status[0] == ""draft"") {
        $evaluation.grant();
    } else {
        $evaluation.deny();
    }"
40216919,Difference between client-id and id of client in Keycloak,"Well, the title speaks for itself. In many places from Keycloak docs I encountered this statement

> id of client (not client-id)

For now this statement sounds so stupid to me as I do not understand the difference between client-id and id of the client. Can somebody explain me this, please?

 ",45793331,"When you're creating a new client, you specify its Client ID (or simply client's name), e.g. ""my-super-client"". This is supposed to be unique across the realm and usually used in OAuth calls, e.g. as a `client_id` in ""Client Credentials"" flow (in pair with `client_secret`). 

However, when creating a new client, KeyCloak issues an internal unique ID like this `3f7dd007-568f-4f4a-bbac-2e6bfff93860`. You may find it in a URL when opening a page of your ""my-super-client"" in the web interface. This one is supposed to be a unique ID of any resource that KeyCloak creates during its lifespan. 

Keeping this in mind, I think it'd be clear from the context of documentation which one is ""id of client"" and which one is ""client-id"" as you stated in the question. If not, please give a link here."
52466242,ClassNotFoundException: org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder,"trying to create a keycloak object to register new user with keycloak with following code:

     Keycloak keycloak = KeycloakBuilder.builder()
                                .serverUrl(serverUrl)
                                .realm(realm)
                                .grantType(OAuth2Constants.PASSWORD)
                                .clientId(clientId)
                                .clientSecret(clientSecret)
                                .username(""someone"")
                                .password(""someword"")
                                .build();

But get following error:

> Servlet.service() for servlet [dispatcherServlet] in context with path
> [] threw exception [Handler dispatch failed; nested exception is
> java.lang.NoClassDefFoundError:
> org/jboss/resteasy/client/jaxrs/ResteasyClientBuilder] with root cause
> 
> java.lang.ClassNotFoundException:
> org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder
>         at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_131]
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_131]
>         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335)
> ~[na:1.8.0_131]
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_131]
>         at org.keycloak.admin.client.Keycloak.<init>(Keycloak.java:58) ~[keycloak-admin-client-4.3.0.Final.jar:4.3.0.Final]
>         at org.keycloak.admin.client.KeycloakBuilder.build(KeycloakBuilder.java:147)
> ~[keycloak-admin-client-4.3.0.Final.jar:4.3.0.Final]
>         at hello.GreetingController.greeting(GreetingController.java:100)
> ~[main/:na]
>         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]

",52498539,"Please try to add these dependencies to your project pom. 
Versions of dependencies could be 3.6.0.Final or 3.5.0.Final (i am not sure your keycloak-admin-client dependency version. But, i used keycloak-admin-client 3.0.0.Final with 3.5.0.Final resteasy-client. It works successfully.)

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson2-provider</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-multipart-provider</artifactId>
		</dependency>
"
48299241,Keycloak - How to request a token with a custom lifespan?,"**Context:** We are using Keycloak to secure our APIs by usually passing tokens through Authorization Headers. However, these APIs also allow users to download files (for instance: `https://api.service.io/users.xlsx`).

To use these ""download endpoints"", our web client applications pass users' token via query strings. (_e.g._ `https://api.service.io/users.xlsx?accessToken=${bearerToken})`).

**Problem:** Passing tokens via query string has several security flaws (browser history, ...). Therefore we would like to pass a very short-lived token (_e.g._ lifespan of 15sec) instead of the normal one (lifespan of 300sec by default).

**Question:** How could we request a different token from Keycloak API (for instance, `/realms/#{realm_id}/protocol/openid-connect/token`) by:

 - providing the normal access token (not credentials);
 - _and_ specifying a different lifespan ?


",48518286,"After reading Keycloak's source code, it appears this is not possible (version `3.4.2.Final`) to ask for a specific lifespan at runtime.

However, I developed a Keycloak Custom REST endpoint to do that. https://github.com/looorent/keycloak-configurable-token-api 

When this JAR file is deployed in Keycloak, you can ask for a given lifespan at runtime. For example:
```
$ curl -X POST -d '{ ""tokenLifespanInSeconds"": 20}' -H ""Content-Type: application/json"" -H ""Authorization: Bearer <user-access-token>"" http://auth.service.io/auth/realms/a-realm/configurable-token
```"
37329232,Zuul reverse proxy with Keycloak server,"I'm configuring a Spring Cloud (Angel.SR6) application using the Zuul reverse proxy utility, in order to hide the internal service ports. My zuul (edge) service is published in the 8765 port and my organizations service is in the 8083 one. Everything goes smoothly when I access the application with no security, `http://localhost:8765/organization/organizations` returns the JSON with all the organizations. 

However, now I want to integrate a Keycloak SSO (OAuth2) server for authorization purposes. I have added the [Spring Security adapter][1] in my organization service and configured it to authenticate in `http://localhost:8080/auth`. Everything goes well, except that zuul performs a redirection instead of proxying. So when authentication is successful, I get redirected to `http://localhost:8083/organizations` instead of `http://localhost:8765/organization/organizations`. Here there are my browser requests:

[![enter image description here][2]][2]

That's because the keycloak adapter creates a token verification endpoint in the `http://localhost:8083/sso/login`, from which it performs a redirection to the authorization server in order to validate the token. When authorization server acknowledges it, a redirection is sent to the organization service, with the `/organization` path, so the end url being loaded is `http://localhost:8083/organizations`. But I would like the first requested url to be loaded instead. 

Which choice do I have?


  [1]: https://keycloak.github.io/docs/userguide/keycloak-server/html/ch08.html#spring-security-adapter
  [2]: http://i.stack.imgur.com/5tmAI.png",60604076,"**(Migrated from comment to answer)**

I ended up making a [Github project][1] in order to explain my problem to the keycloak team, and got a pull request from one of the development team members trying to help me out. Following their recommendations, I came into the conclusion that zuul is good to hide stateless services (bearer only ones), but not the ones that user directly interacts with. Here it is [the whole thread][2] in the mailing list.


  [1]: https://github.com/xtremebiker/zuul-keycloak-test/pull/1
  [2]: https://lists.jboss.org/pipermail/keycloak-user/2016-May/006287.html"
72745357,Why I see a blank page for the Keycloak's administration console?,"I'm using a Dockerfile for create a custom image of Keycloak as follows:
```
FROM quay.io/keycloak/keycloak:18.0.2 as builder

ENV KC_HEALTH_ENABLED=true
ENV KC_METRICS_ENABLED=true
ENV KC_DB=postgres
# Install custom providers
RUN curl -sL https://github.com/aerogear/keycloak-metrics-spi/releases/download/2.5.3/keycloak-metrics-spi-2.5.3.jar -o /opt/keycloak/providers/keycloak-metrics-spi-2.5.3.jar
RUN /opt/keycloak/bin/kc.sh build

FROM quay.io/keycloak/keycloak:18.0.2
COPY --from=builder /opt/keycloak/ /opt/keycloak/
WORKDIR /opt/keycloak
ENTRYPOINT [""/opt/keycloak/bin/kc.sh"", ""start""]
```

and whit this docker-compose I am able to run Keycloak:
```
version: ""3.9""
services:

  keycloak_db:
    image: postgres
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASS
      - POSTGRES_DB=$DB_NAME
      - IGNORE_INIT_HOOK_LOCKFILE=true
    volumes:
      - ./db/:/docker-entrypoint-initdb.d/
    ports:
      - ${DB_EXTERNAL_PORT:-15432}:5432

  keycloak:
    container_name: keycloak
    # image: quay.io/keycloak/keycloak:18.0.1
    image: keycloak
    ports:
      - ""${KEYCLOAK_EXTERNAL_PORT:-18180}:8080""
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL_HOST=$DB_HOST
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=$DB_NAME
      - KC_DB_SCHEMA=$KEYCLOAK_SCHEMA
      - KC_DB_USERNAME=$DB_USER
      - KC_DB_PASSWORD=$DB_PASS
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_ADMIN=localhost
      - KC_HOSTNAME_PORT=80
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_PROXY=edge
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_KEYCLOAK_FRONTEND_URL=http://localhost:18180/
      - KC_KEYCLOAK_URL=http://localhost:18180/
      # - KC_LOG_LEVEL=debug
    depends_on:
      - keycloak_db
```

I can see the Keycloak homepage:
[![enter image description here][1]][1]

But when I try to go to the admnistration console I see a blank page:
[![enter image description here][2]][2]

---
What goes wrong?

<br>
<br>

---
**EDIT:**
I upgraded Keycloak version to 18.0.2.

And if I use KC_FEATURES=admin2 as further environment variable I can see something, but still not the admin console:

[![enter image description here][3]][3]



---
**EDIT 2:**
If I add `ENV KC_FEATURES=token-exchange` in Dockerfile for the builder, I can see the login page:

[![enter image description here][4]][4]

But after the log in... always a blank page:

[![enter image description here][5]][5]


  [1]: https://i.stack.imgur.com/ruwBq.png
  [2]: https://i.stack.imgur.com/eIiG4.png
  [3]: https://i.stack.imgur.com/KHp85.png
  [4]: https://i.stack.imgur.com/2SsMW.png
  [5]: https://i.stack.imgur.com/E9lqY.png",72966199,"Your `KC_HOSTNAME_PORT` is probably incorrect. If `KEYCLOAK_EXTERNAL_PORT` is set to 18180 and you are not behind a reverse proxy you should set `KC_HOSTNAME_PORT` to 18180.

This configuration is working:
```
 keycloak:
    container_name: keycloak
    # image: quay.io/keycloak/keycloak:18.0.1
    image: keycloak
    ports:
      - ""${KEYCLOAK_EXTERNAL_PORT:-18180}:8080""
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL_HOST=$DB_HOST
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=$DB_NAME
      - KC_DB_SCHEMA=$KEYCLOAK_SCHEMA
      - KC_DB_USERNAME=$DB_USER
      - KC_DB_PASSWORD=$DB_PASS
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_ADMIN=localhost
      - KC_HOSTNAME_PORT=18080
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_PROXY=edge
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_KEYCLOAK_FRONTEND_URL=http://localhost:18180/
      - KC_KEYCLOAK_URL=http://localhost:18180/
      # - KC_LOG_LEVEL=debug
    depends_on:
      - keycloak_db
```"
34056673,NodeJS - connect-keycloak middleware empty response error,"I'm having a problem using the connect-keycloak middleware with NodeJS, and there appears to be very little documentation online from people who have used it. This is based on 'A Full Example' from the official docs found here: http://keycloak.github.io/keycloak-nodejs/connect/

I am getting an unexpected error when testing with curl, relating to an undefined 'keycloak-token'. I can't find any references to this in my code or the source, nor anyone else with the same problem online. Can anyone see what I'm doing wrong?

The connect-keycloak object is included and instantiated as expected:

    // app.js:
    // module dependencies
    var request = require('sync-request');
    var fs = require('fs');
    var restify = require('restify');
    var Keycloak = require('connect-keycloak');
    var session = require('express-session');
    var memoryStore = new session.MemoryStore();
    
    // Keycloak
    var keycloak = new Keycloak({ store: memoryStore });

And the middleware is used:

    var server = restify.createServer({
        name: 'name',
        version: '1.0.0'
    });

    server.use(restify.acceptParser(server.acceptable));
    server.use(restify.queryParser());
    server.use(restify.bodyParser());
    server.use(keycloak.middleware({ logout: '/logout', admin: '/' }));
    
    server.use(session({
        secret: 'secret',
        resave: false,
        saveUninitialized: true,
        store: memoryStore
    }));

And the keycloak.protect method is in place:

    server.get(/.*/, keycloak.protect(), restify.serveStatic({
        'directory': './html',
        'default': 'index.html'
    }));

Yet this curl test:

    curl -H ""Content-Type: application/json"" -X POST -d '{""query"":""test""}' http://localhost:3000/trust-me-on-the-url-being-correct/thanks -i

Produces this unusual error (not the error I was hoping for):

     POST -d '{""query"":""car""}' http://localhost:3000/rest/keywords -i
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Content-Length: 87
    Date: Thu, 03 Dec 2015 02:05:40 GMT
    Connection: keep-alive

    {""code"":""InternalError"",""message"":""Cannot read property 'keycloak-token' of undefined""}[addamnilemartin@localhost keyword]$ 

Keycloak.json is included in the same directory as app.js and should definitely not be the cause of the problem.

UPDATE:

I realised this was missing and added it:

    // set session for keycloak
    server.use(session({
        secret: 'fsd78d7gdfgds',
        resave: false,
        saveUninitialized: true,
        store: memoryStore
    }));

Now the response when my POST had keycloak.protect() the error is:

    curl -H ""Content-Type: application/json"" -X POST -d '{""query"":""car""}' http://localhost:3000/blah/blah -i
    curl: (52) Empty reply from server

Without keycloak.protect the response is the expected JSON, of course, as there is no attempt at authetication.
",34129097,"As it turns out, there was nothing wrong with this code. The problem was that the node modules I had installed via npm were out-dated, to a time before this middle-ware supported bearer-only authentication.

**Moral of the story: keep your repositories *up to date*!**"
63942846,Flutter appauth Invalid parameter: redirect_uri,"I have local instance of keylcoak and I am trying to connect my flutter app to it and for that I am following the [this tutorial][1] but I got stuck on this redirect_uri issue.

In android's build.gradle I have added the following piece to default config:

      applicationId = 'com.my.example_app'
      manifestPlaceholders = [
            'appAuthRedirectScheme': 'com.my.example_app'
      ]


In the code I have:

        const REDIRECT_URI = 'com.my.example_app://login-callback';
        //some code in between
        final AuthorizationTokenRequest req = AuthorizationTokenRequest(
        CLIENT_ID,
        REDIRECT_URI,
        allowInsecureConnections: true,
        issuer: ISSUER,
        discoveryUrl: DISCOVERY_URL,
        scopes: SCOPES);
        final AuthorizationTokenResponse result = await appAuth.authorizeAndExchangeCode(req);


I was also trying different configs on keycloak side:
[![enter image description here][2]][2]


So when I press `login` and it redirects me to the keycloak page but all I see is:

[![enter image description here][3]][3]

Does anyone know what is the proper redirect uri value here?

  [1]: https://auth0.com/blog/get-started-with-flutter-authentication/
  [2]: https://i.stack.imgur.com/75mN5.png
  [3]: https://i.stack.imgur.com/bAutE.png",65635911,"The problem with your code is that your applicationId and appAuthRedirectScheme contains '_' character which is invalid for an URL, so I would suggest to change app package name to not contain capitalized or other characters other than '.', and it should work"
28212837,Keycloak Unknown Provider error,"I'm using Keycloak.js for interaction with Keycloak and getting below error

    Uncaught Error: [$injector:unpr] Unknown provider: AuthProvider <- Auth <- authInterceptor <- $http <- $templateRequest <- $compile

With below code:

    module.factory('authInterceptor', ['$q', 'Auth', function($q, Auth) {
      return {
        request: function (config) {
          var deferred = $q.defer();
          if (Auth.authz.token) {
            Auth.authz.updateToken(5).success(function() {
              config.headers = config.headers || {};
              config.headers.Authorization = 'Bearer ' + Auth.authz.token;
    
              deferred.resolve(config);
            }).error(function() {
              deferred.reject('Failed to refresh token');
            });
          }
          return deferred.promise;
        }
      };
    }]);
    
    module.config(['$httpProvider', function($httpProvider) {
      $httpProvider.responseInterceptors.push('errorInterceptor');
      $httpProvider.interceptors.push('authInterceptor');
    }]);

Is there a reason why this is happening?

I am also including keycloak.js in my index.html which is inserted with Bower


I also have below Auth factory instantiated inside dom ready:

    angular.element(document).ready(function($http) {
      var keycloakAuth = new Keycloak('keycloak.json');
      auth.loggedIn = false;
    
      keycloakAuth.init().success(function () {
        auth.loggedIn = true;
        auth.authz = keycloakAuth;
        auth.logoutUrl = keycloakAuth.authServerUrl + ""/realms/demo/tokens/logout?redirect_uri=http://localhost:3000"";
        module.factory('Auth', function () {
          return auth;
        });
      }).error(function () {
        window.location.reload();
      });
    });",28214413,"the problem is that you are instantiating ""Auth"" on dom ready, but the dependecy injector is trying to inject before the dom ready (simplifying).

The question is why on dom ready?

here are two examples:

http://jsbin.com/lulin/1/edit
(with on dom ready definition, not working, same error)

http://jsbin.com/wajeho/2/edit
(without on dom ready definition,working)

---------------------------
EDIT:

You have to do something like this:
http://jsbin.com/xusiva/1/edit?html,js,console


I'm difining the factory outside the domready, and inside the controller after domready i'm using it. 
"
58284572,Running User Interfaces and APIs behind keycloak gatekeeper,"New to keycloak, and authentication in general, so sorry for missing something obvious, and not using accurate terminology.

I'm trying to run a simple Angular UI that talks to a Java (dropwizard) API.  I'd like both of those to need auth.  I'm (almost) able to get them running fine behind keycloak and keycloak gatekeeper using a single realm and a confidential client.  In this case gatekeeper has an `upstream-url` that is a traefik instance, that then routes to either the UI or API docker container.  Something like:


    Gatekeeper upstream-url ----> Traefik (my.domain/*)  ----> UI (my.domain/ui/*)
                                                         \---> API (my.domain/api/*)

This works fine until the session times out, and when the user on the (already loaded) UI page clicks a button that tries to send an ajax request to hit the API (eg https://my.domain/api/getstuff), then Gatekeeper redirects (ie 301) that to the the keycloak login page.  This redirect is a little nonsensical for an API request...

At this point both my UI and API projects are auth agnostic (ie they are not running any of the adapters etc just yet - I'm relying on the docker setup to prevent ""direct"" access to UI and API for now.  I'll add the adapters once I need to know something about the user).  I can see in https://www.keycloak.org/docs/latest/securing_apps/index.html#configuration-options the `autodetect-bearer-only` option which seems to describe my issue, ie 

> It allows you to redirect unauthenticated users of the web application to the Keycloak login page, but send an HTTP 401 status code to unauthenticated SOAP or REST clients instead as they would not understand a redirect to the login page

but seems to apply at the adapter layer, ie after gatekeeper in my scenario.
[this][1] seems similar too.


I think I want unauthenticated (eg never logged in, or timed out) access requests to https://my.domain/ui/* to be redirected to the keycloak login page, but https://my.domain/api/* to 401.

And from https://my.domain/ui/somepage the ajax request to https://my.domain/api/getstuff to use the JWT/token/cookie that the browser has from the login (which is working now).

How do I do this?  What stupidly obvious step have I missed!?

  [1]: https://issues.jboss.org/browse/KEYCLOAK-4806

",58290883,"Unfortunately, you cannot tell Gatekeeper to return 401(403) response codes instead of redirect. There is similar issue: https://issues.jboss.org/browse/KEYCLOAK-11082 

What you can do is to remove Gatekeeper completely and implement public client authentication on frontend (JS adapter) and bearer-only client on backend (Java Adapter). If your Java application serves frontend you can implement only confidential client authentication and return 401(403) response for /api/* requests."
53390134,Keycloak: Script Authenticator missing?,"In our system we have so far been using Keycloak 3.4.3 and the Script Authenticator authentication provider functionality as part of the browser based authentication. Now, after upgrading to Keycloak **4.6.0.Final**, we noticed that the option for `Script Authenticator` has disappeared from the list. 

This functionality was still there in Keycloak 4.5.0.Final. Due to functionality that's been fixed in Keycloak 4.6.0.Final, we don't have the option to use 4.5.0.

We used the Script Authenticator -functionality to ""whitelist"" our users based on LDAP attributes. Now since the script option was removed, we're no longer able to use Keycloak.

Any ideas why the Script Authenticator has been removed? Or could it be that it has been moved to another place within the Keycloak admin console?

Just to add some details: 

- There has not been any mention about removing this functionality in the [Keycloak release notes][1]
- Script authenticator is still mentioned in [the Keycloak documentation][2] for Keycloak 4.6.0
- There is also now an issue reported for this in Keycloak issue tracker [KEYCLOAK-8872][3].


  [1]: https://www.keycloak.org/docs/latest/release_notes/index.html
  [2]: https://www.keycloak.org/docs/latest/server_admin/index.html#executions
  [3]: https://issues.jboss.org/browse/KEYCLOAK-8872",53391414,"You can enable this feature by start the server with: 

    -Dkeycloak.profile.feature.scripts=enabled

or you can set this permanently in the `profile.properties` file (in configuration folder) by adding:

    feature.scripts=enabled "
53367566,Unable to setup IDP token exchange in Keycloak 4.6.0.Final,"After spinning up a Keycloak instance by [docker image 4.6.0.Final][1], the permissions tab of the client and Identity Providers are missing. The tabs are available in version 4.5.0.Final out of the box. The missing of permission tab prevents the setup of token exchange by following official document, [Securing Apps Token Exchange][2] 


  [1]: https://hub.docker.com/r/jboss/keycloak/
  [2]: https://www.keycloak.org/docs/latest/securing_apps/index.html#_token-exchange",53373848,"I have received an answer from Pedro Silva via the mailing list:

Hi,

...We no longer enable tech preview features by default. You need to enable the feature you want, such as admin fine grained permissions, by passing a specific environment variable. Try to boot your server using this system property: 

    -Dkeycloak.profile.feature.admin_fine_grained_authz=enabled
    -Dkeycloak.profile.feature.token_exchange=enabled

Docs are not reflecting these changes, created https://issues.jboss.org/browse/KEYCLOAK-8865."
41109010,Standalone verification of Keycloak access-token,"I am using Keycloak to handle login and generate JWT tokens.  I need to be able to verify the access token that I'm sending to my REST API service.  Best practice is to use the JWT secret to verify the token directly rather than send it to the Keycloak server for verification. There are a lot of Java examples of doing this, but I need to be able to verify this using python or ruby.  

I tried the following python signature verification but I get an error of `ValueError: Could not unserialize key data.`  I also tried entering the public key in the https://jwt.io debugger but also get an invalid signature.

    #!/usr/bin/env python3

    import jwt

    # Public key from Keycloak realm -> Keys -> Public Key -> (view)
    public_key = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu77nUtVw7SIIcUTSiStzMPB7BGB/9eS+CpppsUaiyZyWCXlrALT3YdqneSlpX4Ta+0wvhOkKQtoSS8dCH8GIi7esAmfdHetHfRgeDXHAlXo8HIzshUzODg3ysT7j+Ha3eJsO+LNS/omHDhsarP8Z2eThW876iKJCCc/mB76a6u1e4Id+52K5lG++m8Pn4Gs+cqd2sKUKcMJ9CkJ6dBIdGlXHMoOHj4C33SPrEG/vEBv5cu0l5PP3RiBAuaZHpLKzfIiaLOpj/k4dD/weVt5gwTIJn16AEgPD7173Xef0HgoPlQInDFrJwsGpYCnIPZWSxRbvjKkya2Auj0QZyMCrXwIDAQAB""

    # Keycloak JWT RS256 access-token
    access_token = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0LVlJOUlVc2R6NGM0SHoycXczT0xXZ0I0eHc2eFd4T29XdktVT2FvV3FzIn0.eyJqdGkiOiJjYzZkMjM5OS04ZmU5LTQzMWItYjZjMS05NWQxMWUxN2FiZGQiLCJleHAiOjE0ODE1NTQ2NTksIm5iZiI6MCwiaWF0IjoxNDgxNTU0MzU5LCJpc3MiOiJodHRwczovL3BtaS1rZXljbG9hay5zYnZpbXByb3Zlci5jb20vYXV0aC9yZWFsbXMvT3BlbkJFTCIsImF1ZCI6ImJlbG1nciIsInN1YiI6ImU1ODc2OGQxLWU3ODktNGU3Yi04ZGVlLWJjMzYxNzFkZDNhZCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImJlbG1nciIsIm5vbmNlIjoiMzc2ZDdjZmUtZGZkNC00Yzg5LWJlZGEtZTlmOWNmYWNlMTNkIiwiYXV0aF90aW1lIjoxNDgxNTUzMTY0LCJzZXNzaW9uX3N0YXRlIjoiN2E2OTEzYzItZWJkZC00MTc2LWI4YTAtZDc2NzVhNDZkNmJjIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiOTMyNGMzMjAtMmE4Zi00ODBlLTg5MjItZGQxNmFmMDQxZDdmIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiJXaWxsaWFtIEhheWVzIiwicHJlZmVycmVkX3VzZXJuYW1lIjoid2lsbGlhbS5zLmhheWVzQGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJXaWxsaWFtIiwiZmFtaWx5X25hbWUiOiJIYXllcyIsImVtYWlsIjoid2lsbGlhbS5zLmhheWVzQGdtYWlsLmNvbSJ9.Q7s-qTcJyH69Ebof8pQI1kZzeT8olwQnRJ06uas5TP2isacxOheHnJ9ixEvqTrr-iefmYMwx41jM68NCs6l8IBNHqv7t5-ediizx4ianMiXr7oZ_1oAT9hkLyrpv9iF2IZBtzNJz0GQAnDYe1moLOLuzqwvcUaWgmzRY95xvzo4kbE8OkeZiMpD_cDmp3_vKOsdn3B6ybJ9TXtea55A29pQzsvAM_6lHeyxTCisipOtu_ubnUOamkYSpxLwWZXgI1w7iz-igt-n7xtlFhUpra239yn9uly9iuBtlgnc3TFDmZn-XRq_PODDJNJeaQXDRaDqnRQhXsoObxCaPqXDQ3A""

    access_token_json = jwt.decode(access_token, public_key)
    print(access_token_json)
",41186209,"To verify the access token I did the following things:  

* I reset the expiration timeframe so I didn't have to worry about timeouts as a complicating factor.

* I had to add the BEGIN/END header/footer to the pubkey (of which there are two different versions based on the encoding of the pubkey -e.g. 'BEGIN RSA PUBLIC KEY' is not the right version for the Keycloak pubkey encoding):

<pre>
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu77nUtVw7SIIcUTSiStzMPB7BGB/9eS+CpppsUaiyZyWCXlrALT3YdqneSlpX4Ta+0wvhOkKQtoSS8dCH8GIi7esAmfdHetHfRgeDXHAlXo8HIzshUzODg3ysT7j+Ha3eJsO+LNS/omHDhsarP8Z2eThW876iKJCCc/mB76a6u1e4Id+52K5lG++m8Pn4Gs+cqd2sKUKcMJ9CkJ6dBIdGlXHMoOHj4C33SPrEG/vEBv5cu0l5PP3RiBAuaZHpLKzfIiaLOpj/k4dD/weVt5gwTIJn16AEgPD7173Xef0HgoPlQInDFrJwsGpYCnIPZWSxRbvjKkya2Auj0QZyMCrXwIDAQAB
-----END PUBLIC KEY-----
</pre>
* Last - I had to add the audience='belmgr' to the jwt.decode for the python script

<pre>
## Python script 
#!/usr/bin/env python3
    
import jwt
    
public_key = """"""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu77nUtVw7SIIcUTSiStzMPB7BGB/9eS+CpppsUaiyZyWCXlrALT3YdqneSlpX4Ta+0wvhOkKQtoSS8dCH8GIi7esAmfdHetHfRgeDXHAlXo8HIzshUzODg3ysT7j+Ha3eJsO+LNS/omHDhsarP8Z2eThW876iKJCCc/mB76a6u1e4Id+52K5lG++m8Pn4Gs+cqd2sKUKcMJ9CkJ6dBIdGlXHMoOHj4C33SPrEG/vEBv5cu0l5PP3RiBAuaZHpLKzfIiaLOpj/k4dD/weVt5gwTIJn16AEgPD7173Xef0HgoPlQInDFrJwsGpYCnIPZWSxRbvjKkya2Auj0QZyMCrXwIDAQAB
-----END PUBLIC KEY-----""""""
    
access_token = ""eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0LVlJOUlVc2R6NGM0SHoycXczT0xXZ0I0eHc2eFd4T29XdktVT2FvV3FzIn0.eyJqdGkiOiJiMGFhZDllMC1lYmU5LTQ4ZDQtYTcxNC1iMWMyNjg4NmM2MDciLCJleHAiOjE0ODE5ODE0ODQsIm5iZiI6MCwiaWF0IjoxNDgxODk1MDg0LCJpc3MiOiJodHRwczovL3BtaS1rZXljbG9hay5zYnZpbXByb3Zlci5jb20vYXV0aC9yZWFsbXMvT3BlbkJFTCIsImF1ZCI6ImJlbG1nciIsInN1YiI6ImU1ODc2OGQxLWU3ODktNGU3Yi04ZGVlLWJjMzYxNzFkZDNhZCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImJlbG1nciIsIm5vbmNlIjoiMzI3NjRhYWUtZmM1NC00MDlkLTgxM2EtNjhhNmM4YTNhYzI2IiwiYXV0aF90aW1lIjoxNDgxODk1MDgzLCJzZXNzaW9uX3N0YXRlIjoiMWQwNDMyMDQtNWNkYy00OTVjLWJlZWUtODIwZWJiMmRlNWUzIiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiMmEzZWY1MzgtN2MxOS00YzE3LTlmZTctYjQ3ZGNjNmM0ODQyIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiJXaWxsaWFtIEhheWVzIiwicHJlZmVycmVkX3VzZXJuYW1lIjoid2lsbGlhbS5zLmhheWVzQGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJXaWxsaWFtIiwiZmFtaWx5X25hbWUiOiJIYXllcyIsImVtYWlsIjoid2lsbGlhbS5zLmhheWVzQGdtYWlsLmNvbSJ9.DfC1c6BVBZ8Bgwu6CYGBsWp4T0dqltwAQ84E1Q0LdjFxvtVeDOF8rBIdgkr7rMCHObZWsEotljSR4BZzCvfDNmdk_25sedvi-ZHXTP0-nSeHczIXBstZ8p257A6-fEiIcG5CRoClHMI317bVGjNkzAV7l8kuBhr0bfrDedxpvKo3EQah4MrOF7-JXQGPAWlLDV1E9zsrT99Vm_XL58M-ur8q7N-B-CmOBV2GGsMEosTDK_-U-mattEN6PMNiG004Ryg0iPDM4-kr1AQsPE_wHBYf81_-vrqs7ec--0ShJYdC8-eBbuf9xVixNQVPRl7mnktaKA19YXdzdCwcQa6crw""
    
access_token_json = jwt.decode(access_token, public_key, audience='belmgr')
print(access_token_json)
</pre>
"
45700682,Failed to load module org.keycloak.keycloak-server-subsystem,"When starting Keycloak demo v3.2.1.Final downloaded from official site I am getting the following error:

    22:56:46,404 INFO  [org.jboss.modules] (main) JBoss Modules version 1.5.1.Final
    22:56:46,590 INFO  [org.jboss.msc] (main) JBoss MSC version 1.2.6.Final
    22:56:46,675 INFO  [org.jboss.as] (MSC service thread 1-6) WFLYSRV0049: WildFly Full 10.0.0.Final (WildFly Core 2.0.10.Final) starting
    22:56:47,309 ERROR [org.jboss.as.server] (Controller Boot Thread) WFLYSRV0055: Caught exception during boot: org.jboss.as.controller.persistence.ConfigurationPersistenceException: WFLYCTL0085: Failed to parse configuration
    	at org.jboss.as.controller.persistence.XmlConfigurationPersister.load(XmlConfigurationPersister.java:131)
    	at org.jboss.as.server.ServerService.boot(ServerService.java:356)
    	at org.jboss.as.controller.AbstractControllerService$1.run(AbstractControllerService.java:299)
    	at java.lang.Thread.run(Thread.java:748)
    Caused by: javax.xml.stream.XMLStreamException: WFLYCTL0083: Failed to load module org.keycloak.keycloak-server-subsystem
    	at org.jboss.as.controller.parsing.ExtensionXml.parseExtensions(ExtensionXml.java:155)
    	at org.jboss.as.server.parsing.StandaloneXml$DefaultExtensionHandler.parseExtensions(StandaloneXml.java:126)
    	at org.jboss.as.server.parsing.StandaloneXml_4.readServerElement(StandaloneXml_4.java:218)
    	at org.jboss.as.server.parsing.StandaloneXml_4.readElement(StandaloneXml_4.java:141)
    	at org.jboss.as.server.parsing.StandaloneXml.readElement(StandaloneXml.java:103)
    	at org.jboss.as.server.parsing.StandaloneXml.readElement(StandaloneXml.java:49)
    	at org.jboss.staxmapper.XMLMapperImpl.processNested(XMLMapperImpl.java:110)
    	at org.jboss.staxmapper.XMLMapperImpl.parseDocument(XMLMapperImpl.java:69)
    	at org.jboss.as.controller.persistence.XmlConfigurationPersister.load(XmlConfigurationPersister.java:123)
    	... 3 more
    Caused by: java.util.concurrent.ExecutionException: javax.xml.stream.XMLStreamException: WFLYCTL0083: Failed to load module
    	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
    	at java.util.concurrent.FutureTask.get(FutureTask.java:192)
    	at org.jboss.as.controller.parsing.ExtensionXml.parseExtensions(ExtensionXml.java:147)
    	... 11 more
    Caused by: javax.xml.stream.XMLStreamException: WFLYCTL0083: Failed to load module
    	at org.jboss.as.controller.parsing.ExtensionXml.loadModule(ExtensionXml.java:196)
    	at org.jboss.as.controller.parsing.ExtensionXml.access$000(ExtensionXml.java:69)
    	at org.jboss.as.controller.parsing.ExtensionXml$1.call(ExtensionXml.java:127)
    	at org.jboss.as.controller.parsing.ExtensionXml$1.call(ExtensionXml.java:124)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:748)
    	at org.jboss.threads.JBossThread.run(JBossThread.java:320)
    Caused by: org.jboss.modules.ModuleNotFoundException: org.keycloak.keycloak-server-subsystem:main
    	at org.jboss.modules.ModuleLoader.loadModule(ModuleLoader.java:223)
    	at org.jboss.as.controller.parsing.ExtensionXml.loadModule(ExtensionXml.java:178)
    	... 8 more

",45700683,"In order to solve the problem I created a file called `layers.conf` inside the `keycloak-demo-3.2.1.Final/keycloak/modules` with one single line in it:

    layers=keycloak"
56790476,How to use keycloak with NestJS properly,"I need to use keycloak with NestJS and GrapphQL (type-graphql). There are some guides for using it with pure Express, but I'd prefer using with NestJS auth pattern. Can someboby give any suggestion?",64323554,"This is a kind of an old question, but since I just went through implementing it,  I would like to point to a great tutorial [Protecting your NestJS API with Keycloak][1]. It does not use `passport`, but is simply call the OpenId Connect UserInfo endpoint on Keycloak: https://openid.net/specs/openid-connect-core-1_0.html#UserInfo.

I find it very easy to add to an application, very easy to follow, and generally very well usable (comparing to an unnamed SaaS application I was using before).

    async authenticate(accessToken: string): Promise<User> {
        const url = `${this.baseURL}/realms/${this.realm}/protocol/openid-connect/userinfo`;

        try {
            const response = await this.httpService.get<KeycloakUserInfoResponse>(url, {
                headers: {
                    authorization: `Bearer ${accessToken}`,
                },
            }).toPromise();

            return {
                id: response.data.sub,
                username: response.data.preferred_username,
            };
        } catch (e) {
            throw new AuthenticationError(e.message);
        }
    }

  [1]: https://itnext.io/protecting-your-nestjs-api-with-keycloak-8236e0998233"
41538972,Keycloak Spring boot configuration,"I'm trying to configure Spring Boot and Keycloak for SSO.
I've created a basic AngularJS application that do some requests to the Spring boot backend.
[using this][1]

The Angular app is working fine and now I'm trying to follow the new Spring Boot Keycloak apdater docuementation [here][2]

This is my keycloak.json that is in the WEB-INF folder.

  

    {
      ""realm"": ""my-backend"",
      ""bearer-only"": true,
      ""realm-public-key"": ""MIIB..."",
      ""auth-server-url"": ""http://localhost:8180/auth"",
      ""ssl-required"": ""external"",
      ""resource"": ""my-backend"",
      ""principal-attribute"": ""preferred_username"",
      ""credentials"": {
        ""secret"": ""a75f55ca-8174-4072-8c60-b545c9ebf7e1""
    }

 
Here is my security configuration :

    @Configuration
    @EnableWebSecurity
    @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
    public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter
    {
        /**
         * Registers the KeycloakAuthenticationProvider with the authentication manager.
         */
        @Autowired
        public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
            auth.authenticationProvider(keycloakAuthenticationProvider());
        }
    
        /**
         * Defines the session authentication strategy.
         */
        @Bean
        @Override
        protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
            return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
        }
        
        @Override
        public void configure(WebSecurity web) throws Exception {
            web.ignoring().antMatchers(HttpMethod.OPTIONS, ""/**"");
        }
    
        @Override
        protected void configure(HttpSecurity http) throws Exception
        {
            super.configure(http);
            http
            		.authorizeRequests()
                    .antMatchers(""/api/v1*"").hasRole(""user"")
                    .antMatchers(""/admin/hello*"").hasRole(""admin"")
                    .anyRequest().permitAll();
        }
        
    }

The 2 roles, 'admin' and 'user' are created in Keycloak and the current user has this roles.


    @RestController
    @RequestMapping(""/"")
    @CrossOrigin(""*"")
    public class PharmaController {
    
    	public class Response{
    		private String message;
    		
    		public Response(String msg){
    			this.message = msg;
    		}
    		/**
    		 * @return the message
    		 */
    		public String getMessage() {
    			return message;
    		}
    		/**
    		 * @param message the message to set
    		 */
    		public void setMessage(String message) {
    			this.message = message;
    		}
    		
    	}
    	
    	@RequestMapping(
    			path=""api/v1/userinfo"", 
    			method = RequestMethod.GET)
        @ResponseBody
        public void getUserInformation(KeycloakAuthenticationToken token) {
    		if(token != null){
    			System.out.println(""token :"" + token);
    			
    			try {
    				System.out.println(token.getAccount().getPrincipal().getName());
    				System.out.println(token.getAccount().getRoles());
    			} catch (Exception e) {
    				// TODO: handle exception
    			} 
    			
    		}else{
    			System.out.println(""User not connected."");
    		}
        }
    	
    	@RequestMapping(
    			path=""admin/hello"", 
    			method = RequestMethod.GET)
        @ResponseBody
        public Response adminHello(KeycloakAuthenticationToken token) {
    		return new Response(""Hello"");
        }
    	
    }

 1. Even if the user doesn't have any of this role, he can access **api/v1/userinfo** with this response

  

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    {""data"":"""",""status"":200,""config"":{""method"":""GET"",""transformRequest"":[null],""transformResponse"":[null],""jsonpCallbackParam"":""callback"",""url"":""http://localhost:8080/api/v1/userinfo"",""headers"":{""Accept"":""application/json, text/plain, */*"",""Access-Control-Allow-Origin"":""*"",""Authorization"":""BEARER eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJSN2JSQUgtcmUwNnVEMHh4Vlotd1dyWVIycVI0S0pyMDFIZWQ2QmJMNnA4In0.eyJqdGkiOiI3ZDU4ZGM0Yi0wYzgwLTQwZDYtYWE5OC0yNDk5YzEzZTg2NmMiLCJleHAiOjE0ODM5MTY3OTgsIm5iZiI6MCwiaWF0IjoxNDgzOTE2NDk4LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxODAvYXV0aC9yZWFsbXMvbXktcGhhcm1hIiwiYXVkIjoicGhhcm1hLXdlYmFwcCIsInN1YiI6IjIxMjI2YzNlLWYwY2UtNGRjNC1hYzk0LTRlNTVmZjc4YWRlMSIsInR5cCI6IkJlYXJlciIsImF6cCI6InBoYXJtYS13ZWJhcHAiLCJub25jZSI6Ijg4MWI1MjhhLWFkOTktNDcwYy04YzJiLTlhYjI0MzM2N2IwOCIsImF1dGhfdGltZSI6MTQ4MzkxNjQ5OCwic2Vzc2lvbl9zdGF0ZSI6Ijg4ZmExODJjLTljOTctNGI2Ny1hMTMzLTk5YjFkNmU4OTZiYyIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjJiM2FjNDg1LWQ5ZjUtNDc2ZC1hYjQ1LTA2ZGZmM2VjMTQxMiIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjkwMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiJVc2VyMSBGTiBVc2VyMSBMTiIsInByZWZlcnJlZF91c2VybmFtZSI6InVzZXIxIiwiZ2l2ZW5fbmFtZSI6IlVzZXIxIEZOIiwiZmFtaWx5X25hbWUiOiJVc2VyMSBMTiIsImVtYWlsIjoidXNlcjFAeW91LmNvbSJ9.M1RvECaBV3jvNXRxQzLzS4bfKnK-gQp85mkr9GD8HbOsGRui81pZP3Pb_NJ-ieaQ7pca7tO_06UNeSqbHut7c1APV3_GEGTnwuCkKdbu1QKrVwXSXMWNyt0nu_MOdjhzG3bQat3aG68b744KdCSi5i8OBg2L4I3Zmc6nPX5vklf1U7LUXyvs_bswLPZEy1_VQ_ACu_BSIVA8iv64Nl4ng4QlEc6pyEHbhQ2pKpE7wNIiZe-ndfeQWU5FgnV0Ya16b2Up9ZnFw7fpGHDGjzlIEV_As3K32vON171OuAhTKmIbVnG4kuoijQzeqHmkoB-ldfMKPPlLheSILtHvRn8WkA""}},""statusText"":""""}

<!-- end snippet -->

 

 2. The endpoint **admin/hello** is not reachable.



This is the stack trace :

  

    [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@63858877:org.apache.tomcat.util.net.NioChannel@4d4fa76c:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8080 remote=/0:0:0:0:0:0:0:1:51832]], Status in: [OPEN_READ], State out: [OPEN]
        2017-01-09 07:11:46.739 DEBUG 14692 --- [nio-8080-exec-2] o.a.coyote.http11.Http11InputBuffer      : Received [GET /admin/hello HTTP/1.1
        Host: localhost:8080
        Connection: keep-alive
        Pragma: no-cache
        Cache-Control: no-cache
        Access-Control-Allow-Origin: *
        Accept: application/json, text/plain, */*
        Origin: http://localhost:9000
        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36
        Authorization: BEARER eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJSN2JSQUgtcmUwNnVEMHh4Vlotd1dyWVIycVI0S0pyMDFIZWQ2QmJMNnA4In0.eyJqdGkiOiIyMzMzZmI0OC0yMGE2LTQ2YzctODM1YS0wNGRiMDYyNmEyYWEiLCJleHAiOjE0ODM5MTc0MDQsIm5iZiI6MCwiaWF0IjoxNDgzOTE3MTA0LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxODAvYXV0aC9yZWFsbXMvbXktcGhhcm1hIiwiYXVkIjoicGhhcm1hLXdlYmFwcCIsInN1YiI6IjIxMjI2YzNlLWYwY2UtNGRjNC1hYzk0LTRlNTVmZjc4YWRlMSIsInR5cCI6IkJlYXJlciIsImF6cCI6InBoYXJtYS13ZWJhcHAiLCJub25jZSI6IjQwZDc3MzAyLWViNTYtNGFhMS05OTllLTcyNDRiNmY3MTFkYiIsImF1dGhfdGltZSI6MTQ4MzkxNzEwNCwic2Vzc2lvbl9zdGF0ZSI6IjdmODlkODMyLTNkNTktNDc1Yi04NzI3LTRiZGQ5MDc4ODQ5YSIsImFjciI6IjEiLCJjbGllbnRfc2Vzc2lvbiI6IjJiOGNjMzc3LWY1NjUtNGE3NS1iMWY5LWEyNWFlZTY0ZGM3MCIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjkwMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsInZpZXctcHJvZmlsZSJdfX0sIm5hbWUiOiJVc2VyMSBGTiBVc2VyMSBMTiIsInByZWZlcnJlZF91c2VybmFtZSI6InVzZXIxIiwiZ2l2ZW5fbmFtZSI6IlVzZXIxIEZOIiwiZmFtaWx5X25hbWUiOiJVc2VyMSBMTiIsImVtYWlsIjoidXNlcjFAeW91LmNvbSJ9.S5Jhrea_JzlXEuMPSfJ9Sd8HdNQyknklfdZFDMH_vaFWHiQShVVQAhM3wbwrz8NoJs3M6iFnkA-kuMPhCUR52y65HJ9mEXSxrUN6hPY4U9mEYIKw_kGVXFf_xOirA8lO9cvEmw7c7p2BN0DWmi85RshqhM6CEdGAtIL4z-rl-b3UDJkm9dT3uaMxcYb3l8lq0AkixqnaI8seFLdLgacdhfMblnKuyP6bgWUD2jl2X9ruVGfIHQeBdA19WesMJKHm9XqQaF1mjl0AM0k52bU7GZZ6cOD3yFwl2RMAUMlUPPyX9xq2L5kNEsgYdw4qlgdvjLaX_HipqHh7JHQksJv4Sg
        Referer: http://localhost:9000/
        Accept-Encoding: gzip, deflate, sdch, br
        Accept-Language: en-GB,en;q=0.8,en-US;q=0.6,fr;q=0.4
        
        ]
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] o.a.c.authenticator.AuthenticatorBase    : Security checking request GET /admin/hello
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] org.apache.catalina.realm.RealmBase      :   No applicable constraints defined
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] o.a.c.authenticator.AuthenticatorBase    :  Not subject to any constraint
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] org.apache.tomcat.util.http.Parameters   : Set encoding to UTF-8
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.w.f.OrderedRequestContextFilter    : Bound request context to thread: org.apache.catalina.connector.RequestFacade@2683da6f
        2017-01-09 07:11:46.740 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Request 'GET /admin/hello' doesn't match 'OPTIONS /**
        2017-01-09 07:11:46.741 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 1 of 13 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter'
        2017-01-09 07:11:46.741 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 2 of 13 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'
        2017-01-09 07:11:46.742 DEBUG 14692 --- [nio-8080-exec-2] w.c.HttpSessionSecurityContextRepository : No HttpSession currently exists
        2017-01-09 07:11:46.742 DEBUG 14692 --- [nio-8080-exec-2] w.c.HttpSessionSecurityContextRepository : No SecurityContext was available from the HttpSession: null. A new one will be created.
        2017-01-09 07:11:46.743 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 3 of 13 in additional filter chain; firing Filter: 'HeaderWriterFilter'
        2017-01-09 07:11:46.743 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 4 of 13 in additional filter chain; firing Filter: 'CsrfFilter'
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 5 of 13 in additional filter chain; firing Filter: 'KeycloakPreAuthActionsFilter'
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.k.adapters.PreAuthActionsHandler       : adminRequest http://localhost:8080/admin/hello
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 6 of 13 in additional filter chain; firing Filter: 'LogoutFilter'
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Request 'GET /admin/hello' doesn't match 'POST /sso/logout
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 7 of 13 in additional filter chain; firing Filter: 'KeycloakAuthenticationProcessingFilter'
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.web.util.matcher.OrRequestMatcher  : Trying to match using Ant [pattern='/sso/login']
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/admin/hello'; against '/sso/login'
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.web.util.matcher.OrRequestMatcher  : Trying to match using RequestHeaderRequestMatcher [expectedHeaderName=Authorization, expectedHeaderValue=null]
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.web.util.matcher.OrRequestMatcher  : matched
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] f.KeycloakAuthenticationProcessingFilter : Request is to process authentication
        2017-01-09 07:11:46.744 DEBUG 14692 --- [nio-8080-exec-2] f.KeycloakAuthenticationProcessingFilter : Attempting Keycloak authentication
        2017-01-09 07:11:46.871 DEBUG 14692 --- [nio-8080-exec-2] a.s.a.SpringSecurityRequestAuthenticator : Completing bearer authentication. Bearer roles: [uma_authorization] 
        2017-01-09 07:11:46.871 DEBUG 14692 --- [nio-8080-exec-2] o.k.adapters.RequestAuthenticator        : User 'user1' invoking 'http://localhost:8080/admin/hello' on client 'pharma-backend'
        2017-01-09 07:11:46.871 DEBUG 14692 --- [nio-8080-exec-2] o.k.adapters.RequestAuthenticator        : Bearer AUTHENTICATED
        2017-01-09 07:11:46.871 DEBUG 14692 --- [nio-8080-exec-2] f.KeycloakAuthenticationProcessingFilter : Auth outcome: AUTHENTICATED
        2017-01-09 07:11:46.871 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.authentication.ProviderManager     : Authentication attempt using org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider
        2017-01-09 07:11:46.872 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'delegatingApplicationListener'
        2017-01-09 07:11:46.889 DEBUG 14692 --- [nio-8080-exec-2] o.k.a.s.management.HttpSessionManager    : Session created: D309F84825BE807C7B34F16B111E92CD
        2017-01-09 07:11:46.890 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.core.session.SessionRegistryImpl   : Registering session D309F84825BE807C7B34F16B111E92CD, for principal user1
        2017-01-09 07:11:46.891 DEBUG 14692 --- [nio-8080-exec-2] f.KeycloakAuthenticationProcessingFilter : Authentication success using bearer token/basic authentication. Updating SecurityContextHolder to contain: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@a08a84cd: Principal: user1; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@4ebe3c30; Granted Authorities: KeycloakRole{role='uma_authorization'}
        2017-01-09 07:11:46.891 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'delegatingApplicationListener'
        2017-01-09 07:11:46.891 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 8 of 13 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'
        2017-01-09 07:11:46.891 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 9 of 13 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 10 of 13 in additional filter chain; firing Filter: 'AnonymousAuthenticationFilter'
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : SecurityContextHolder not populated with anonymous token, as it already contained: 'org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@a08a84cd: Principal: user1; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@4ebe3c30; Granted Authorities: KeycloakRole{role='uma_authorization'}'
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 11 of 13 in additional filter chain; firing Filter: 'SessionManagementFilter'
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] s.CompositeSessionAuthenticationStrategy : Delegating to org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy@29a23c3d
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.core.session.SessionRegistryImpl   : Registering session D309F84825BE807C7B34F16B111E92CD, for principal user1
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.core.session.SessionRegistryImpl   : Removing session D309F84825BE807C7B34F16B111E92CD from principal's set of registered sessions
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.core.session.SessionRegistryImpl   : Removing principal user1 from registry
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] s.CompositeSessionAuthenticationStrategy : Delegating to org.springframework.security.web.csrf.CsrfAuthenticationStrategy@20f0cc02
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] w.c.HttpSessionSecurityContextRepository : SecurityContext 'org.springframework.security.core.context.SecurityContextImpl@a08a84cd: Authentication: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@a08a84cd: Principal: user1; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@4ebe3c30; Granted Authorities: KeycloakRole{role='uma_authorization'}' stored to HttpSession: 'org.apache.catalina.session.StandardSessionFacade@1a43aa14
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 12 of 13 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'
        2017-01-09 07:11:46.892 DEBUG 14692 --- [nio-8080-exec-2] o.s.security.web.FilterChainProxy        : /admin/hello at position 13 of 13 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'
        2017-01-09 07:11:46.893 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Request 'GET /admin/hello' doesn't match 'POST /sso/logout
        2017-01-09 07:11:46.893 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/admin/hello'; against '/api/v1*'
        2017-01-09 07:11:46.893 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/admin/hello'; against '/admin/hello*'
        2017-01-09 07:11:46.893 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.a.i.FilterSecurityInterceptor    : Secure object: FilterInvocation: URL: /admin/hello; Attributes: [hasRole('ROLE_admin')]
        2017-01-09 07:11:46.893 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.a.i.FilterSecurityInterceptor    : Previously Authenticated: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@a08a84cd: Principal: user1; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@4ebe3c30; Granted Authorities: KeycloakRole{role='uma_authorization'}
        2017-01-09 07:11:46.895 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.access.vote.AffirmativeBased       : Voter: org.springframework.security.web.access.expression.WebExpressionVoter@58311096, returned: -1
        2017-01-09 07:11:46.896 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'delegatingApplicationListener'
        2017-01-09 07:11:46.899 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.a.ExceptionTranslationFilter     : Access is denied (user is not anonymous); delegating to AccessDeniedHandler
        
        org.springframework.security.access.AccessDeniedException: Access is denied
        	at org.springframework.security.access.vote.AffirmativeBased.decide(AffirmativeBased.java:84) ~[spring-security-core-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:233) ~[spring-security-core-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:124) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:115) ~[spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]
        	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) [spring-security-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]
      ...
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_111]
        	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.6.jar:8.5.6]
        	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111]
        
        2017-01-09 07:11:46.899 DEBUG 14692 --- [nio-8080-exec-2] o.s.s.w.header.writers.HstsHeaderWriter  : Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@5ca0c4c5
        2017-01-09 07:11:46.899 DEBUG 14692 --- [nio-8080-exec-2] w.c.HttpSessionSecurityContextRepository : SecurityContext 'org.springframework.security.core.context.SecurityContextImpl@a08a84cd: Authentication: org.keycloak.adapters.springsecurity.token.KeycloakAuthenticationToken@a08a84cd: Principal: user1; Credentials: [PROTECTED]; Authenticated: true; Details: org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount@4ebe3c30; Granted Authorities: KeycloakRole{role='uma_authorization'}' stored to HttpSession: 'org.apache.catalina.session.StandardSessionFacade@1a43aa14
        2017-01-09 07:11:46.899 DEBUG 14692 --- [nio-8080-exec-2] s.s.w.c.SecurityContextPersistenceFilter : SecurityContextHolder now cleared, as request processing completed
        2017-01-09 07:11:46.899 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.w.f.OrderedRequestContextFilter    : Cleared thread-bound request context: org.apache.catalina.connector.RequestFacade@2683da6f
        2017-01-09 07:11:46.900 DEBUG 14692 --- [nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost]           : Processing ErrorPage[errorCode=0, location=/error]
        2017-01-09 07:11:46.901 DEBUG 14692 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : DispatcherServlet with name 'dispatcherServlet' processing GET request for [/error]
        2017-01-09 07:11:46.902 DEBUG 14692 --- [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Looking up handler method for path /error
        2017-01-09 07:11:46.904 DEBUG 14692 --- [nio-8080-exec-2] s.w.s.m.m.a.RequestMappingHandlerMapping : Returning handler method [public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)]
        2017-01-09 07:11:46.904 DEBUG 14692 --- [nio-8080-exec-2] o.s.b.f.s.DefaultListableBeanFactory     : Returning cached instance of singleton bean 'basicErrorController'
        2017-01-09 07:11:46.904 DEBUG 14692 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Last-Modified value for [/error] is: -1
        2017-01-09 07:11:46.927 DEBUG 14692 --- [nio-8080-exec-2] o.s.w.s.m.m.a.HttpEntityMethodProcessor  : Written [{timestamp=Mon Jan 09 07:11:46 MYT 2017, status=403, error=Forbidden, message=Access is denied, path=/admin/hello}] as ""application/json"" using [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@45db4b8b]
        2017-01-09 07:11:46.927 DEBUG 14692 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling
        2017-01-09 07:11:46.927 DEBUG 14692 --- [nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Successfully completed request
        2017-01-09 07:11:46.928 DEBUG 14692 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    :  Disabling the response for futher output
        2017-01-09 07:11:46.928 DEBUG 14692 --- [nio-8080-exec-2] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@63858877:org.apache.tomcat.util.net.NioChannel@4d4fa76c:java.nio.channels.SocketChannel[connected local=/0:0:0:0:0:0:0:1:8080 remote=/0:0:0:0:0:0:0:1:51832]], Status in: [OPEN_READ], State out: [OPEN]



  [1]: http://slackspace.de/articles/authentication-with-spring-boot-angularjs-and-keycloak/
  [2]: https://keycloak.gitbooks.io/securing-client-applications-guide/content/topics/oidc/java/spring-boot-adapter.html

",41676556,"I went through the same and here are my findings.

org.springframework.security.access.vote.RoleVoter assumes that your roles start from 

    private String rolePrefix = ""ROLE_"";

There is no such assumption in Keycloak (unless you name all your roles ROLE_someName), therefore no roles are actually found matching.

Similar explanation can be obtained from Spring Security Javadoc of SecurityExpressionOperations class for hasRole method

    This is similar to {@link #hasAuthority(String)} except that this method implies
    that the String passed in is a role. For example, if ""USER"" is passed in the
    implementation may convert it to use ""ROLE_USER"" instead. The way in which the role
    is converted may depend on the implementation settings.

To sum it up, I've ended with exactly the same solution as you did, using hasAuthority instead of hasRole now."
60534981,How to remote debug attach Keycloak in versions > 8,"I recently upgraded Keycloak to version 9, and when running in Docker, I'm having trouble attaching a remote debugger.  I suspect this has to do with Keycloak's underlying upgrade to Java 9+.

The error I get is:

`handshake failed - connection prematurally closed`

I have my ports mapped correctly within Docker (I can run Keycloak version 7 and it attaches just fine).",60535003,"As it turns out, Java 9 introduced a security enhancement with respect to debugging.  Information here: https://stackoverflow.com/a/60090750/2117355

In my Keycloak docker-compose service definition, I was able to add under `environment`:

`      DEBUG_PORT: ""*:8787""`

And that fixed the problem.  I'm now able to debug."
51201078,"How To Resolve ""The required mechanism 'BASIC' is not available in mechanisms [KEYCLOAK] from the HttpAuthenticationFactory""","When I tried to deploy the keycloak-quickstart app-profile-jee-vanilla project, I ran into an error message. A bit of web searching did not provide a resolution, so I thought to ask here.

Here are the steps that I followed. Three bash shells are involved.

---
KEYCLOAK SHELL
---

<pre>
curl -O -L https://downloads.jboss.org/keycloak/4.1.0.Final/keycloak-4.1.0.Final.tar.gz
tar xvfz keycloak-4.1.0.Final.tar.gz
./keycloak-4.1.0.Final/bin/standalone.sh -Djboss.socket.binding.port-offset=100
</pre>

---
WILDFLY SHELL
---

<pre>
curl -O -L http://download.jboss.org/wildfly/11.0.0.Final/wildfly-11.0.0.Final.tar.gz
curl -O -L https://downloads.jboss.org/keycloak/4.1.0.Final/adapters/keycloak-oidc/keycloak-wildfly-adapter-dist-4.1.0.Final.tar.gz
tar xvfz wildfly-11.0.0.Final.tar.gz
cd wildfly-11.0.0.Final
tar xvfz ../keycloak-wildfly-adapter-dist-4.1.0.Final.tar.gz
cd bin
./jboss-cli.sh --file=adapter-elytron-install-offline.cli
cd ../..
./wildfly-11.0.0.Final/bin/standlone.sh
</pre>

---
QUICKSTART SHELL
---

<pre>
git clone https://github.com/keycloak/keycloak-quickstarts
cd keycloak-quickstarts/app-profile-jee-vanilla
mvn clean wildfly:deploy
</pre>

After a few minutes of compiling and such I see the ""The required mechanism 'BASIC' is not available in mechanisms [KEYCLOAK] from the HttpAuthenticationFactory"" message.

Can someone point me in the direction to resolve this issue?",51316621,"The problem, as I now see, is that the elytron adapter was installed and it should not have been. I removed the Wildfly directory. Then un-tarred the tgz file. Without doing any other configuration, I started the Wildfly server. After the server started, the wildfly:deploy maven command worked."
50894870,Keycloak LDAP integration: using of Custom User LDAP Filter to filter by group,"I am trying to integrate LDAP Active Directory with Keycloak. I have been able to synchronize LDAP users using Custom User LDAP Filter that filters by LDAP attributes - (theAttribute=theValue). Is there a way/syntax to filter by groups? For example, say I have Active Directory group ""My Group"" and I want to synchronize to Keycloak only users in that group. What would be the search Custom User LDAP Filter?",50939385,"How about `memberOf`? For example:

    (&(objectCategory=Person)(sAMAccountName=*)(theAttribute=theValue)(memberOf=cn=My Group,dc=example,dc=com))

Please refer to [RFC2254 ""The String Representation of LDAP Search Filters""](https://www.rfc-editor.org/rfc/rfc2254) more details:
"
74872231,Where is the custom protocol mapper in Keycloak 20.0.2?,"I'm upgrading my Keycloak from 16 to 20.

In 16 I could use this screen to add a custom mapper.

[![enter image description here][1]][1]

In 20.0.2 I can't find this form in the admin panel. There is a `Client scopes` tab for each client, and it has an add button. But it does not allow me to define my custom mapper. I just adds predefined mappers.

Where is that form? 
How can I add custom mapper to a client in Keycloak 20.0.2?

  [1]: https://i.stack.imgur.com/EzNLr.png",74873316,"IMO the old ui was a bit more intuitive in this regard. With the new one you need to:
- Go to your Realm
- Go to Clients and click on your client
- switch to 'Client Scopes'

In the 'Assigned client scope' click on your client-id-dedicated:

[![enter image description here][1]][1]

then you go to the following menu:

[![enter image description here][2]][2]

Click on 'Configure a new Mapper' and then select 'User Attribute' and you get something as follow:

[![enter image description here][3]][3]


  [1]: https://i.stack.imgur.com/Ns5CG.png
  [2]: https://i.stack.imgur.com/t7mbx.png
  [3]: https://i.stack.imgur.com/C86wG.png"
56776381,Keycloak Identity Broker API,"So i have a client which consumes an api. The API is secured with keycloak.
Users signs in normally, but i want to allow users to sign in user without having to go keycloak's login page with their social media accounts like facebook or google.
I need a rest API with an implementation of how to get a url generated so when user click on this url in a button, it will take the user to the respective social login page to login while keycloak still serves as the broker.

Below is my implementation, it generates a url alright but does not take the user to google page to login

This is a rest Controller
```
    @Secured(""permitAll"")
    @GetMapping(path = ""/generator"")
    public String brokerGenerator(HttpServletRequest httpServletRequest) throws ServletException {
        String provider = ""google"";
        String authServerRootUrl = ""http://localhost:8080/"";
        String realm = ""realmName"";
        String clientId = ""clientName"";
        String nonce = UUID.randomUUID().toString();
        MessageDigest md = null;

        try {
            md = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }

        String input = nonce + clientId + provider;
        byte[] check = md.digest(input.getBytes(StandardCharsets.UTF_8));
        String hash = Base64Url.encode(check);
        httpServletRequest.getSession().setAttribute(""hash"", hash);

        String redirectUri = ""http://localhost:4200/dashboard""; 

        return KeycloakUriBuilder.fromUri(authServerRootUrl)
                .path(""auth/realms/realmName/google/link"")
                .queryParam(""nonce"", nonce)
                .queryParam(""hash"", hash)
                .queryParam(""client_id"", clientId)
                .queryParam(""redirect_uri"", redirectUri).build(realm, provider).toString();

    }
```",56778245,"Keycloak supports this out of the box. See https://www.keycloak.org/docs/latest/server_admin/index.html#_client_suggested_idp

> OIDC applications can bypass the Keycloak login page by specifying a hint on which identity provider they want to use.
>
> This is done by setting the kc_idp_hint query parameter in the Authorization Code Flow authorization endpoint.

**UPDATE**

In your case you should use normal Keycloak Auth Code Flow endpoint and in addition to the basic query params provide `kc_idp_hint` param. This way the user is redirected to Keycloak login page first then Keycloak redirects him to the chosen identity provider login page (google in your case).

Here is an example redirect URL:

    https://keycloak-domain/realms/REALM_NAME/protocol/openid-connect/auth?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE&response_type=code&scope=openid&nonce=NONCE&kc_idp_hint=google

Edit your code according this example:

    return KeycloakUriBuilder.fromUri(authServerRootUrl)
        .path(""realms/realmName/protocol/openid-connect/auth"") // Url changed
        .queryParam(""response_type"", ""code"") // Autherization Code Flow
        .queryParam(""scope"", ""openid"") // Add additional scopes if needed
        .queryParam(""kc_idp_hint"", ""google"") // This should match IDP name registered in Keycloak
        .queryParam(""nonce"", nonce)
        .queryParam(""hash"", hash)
        .queryParam(""client_id"", clientId)
        .queryParam(""redirect_uri"", redirectUri).build(realm, provider).toString();

You can manually initiate Keycloak redirection for test. Start normal login flow and when you redirected to Keycloak login page do not enter credentials, instead add `kc_idp_hint=google` to the URL and hit ENTER. Then you will be redirected right to Google login page."
51877246,Docker (Spring Boot or Thorntail) and Keycloak,"i have a Problem Running Spring Boot and Keycloak both in docker containers.

I started with Keycloak with mysql as db running in docker.

    services:
      mysql:
        image: mysql:5.7
        container_name: mysql
        volumes:
          - mysql_data:/var/lib/mysql
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: keycloak
          MYSQL_USER: keycloak
          MYSQL_PASSWORD: password
        networks:
          - testNetwork
    
      keycloak:
        image: jboss/keycloak
        container_name: keycloak
        restart: on-failure
        volumes:
          - ./config:/config/
        environment:
          DB_VENDOR: MYSQL
          DB_ADDR: mysql
          DB_DATABASE: keycloak
          DB_USER: keycloak
          DB_PASSWORD: password
          KEYCLOAK_USER: xxx
          KEYCLOAK_PASSWORD: yyy
          KEYCLOAK_IMPORT_REALM: /keycloak/import/realm-import.json
        ports:
          - 8180:8080
        depends_on:
          - mysql
        networks:
          - testNetwork


Then i added my realm (SpringBootKeycloak), my client (testclient), and a user with role 'user'.
After that i added spring-security to my Spring-boot-application. And edited my application.yml

    spring:
      main:
        banner-mode: 'off'
      application:
        name: testclient
        version: @project.version@
      jpa:
        hibernate:
          ddl-auto: create
      datasource:
        url: jdbc:h2:mem:testclient;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
        username: xxx
        password: xxx
    keycloak:
      auth-server-url: http://localhost:8180/auth
      realm: SpringBootKeycloak
      resource: testclient
      public-client: true
      principal-attribute: preferred_username
      security-constraints:
        - authRoles:
          - user
          securityCollections:
            - patterns:
              - /*
    server:
      port: ${port:8090}
      rest:
        path: testclient

accoring to that i added my SecurityConfig:

      /**
       * Secure appropriate endpoints
       */
      @Override
      protected void configure(HttpSecurity http) throws Exception {
        super.configure(http);
        http.authorizeRequests()
            .antMatchers(""/*"").hasRole(""user"") // only user with role user are allowed to access
            .anyRequest().permitAll();
      }

Running my SpringBoot-Application locally is working fine.
I have to login with keycloak and get redirected to localhost:8090.
But when i add my SpringBoot-Application to my docker-compose and start it in a container i get still to keycloak for login, but when i should redirect i get a 403.

      testclient:
        image: testclient
        container_name: testclient
        environment:
          JAVA_OPTS: ""-agentlib:jdwp=transport=dt_socket,address=5005,server=y,suspend=n""
        build:
          context: testclient-application
        ports:
          - 8090:8090
          - 5006:5005
        networks:
          - testNetwork

with following container log:

    {""@timestamp"":""2018-08-16T11:50:11.530+00:00"",""@version"":""1"",""message"":""failed to turn code into token"",""logger_name"":""org.keycloak.adapters.OAuthRequestAuthenticator"",""thread_name"":""http-nio-8090-exec-6"",""level"":""ERROR"",""level_value"":40000,""stack_trace"":""java.net.ConnectException: Connection refused (Connection refused)\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\n\tat org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\n\tat org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)\n\tat org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134)\n\tat org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\n\tat org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\n\tat org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\n\tat org.keycloak.adapters.ServerRequest.invokeAccessCodeToToken(ServerRequest.java:111)\n\tat org.keycloak.adapters.OAuthRequestAuthenticator.resolveCode(OAuthRequestAuthenticator.java:336)\n\tat org.keycloak.adapters.OAuthRequestAuthenticator.authenticate(OAuthRequestAuthenticator.java:281)\n\tat org.keycloak.adapters.RequestAuthenticator.authenticate(RequestAuthenticator.java:139)\n\tat org.keycloak.adapters.tomcat.AbstractKeycloakAuthenticatorValve.authenticateInternal(AbstractKeycloakAuthenticatorValve.java:203)\n\tat org.keycloak.adapters.tomcat.KeycloakAuthenticatorValve.authenticate(KeycloakAuthenticatorValve.java:50)\n\tat org.keycloak.adapters.tomcat.KeycloakAuthenticatorValve.doAuthenticate(KeycloakAuthenticatorValve.java:57)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:575)\n\tat org.keycloak.adapters.tomcat.AbstractKeycloakAuthenticatorValve.invoke(AbstractKeycloakAuthenticatorValve.java:181)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:800)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:800)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1471)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n"",""app"":""testclient"",""version"":""1.0.0-SNAPSHOT""}

I can't figure out how to solve this...

EDIT 1: 
One more information: I'm running docker on Windows.

**EDIT 2: A SOLUTION**

My Working solution contains following:

1. Step, add keycloak as hosts

> To make things work, you’ll need to make sure to add the following to your hosts file (/etc/hosts on Mac/Linux, c:\Windows\System32\Drivers\etc\hosts on Windows).

>    127.0.0.1 keycloak

>    This is because you will access your application with a browser on your machine (which name is localhost, or 127.0.0.1), but inside Docker it will run in its own container, which name is keycloak.

2. Step

Inner Docker port and published port needs to be same:

    services:
      mysql:
        image: mysql:5.7
        container_name: mysql
        volumes:
          - mysql_data:/var/lib/mysql
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: keycloak
          MYSQL_USER: keycloak
          MYSQL_PASSWORD: password
        networks:
          - testNetwork
    
      keycloak:
        image: jboss/keycloak
        container_name: keycloak
        restart: on-failure
        volumes:
          - ./config:/config/
        environment:
          DB_VENDOR: MYSQL
          DB_ADDR: mysql
          DB_DATABASE: keycloak
          DB_USER: keycloak
          DB_PASSWORD: password
          KEYCLOAK_USER: xxx
          KEYCLOAK_PASSWORD: yyy
          KEYCLOAK_IMPORT_REALM: /keycloak/import/realm-import.json
        ports:
          - 8080:8080   <--- edited
        depends_on:
          - mysql
        networks:
          - testNetwork

Step 3: keycloak definition in application.yml for Spring boot edited auth-server-url:

        keycloak:
      realm: SpringBootKeycloak
      auth-server-url: http://keycloak:8080/auth   <--- edited
      resource: testclient
      public-client: true
      security-constraints:
        - authRoles:
          - user
          securityCollections:
            - patterns:
              - /*
      ssl-required: external
      confidential-port: 0

The ugly thing coming with this solution:
You cant map your Docker Port onto another port to access from url.
  ports: 
    - 8080:8080
i spend a lot of time testing other combinations, with the result that the access url port has to be the same as inner docker port (8080 in my case).

EDIT 4:

***Same thing is working with Thorntail.***


To change the port for Keycloak add...

    environment:
      JAVA_OPTS: ""-Djboss.socket.binding.port-offset=10 -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m
      -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true""

... for keycloak in docker-compose.
-Djboss.socket.binding.port-offset=10 sets default port (8080) + offset (10)
The rest are default values for keycloak.
Don't forget to edit ""ports"" and ""auth-server-url""
",51878212,"I think your problem is `auth-server-url: http://localhost:8180/auth`. That `localhost` effectively has a different meaning when your app is running inside a docker container. 

Inside the container it needs to be the name of the container i.e. `keycloak`. This is a bit awkward as when you connect to keycloak from your host machine you'd want to use `localhost` but the token issuer url needs to match to the url on which the token was requested (otherwise the token is rejected) so you end up having to put `keycloak` into your etc/hosts file. 

You are in good company with this problem - I've encountered this [working with Activiti][2]. And you can find the [JHipster project dealing with it in the same way][1] - they say:

 

> To make things work, you’ll need to make sure to add the following to your hosts file (`/etc/hosts` on Mac/Linux, `c:\Windows\System32\Drivers\etc\hosts` on Windows).
>
>`127.0.0.1 keycloak`
>
>This is because you will access your application with a browser on your machine (which name is `localhost`, or `127.0.0.1`), but inside Docker it will run in its own container, which name is `keycloak`.


  [1]: https://www.jhipster.tech/docker-compose/#7
  [2]: https://github.com/Activiti/activiti-cloud-examples/tree/7-201712-EA"
68288531,"Embedded Keycloak springboot application, upgrading keycloak from 12 to 14","Hello I have an SpringBoot application with embedded Keyclock created using the below example
https://www.baeldung.com/keycloak-embedded-in-spring-boot-app

I am trying to upgrade Keycloak from 12 to 14 and also upgraded resteasy to 3.15.1.Final, infinispan to 11.0.9.Final. The application fails to start and there is not much in the logs except for a NullPointerException. I am trying to see if any one tried the same and has any suggestions as there are not much in logs. Thanks

```2021-07-07 10:02:05 [main] DEBUG org.keycloak.connections.jpa.DefaultJpaConnectionProviderFactory - Calling migrateModel
2021-07-07 10:02:05 [main] INFO  org.keycloak.services - KC-SERVICES0050: Initializing master realm
2021-07-07 10:02:07 [main] DEBUG org.keycloak.keys.GeneratedRsaKeyProviderFactory - Generated keys for master
2021-07-07 10:02:07 [main] DEBUG org.keycloak.keys.GeneratedHmacKeyProviderFactory - Generated secret for master
2021-07-07 10:02:07 [main] DEBUG org.keycloak.keys.GeneratedAesKeyProviderFactory - Generated secret for master
2021-07-07 10:02:07 [main] DEBUG org.keycloak.connections.jpa.updater.liquibase.lock.LiquibaseDBLockProvider - Going to release database lock namespace=KEYCLOAK_BOOT
2021-07-07 10:02:07 [main] DEBUG org.keycloak.connections.jpa.updater.liquibase.lock.CustomLockService - Going to release database lock
2021-07-07 10:02:07 [main] DEBUG org.keycloak.models.cache.infinispan.InfinispanUserCacheProviderFactory - Registered cluster listeners
2021-07-07 10:02:07 [main] DEBUG org.keycloak.executors.DefaultExecutorsProviderFactory - We are in managed environment. Executor 'java:jboss/ee/concurrency/executor/default' was available.
2021-07-07 10:02:07 [main] DEBUG org.keycloak.executors.DefaultExecutorsProviderFactory - Found executor for 'storage-provider-threads' under JNDI name 'java:jboss/ee/concurrency/executor/storage-provider-threads'
2021-07-07 10:02:07 [main] FATAL org.keycloak.services - java.lang.NullPointerException

2021-07-07 10:02:07 [main] DEBUG org.keycloak.executors.DefaultExecutorsProviderFactory - Found executor for 'storage-provider-threads' under JNDI name 'java:jboss/ee/concurrency/executor/storage-provider-threads'
$$$$$$$$$$$$$$$$Stachtrace$$$$$$$$$$$$$ : java.lang.NullPointerException
	at java.base/java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011)
	at java.base/java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006)
	at org.keycloak.executors.DefaultExecutorsProviderFactory.getExecutor(DefaultExecutorsProviderFactory.java:113)
	at org.keycloak.executors.DefaultExecutorsProviderFactory$1.getExecutor(DefaultExecutorsProviderFactory.java:68)
	at org.keycloak.utils.ServicesUtils.timeBoundOne(ServicesUtils.java:71)
	at org.keycloak.storage.AbstractStorageManager.mapEnabledStorageProvidersWithTimeout(AbstractStorageManager.java:135)
	at org.keycloak.storage.UserStorageManager.getUsersCount(UserStorageManager.java:374)
	at org.keycloak.models.cache.infinispan.UserCacheSession.getUsersCount(UserCacheSession.java:545)
	at org.keycloak.storage.user.UserQueryProvider.getUsersCount(UserQueryProvider.java:52)
	at org.keycloak.services.managers.ApplianceBootstrap.createMasterRealmUser(ApplianceBootstrap.java:99)",68822374,"We had similar vague error messages when upgrading our embedded keycloak to 15 in our Spring Boot/Servlet-style application. But we eventually fixed them by crawling through the code/history of the project that this [baeldung.com tutorial][1] was based; thomasdarimont's [Embedded Keycloak Server running in a Spring Boot App][2]. This repo is a few upgrades past the initial tutorial; up to Keycloak 13. We compared the history to our code and applying/testing fixes incrementally for each version from keycloak 11 to 13. After that, the updates from 13 to 15 were a bit easier to understand, and the errors were not as cryptic.

Our application is not exactly like the example code given in the Baeldung tutorial, but below is a list of changes we needed to upgrade to Keycloak 15.0.1. These changes may not be 1:1 with your project, but hopefully these help someone save some time. 

 - In `KeycloakApplication` moved the realm-setup functions from constructor method to `bootstrap()` method. ([An example fix found here][3])<pre><code>
    public class EmbeddedKeycloakApplication extends KeycloakApplication {
        ...
        
        //public EmbeddedKeycloakApplication() {
        //    createMasterRealmAdminUser();
        //    createBaeldungRealm();
        //}

        @Override
        protected ExportImportManager bootstrap() {
            final ExportImportManager exportImportManager = super.bootstrap();
            createMasterRealmAdminUser();
            createBaeldungRealm();
            return exportImportManager;
        }
</code></pre>

 - In the `EmbeddedKeycloakConfig` we added a couple new bean references/factories ([Both found here][4])<pre><code>

    public class EmbeddedKeycloakConfig {
        ...
      
        @Bean(""fixedThreadPool"")
        public ExecutorService fixedThreadPool() {
            return Executors.newFixedThreadPool(5);
        }
    
        @Bean
        @ConditionalOnMissingBean(name = ""springBootPlatform"")
        protected SimplePlatformProvider springBootPlatform() {
            return (SimplePlatformProvider) Platform.getPlatform();
        }

</code></pre>

 - In our keycloak-server.json, we removed the default 'concurrenthashmap' name from the mapStorage provider, but still provided the concurrenthashmap properties. This matches other Keycloak 15 examples. As Paul mentioned, the map_storage needs to be enabled, and the simplest solution is to use the system properties `-Dkeycloak.profile.feature.map_storage=enabled -Dkeycloak.mapStorage.provider=concurrenthashmap`. Similar examples can be found in the Keycloak test suites [here][5] and [here][6] . **HOWEVER**: We ran into errors when using these system properties, and decided it is not needed for our code. Luckilly, the 'mapStorage' is no specifically called out in the tutorial; it is only found in the [Referenced Tutorial Code][7]. So we simply matched other Keycloak 13+ examples and removed the reference in the keycloak-server.json (shown below) to get rid of the null pointer exception. <pre><code>

    //Change this:

        ""mapStorage"": {
            ""provider"": ""${keycloak.mapStorage.provider:concurrenthashmap}"",
            ""concurrenthashmap"": {
                ""dir"": ""${project.build.directory:target}""
            }
        },

    //To This

        ""mapStorage"": {
            ""provider"": ""${keycloak.mapStorage.provider:}"",
            ""concurrenthashmap"": {
                ""dir"": ""${project.build.directory:target}""
            } 
        },

</code></pre>

 - Upgraded the proper infinispan and rest versions with keycloak version. ([Tutorial code reference][8]) <pre><code>

    < properties>

        < keycloak.version>15.0.1</keycloak.version>

        < !-- these should be updated together with Keycloak -->
        < !-- check keycloak-dependencies-server-all effective pom -->
        < infinispan.version>11.0.9.Final</infinispan.version>
        < resteasy.version>3.15.1.Final/resteasy.version>

    < /properties>

</code></pre>

 - We also added the temp directory location in the SimplePlatformProvider, since this field was required. **NOTE**: The system temp folder, used in the example, is not recommended for production. <pre><code>  

        @Override
        public File getTmpDirectory() {
            return System.getProperty(""java.io.tmpdir"");
        }
</code></pre>

I hope someone finds this info useful, Good luck!

  [1]: https://www.baeldung.com/keycloak-embedded-in-spring-boot-app
  [2]: https://github.com/thomasdarimont/embedded-spring-boot-keycloak-server
  [3]: https://github.com/thomasdarimont/embedded-spring-boot-keycloak-server/blob/master/embedded-keycloak-server-spring-boot-support/src/main/java/com/github/thomasdarimont/keycloak/embedded/EmbeddedKeycloakApplication.java
  [4]: https://github.com/thomasdarimont/embedded-spring-boot-keycloak-server/blob/master/embedded-keycloak-server-spring-boot-support/src/main/java/com/github/thomasdarimont/keycloak/embedded/EmbeddedKeycloakConfig.java
  [5]: https://github.com/keycloak/keycloak/blob/master/testsuite/utils/src/main/resources/META-INF/keycloak-server.json
  [6]: https://github.com/keycloak/keycloak/blob/master/testsuite/integration-arquillian/tests/base/src/test/resources/META-INF/keycloak-server.json
  [7]: https://github.com/Baeldung/spring-security-oauth/blob/master/oauth-jwt/jwt-auth-server/src/main/resources/META-INF/keycloak-server.json
  [8]: https://github.com/Baeldung/spring-security-oauth/blob/master/oauth-rest/oauth-authorization-server/pom.xml"
67800071,Keycloak adding new authenticator,"I'd like to add a new auth method in keycloak. To be precise - I'd like the keycloak to ask external API for some specific value. I have read about flows in keycloak but they seem to be poorly documented and I have a feeling that it is not very intuitive.

During login I would like the keycloak to send request to external API and if and only if when specific value is returned allow the user to login. For example I could override some login method and add a few lines of code doing what I want.

Which method in which class is responsible for login?",67808514,"There are multiple things you need to do to achieve that. I will go over them:

 1. Implement Authenticator and AuthenticatorFactory interfaces.
 2. Copy an existing Authentication Flow
 3. Bind flow

> I assume you know how to write and deploy a keycloak extension.

## 1. Implement Authenticator and AuthenticatorFactory interfaces.
The specific interfaces are those:
```java
org.keycloak.authentication.AuthenticatorFactory
org.keycloak.authentication.Authenticator
```

A sample implementation:
```java
org.keycloak.authentication.authenticators.browser.UsernamePasswordFormFactory
org.keycloak.authentication.authenticators.browser.UsernamePasswordForm
```
If you want to externalize your config (So you can add username/password etc. for external api), override `getConfigProperties()` method in `AuthenticatorFactory`


## 2. Copy an existing Authentication Flow.

 1. Login keycloak with admin credentials. 
 2. Create a new realm (or use if you have one)
 3. Go to Authentication tab on left.
 4. Copy browser login flow
[![copy flow][1]][1]
 5. Add your flows/executions (Your implementation of Authenticator/Factory will be listed under executions)
You can move them up or down. Make them required or alternative etc.
 [![add execution][2]][2]
 6. If you override config list it will be shown next to your execution
[![enter image description here][3]][3]
[![enter image description here][4]][4]
## 3. Bind flow.
Bind your flow in the second tab of Authentication page.
[![enter image description here][5]][5]


  [1]: https://i.stack.imgur.com/WCxEd.png
  [2]: https://i.stack.imgur.com/lyAnK.png
  [3]: https://i.stack.imgur.com/GGOfm.png
  [4]: https://i.stack.imgur.com/Qerwa.png
  [5]: https://i.stack.imgur.com/SvmH6.png"
60337636,Unable to use postgres with keycloak,"I am trying to use postgres with keycloak. following [Doc][1] 

```
$ ls keycloak-9.0.0/modules/system/layers/keycloak/org/postgresql/main
  config.xml  postgresql-42.2.10.jar
```
This is the config.xml file.
**config.xml**

```xml 
<?xml version=""1.0"" ?>
<module xmlns=""urn:jboss:module:1.3"" name=""org.postgresql"">

    <resources>
        <resource-root path=""postgresql-42.2.10.jar""/>
    </resources>

    <dependencies>
        <module name=""javax.api""/>
        <module name=""javax.transaction.api""/>
    </dependencies>
</module>

```
These are the changes that i have made in standalone.xml
**standalone.xml**
```xml
<datasources>

    <datasource jndi-name=""java:jboss/datasources/KeycloakDS"" pool-name=""KeycloakDS"" enabled=""true"" use-java-context=""true"">
      <connection-url>jdbc:postgresql://localhost:5432/test</connection-url>
      <driver>postgresql</driver>
      <pool>
           <max-pool-size>20</max-pool-size>
      </pool>
      <security>
           <user-name>postgres</user-name>
           <password>StrongPassword</password>
      </security>
   </datasource>

    <drivers>
         <driver name=""postgresql"" module=""org.postgresql"">
              <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
          </driver>
     </drivers>
            

</datasources>

<default-bindings context-service=""java:jboss/ee/concurrency/context/default"" datasource=""java:jboss/datasources/KeycloakDS"">
```

The error i am getting.
*error*

    06:13:39,430 ERROR [org.jboss.as.controller.management-operation] (ServerService Thread Pool -- 32) WFLYCTL0013: Operation (""add"") failed - address: ([
        (""subsystem"" => ""datasources""),
        (""jdbc-driver"" => ""postgresql"")
    ]) - failure description: ""WFLYJCA0115: Module for driver [org.postgresql] or one of it dependencies is missing: [org.postgresql]""

How can i resolve this?

  [1]: https://www.keycloak.org/docs/latest/server_installation/#_database",60342475,"Can I suggest another way to configure this that is less likely to have an issue?  I use the following to configure PostgreSQL and Keycloak and it has been working well.  The key is to run this against a stopped Keycloak (using a fresh install).  Save the below to something like `setup-keycloak.cli`:

    embed-server --server-config=standalone.xml --std-out=echo
    
    batch
    #
    # remove the default provided datasource
    #
    /subsystem=datasources/data-source=KeycloakDS/:remove
    
    #
    # add them
    #
    module add --name=org.postgres --resources=/path/to/postgresql-42.2.10.jar --dependencies=javax.api,javax.transaction.api
    /subsystem=datasources/jdbc-driver=postgres:add(driver-name=""postgres"",driver-module-name=""org.postgres"",driver-class-name=org.postgresql.Driver)
    
    /subsystem=datasources/data-source=KeycloakDS/:add(connection-url=jdbc:postgresql://localhost:5432/keycloak_database,driver-name=postgres,jndi-name=java:jboss/datasources/KeycloakDS,initial-pool-size=4,max-pool-size=64,min-pool-size=4,password=keycloak_user,user-name=keycloak_pass)
    
    run-batch

Then run this with `$KEYCLOAK_HOME/bin/jboss.sh --file=setup-keycloak.cli`.  This removes the KeycloakDS datasource, adds the PostgreSQL module, and recreates the KeycloakDS datasource with your parameters.  You can use this to reproduce the configuration any time as long as you have a local copy of the PostgreSQL JDBC driver."
49110262,Add a client role to a keycloak user using java,"I am using the Keycloak Admin Client library to attempt to create a user and then add a client role to that created user. I am creating the user with no problems, however when I am trying to assign a role to that user I am receiving the error:

    javax.servlet.ServletException: java.lang.IllegalStateException: RESTEASY003765: Response is closed.
    	org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:487)
    	org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:425)
    	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:383)
    	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:336)
    	org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:223)
    	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
    	org.apache.catalina.filters.CorsFilter.handleNonCORS(CorsFilter.java:441)
    	org.apache.catalina.filters.CorsFilter.doFilter(CorsFilter.java:169)

Here is my code where it is breaking:

    // Get realm
    		RealmResource realmResource = keycloak.realm(realm);
    		UsersResource userRessource = realmResource.users();
    
                    System.out.println(userId);
                    
    		// Get client
    		ClientRepresentation app1Client = realmResource.clients()
    				.findByClientId(""digicor"").get(0);
                    
                    System.out.println(""app1Client.getId: ""+app1Client.getId());
                    
                    System.out.println(""realmResource.clients()) = ""+ realmResource.clients().toString());
                    
                    System.out.println(""realmResource.roles().list() =""+realmResource.roles().list());
                    
                    System.out.println(""realmResource.roles().list().get(0) =""+realmResource.roles().list().get(0));
                    
                    System.out.println("" realmResource.clients().findAll() =""+ realmResource.clients().findAll());
                     
                    System.out.println("" realmResource.clients().findAll().get(0).toString =""+ realmResource.clients().findAll().toString());
                    
                    System.out.println(""realmResource.clients().get(digicor) = ""+ realmResource.clients().get(""digicor""));
                     
                    System.out.println(""realmResource.clients().get(digicor).roles() = ""+ realmResource.clients().get(""digicor"").roles());
                    
                    System.out.println(""realmResource.clients().get(\""digicor\"").roles().get(\""development\"") = ""+ realmResource.clients().get(""digicor"").roles().get(""development"").toString());
                    
                    RoleRepresentation clientRole = realmResource.clients().get(""digicor"").roles().get(""development"").toRepresentation();
          //Breaks on the above line and never reaches this print.           
                    System.out.println(""Role Representation made"");

Here is my pom.xml:

    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    	<modelVersion>4.0.0</modelVersion>
    	<groupId>portalbackend</groupId>
    	<artifactId>portalbackend</artifactId>
    	<version>1</version>
    	<properties>
    		<keycloak.version>3.4.3.Final</keycloak.version>
    		<resteasy.version>3.5.0.Final</resteasy.version>
    	</properties>
    	<packaging>war</packaging>
    	<build>
    		<finalName>portalbackend</finalName>
    		<sourceDirectory>src</sourceDirectory>
    		<plugins>
    			<plugin>
    				<artifactId>maven-compiler-plugin</artifactId>
    				<version>3.3</version>
    				<configuration>
    					<source>1.6</source>
    					<target>1.6</target>
    				</configuration>
    			</plugin>
    			<plugin>
    				<artifactId>maven-war-plugin</artifactId>
    				<version>2.6</version>
    				<configuration>
    					<warSourceDirectory>WebContent</warSourceDirectory>
    					<failOnMissingWebXml>false</failOnMissingWebXml>
    				</configuration>
    			</plugin>
    		</plugins>
    		<pluginManagement>
    			<plugins>
    
    				<!-- Docker configuration to build images using maven-->
    				<plugin>
    					<groupId>com.spotify</groupId>
    					<artifactId>docker-maven-plugin</artifactId>
    					<version>0.4.10</version>
    					<configuration>
    						<imageName>usmanwajid/portalbackend</imageName>
    						<imageTags>
    							<imageTag>1.1</imageTag>
    						</imageTags>
    						<dockerDirectory>.</dockerDirectory>
    						<!--<dockerHost>https://192.168.99.100:2376</dockerHost>-->
    						<resources>
    							<resource>
    								<targetPath>/</targetPath>
    								<directory>${project.build.directory}</directory>
    								<include>${project.build.finalName}.war</include>
    							</resource>
    						</resources>
    					</configuration>
    				</plugin>
    				<!--New -->
    				<plugin>
    					<groupId>org.apache.maven.plugins</groupId>
    					<artifactId>maven-compiler-plugin</artifactId>
    					<version>2.5.1</version>
    					<dependencies>
    
    					</dependencies>
    					<configuration>
    						<source>1.7</source>
    						<target>1.7</target>
    					</configuration>
    				</plugin>
    				<!--New END -->
    			</plugins>
    		</pluginManagement>
    	</build>
    	<dependencies>
    		<dependency>
    			<groupId>org.apache.tomcat</groupId>
    			<artifactId>tomcat-catalina</artifactId>
    			<version>8.0.5</version>
    		</dependency>
    		<dependency>
    			<groupId>org.glassfish.jersey.containers</groupId>
    			<artifactId>jersey-container-servlet</artifactId>
    			<version>2.22.1</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.glassfish.jersey.core</groupId>
    			<artifactId>jersey-client</artifactId>
    			<version>2.22.1</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.glassfish.jersey.core</groupId>
    			<artifactId>jersey-server</artifactId>
    			<version>2.22.1</version>
    			<type>jar</type>
    		</dependency>
    
    		<dependency>
    			<groupId>javax.ws.rs</groupId>
    			<artifactId>javax.ws.rs-api</artifactId>
    			<version>2.0.1</version>
    		</dependency>
    
    		<!-- https://mvnrepository.com/artifact/javax.mail/mail -->
    		<dependency>
    			<groupId>javax.mail</groupId>
    			<artifactId>mail</artifactId>
    			<version>1.4</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.codehaus.jackson</groupId>
    			<artifactId>jackson-core-asl</artifactId>
    			<version>1.9.13</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.glassfish</groupId>
    			<artifactId>javax.json</artifactId>
    			<version>1.0.4</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.codehaus.jackson</groupId>
    			<artifactId>jackson-mapper-asl</artifactId>
    			<version>1.9.13</version>
    		</dependency>
    
    		<dependency>
    			<groupId>com.jayway.jsonpath</groupId>
    			<artifactId>json-path</artifactId>
    			<version>2.2.0</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.slf4j</groupId>
    			<artifactId>slf4j-api</artifactId>
    			<version>1.7.5</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.slf4j</groupId>
    			<artifactId>slf4j-log4j12</artifactId>
    			<version>1.7.5</version>
    		</dependency>
    
    		<dependency>
    			<groupId>commons-codec</groupId>
    			<artifactId>commons-codec</artifactId>
    			<version>1.10</version>
    		</dependency>
    
    		<dependency>
    			<groupId>commons-io</groupId>
    			<artifactId>commons-io</artifactId>
    			<version>2.4</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.mongodb</groupId>
    			<artifactId>mongo-java-driver</artifactId>
    			<version>3.5.0</version>
    		</dependency>
    
    
    		<dependency>
    			<groupId>org.mongodb</groupId>
    			<artifactId>mongodb-driver</artifactId>
    			<version>3.5.0</version>
    		</dependency>
    
    		<dependency>
    			<groupId>javax</groupId>
    			<artifactId>javaee-web-api</artifactId>
    			<version>7.0</version>
    			<type>jar</type>
    		</dependency>
    
    		<!-- https://mvnrepository.com/artifact/org.codehaus.jettison/jettison -->
    		<dependency>
    			<groupId>org.codehaus.jettison</groupId>
    			<artifactId>jettison</artifactId>
    			<version>1.3.8</version>
    		</dependency>
    		<dependency>
    			<groupId>org.keycloak</groupId>
    			<artifactId>keycloak-admin-client</artifactId>
    			<version>${keycloak.version}</version>
    		</dependency>
    
    		<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jaxrs -->
    		<dependency>
    			<groupId>org.jboss.resteasy</groupId>
    			<artifactId>resteasy-jaxrs</artifactId>
    			<version>${resteasy.version}</version>
    		</dependency>
    
    
    		<dependency>
    			<groupId>org.jboss.resteasy</groupId>
    			<artifactId>resteasy-client</artifactId>
    			<version>${resteasy.version}</version>
    		</dependency>
    
    		<dependency>
    			<groupId>org.jboss.resteasy</groupId>
    			<artifactId>resteasy-jackson2-provider</artifactId>
    			<version>${resteasy.version}</version>
    		</dependency>
    
    		<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-multipart-provider -->
    		<dependency>
    			<groupId>org.jboss.resteasy</groupId>
    			<artifactId>resteasy-multipart-provider</artifactId>
    			<version>${resteasy.version}</version>
    		</dependency>
    
    
    	</dependencies>
    
    	<name>portalbackend</name>
    </project>

I am building this project with maven and then running it as a docker image on a server. 

Any help would be greatly appreciated, Thanks.",49121576,"I assigned Role to the user in following way 

    String userRole = ""development"";
    
    List<RoleRepresentation> roleRepresentationList = userResource.roles().realmLevel().listAvailable();
        
    for (RoleRepresentation roleRepresentation : roleRepresentationList)
      {
        if (roleRepresentation.getName().equals(userRole))
          {
            userResource.roles().realmLevel().add(Arrays.asList(roleRepresentation));
            break;
         }
      }


If You want to assign Client Level roles to User , you do as follows 

 

    ClientRepresentation clientRep = realmResource.clients().findByClientId(""digicor"").get(0);
    RoleRepresentation clientRoleRep = realmResource.clients().get(clientRep.getId()).roles().get(""development"").toRepresentation();
    userResource.roles().clientLevel(clientRep.getId()).add(Arrays.asList(clientRoleRep));"
44739006,Spring Boot - KeyCloak directed to 403 forbidden,"I am new to Keycloak, I am using the official tutorial project on 
[https://github.com/sebastienblanc/spring-boot-keycloak-tutorial][1]

for integrating with Springboot application, I have setup the KeyCloak server successfully and the spring boot application also directing to the client application I have created on the Realm I have created on KeyCloak, after providing the correct credentials it directs to the forbidden page.

    @Controller
    class ProductController {
    
    @GetMapping(path = ""/products"")
    public String getProducts(Model model){
    	model.addAttribute(""products"", Arrays.asList(""iPad"",""iPhone"",""iPod""));
    	return ""products"";
    }
    
    @GetMapping(path = ""/logout"")
    public String logout(HttpServletRequest request) throws ServletException {
    	request.logout();
    	return ""/"";
    }
    }


Application.properties file

    keycloak.auth-server-url=http://localhost:8080/auth
    keycloak.realm=springdemo
    keycloak.resource=product-app
    keycloak.public-client=true
    
    keycloak.security-constraints[0].authRoles[0]=testuser
    keycloak.security-
    constraints[0].securityCollections[0].patterns[0]=/products/*
    
    server.port=8081


I am not getting any error message from KeyCloak console or spring embedded tomcat console.

[Check the tomcat console here - no error][2]
[![enter image description here][3]][3]



Thank you.


  [1]: https://github.com/sebastienblanc/spring-boot-keycloak-tutorial
  [2]: https://pastebin.com/FfFCtaTj
  [3]: https://i.stack.imgur.com/HrzcP.png
",44746282,"I think you have a typo at 
`keycloak.security-constraints[0].authRoles[0]=testuser` , you should specify the role here and not the user. 
If you follow the blogpost instructions it should be : 
`keycloak.security-constraints[0].authRoles[0]=user`"
41601810,Unable to set user credential using Keycloak admin api,"We are importing users to KeyCloak using Java code, and we are using `keycloak-admin-client` API.
  
Tried Setting password as follows , but it is not setting/persisting the password for the user.

   

     CredentialRepresentation credential = new CredentialRepresentation();
        credential.setType(CredentialRepresentation.PASSWORD);
        credential.setValue(""password"");
        userRepresentation.setCredentials(Arrays.asList(credential));

Is there other way to set user credentials",41667442,"I used following Endpoint to set the Credentials    

    UserResource userResource = keycloak.realm(realm).users().get(userId);
    CredentialRepresentation credential = new CredentialRepresentation();
        credential.setType(CredentialRepresentation.PASSWORD);
        credential.setValue(password);
        credential.setTemporary(false);
        userResource.resetPassword(credential);"
67639013,Unable to define properties which start with keycloak,"Unable to define properties which start with keycloak. keycloak-spring-boot-starter starter jar fails to load the properties if it observes keycloak properties which aren't known to the jar. The issue gets resolved if we prefix ""`sso`"" to the properties, is there a way to avoid this error even when keeping the keycloak prefixes.

    keycloak.admin.username=
    keycloak.admin.password=
    
    sso.keycloak.admin.username=
    sso.keycloak.admin.password=

this is the error seen with `Spring Boot 2.5.0 and Keycloak 13.0.0`

    Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is java.lang.NullPointerException
            at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
            at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
            ... 21 more
    Caused by: java.lang.NullPointerException
            at org.springframework.security.config.annotation.web.builders.HttpSecurity.addFilterAtOffsetOf(HttpSecurity.java:2654)
            at org.springframework.security.config.annotation.web.builders.HttpSecurity.addFilterAfter(HttpSecurity.java:2645)
            at org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter.configure(KeycloakWebSecurityConfigurerAdapter.java:123)
            at com.foo.config.KeycloakSecurityConfig.configure(KeycloakSecurityConfig.java:36)
            at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.getHttp(WebSecurityConfigurerAdapter.java:217)
            at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:315)
            at org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.init(WebSecurityConfigurerAdapter.java:93)
            at com.foo.config.KeycloakSecurityConfig$$EnhancerBySpringCGLIB$$501f46fb.init(<generated>)
            at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.init(AbstractConfiguredSecurityBuilder.java:338)
            at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:300)
            at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:38)
            at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:127)
            at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
            at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
            at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
            at java.base/java.lang.reflect.Method.invoke(Method.java:564)
            at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)",67739605,"This error was introduced in version **5.5.0 of Spring Security** which comes with **Spring Boot 2.5.0**.
This is happening because KeyCloak adds two filters successively after another, like this:
```java
@Override
protected void configure(HttpSecurity http) throws Exception {
        http
                ...
                .addFilterAfter(keycloakSecurityContextRequestFilter(), SecurityContextHolderAwareRequestFilter.class)
                .addFilterAfter(keycloakAuthenticatedActionsRequestFilter(), KeycloakSecurityContextRequestFilter.class)
                ...
}
```
And there's a bug right now in which the custom filter order is not being persisted, thus resulting in a `NullPointerException` when trying to add a filter relative to another custom filter recently added.

What I advise you to do right now is to use a lower version of Spring Boot, like 2.4.x until the [issue in GitHub][1] gets resolved.


  [1]: https://github.com/spring-projects/spring-security/issues/9787"
60956576,How to properly build keycloak from source code,"I need to build a custom version of Keycloak in order to perform another action when password reset happens. 
In order to do this, I followed the steps described in the Readme file on the git repository:

 1. Check java version, maven version, git version (openjdk 11, amazon corretto, maven 3.6.3)
 2. Run ""git clone https://github.com/keycloak/keycloak.git""
 3. Switch to the newly created directory
 4. Run ""mvn install""

Some tests failed in module keycloak-saml-core:
```
org.keycloak.saml.processing.core.parsers.saml.SAMLParserTest
[ERROR] testSaml20AuthnResponseNonAsciiNameDefaultLatin2(org.keycloak.saml.processing.core.parsers.saml.SAMLParserTest)  Time elapsed: 0.008 s  <<< ERROR!
ParsingException [location=null]org.keycloak.saml.common.exceptions.ParsingException: javax.xml.stream.XMLStreamException: ParseError at [row,col]:[9,91]
Message: Invalid byte 2 of 3-byte UTF-8 sequence.
	at org.keycloak.saml.common.DefaultPicketLinkLogger.parserException(DefaultPicketLinkLogger.java:420)
	at org.keycloak.saml.common.util.StaxParserUtil.getElementText(StaxParserUtil.java:492)
	at org.keycloak.saml.processing.core.parsers.util.SAMLParserUtil.parseNameIDType(SAMLParserUtil.java:57)
	at org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLSubjectParser.processSubElement(SAMLSubjectParser.java:58)
	at org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLSubjectParser.processSubElement(SAMLSubjectParser.java:36)
	at org.keycloak.saml.common.parsers.AbstractStaxParser.parse(AbstractStaxParser.java:97)
	at org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAssertionParser.processSubElement(SAMLAssertionParser.java:69)
	at org.keycloak.saml.processing.core.parsers.saml.assertion.SAMLAssertionParser.processSubElement(SAMLAssertionParser.java:34)
	at org.keycloak.saml.common.parsers.AbstractStaxParser.parse(AbstractStaxParser.java:97)
	at org.keycloak.saml.processing.core.parsers.saml.protocol.SAMLResponseParser.processSubElement(SAMLResponseParser.java:77)
	at org.keycloak.saml.processing.core.parsers.saml.protocol.SAMLResponseParser.processSubElement(SAMLResponseParser.java:38)
	at org.keycloak.saml.common.parsers.AbstractStaxParser.parse(AbstractStaxParser.java:97)
	at org.keycloak.saml.processing.core.parsers.saml.SAMLParser.parse(SAMLParser.java:123)
	at org.keycloak.saml.common.parsers.AbstractParser.parse(AbstractParser.java:98)
	at org.keycloak.saml.common.parsers.AbstractParser.parse(AbstractParser.java:102)
	at org.keycloak.saml.processing.api.saml.v2.response.SAML2Response.getSAML2ObjectFromStream(SAML2Response.java:389)
	at org.keycloak.saml.processing.core.parsers.saml.SAMLParserTest.assertParsed(SAMLParserTest.java:141)
	at org.keycloak.saml.processing.core.parsers.saml.SAMLParserTest.testSaml20AuthnResponseNonAsciiNameDefaultLatin2(SAMLParserTest.java:262)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:383)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:344)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:417)
Caused by: javax.xml.stream.XMLStreamException: ParseError at [row,col]:[9,91]
Message: Invalid byte 2 of 3-byte UTF-8 sequence.
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.next(XMLStreamReaderImpl.java:652)
	at java.xml/com.sun.org.apache.xerces.internal.impl.XMLStreamReaderImpl.getElementText(XMLStreamReaderImpl.java:902)
	at java.xml/com.sun.xml.internal.stream.XMLEventReaderImpl.getElementText(XMLEventReaderImpl.java:187)
	at java.xml/javax.xml.stream.util.EventReaderDelegate.getElementText(EventReaderDelegate.java:110)
	at org.keycloak.saml.common.util.StaxParserUtil.getElementText(StaxParserUtil.java:490)
	... 44 more
```
After this, I tried running the project directly from Intellij, but received the following error:
```
org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/keycloak/adapters/tomcat/KeycloakAuthenticatorValve
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:139) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:536) ~[spring-context-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:124) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.keycloak.SpringBootAdapterApplication.main(SpringBootAdapterApplication.java:10) [classes/:na]
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'tomcatEmbeddedServletContainerFactory' defined in class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]: Initialization of bean failed; nested exception is java.lang.NoClassDefFoundError: org/keycloak/adapters/tomcat/KeycloakAuthenticatorValve
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:481) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.getEmbeddedServletContainerFactory(EmbeddedWebApplicationContext.java:201) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.createEmbeddedServletContainer(EmbeddedWebApplicationContext.java:164) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.onRefresh(EmbeddedWebApplicationContext.java:136) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	... 8 common frames omitted
Caused by: java.lang.NoClassDefFoundError: org/keycloak/adapters/tomcat/KeycloakAuthenticatorValve
	at org.keycloak.adapters.springboot.KeycloakAutoConfiguration$1.customize(KeycloakAutoConfiguration.java:59) ~[classes/:na]
	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:73) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor.postProcessBeforeInitialization(EmbeddedServletContainerCustomizerBeanPostProcessor.java:59) ~[spring-boot-1.5.20.RELEASE.jar:1.5.20.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:407) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1622) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553) ~[spring-beans-4.3.23.RELEASE.jar:4.3.23.RELEASE]
	... 16 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.keycloak.adapters.tomcat.KeycloakAuthenticatorValve
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_191]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_191]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349) ~[na:1.8.0_191]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_191]
	... 22 common frames omitted


Process finished with exit code 1
```
I also tried skipping the tests with ```mvn install -DskipTests``` and the build succeeded, but I am not aware of the location of the newly created jar file containing the result of the build.
Also, changing java version from 11 to 8 did not seem to affect the errors that would occur.
Switching to a fresh linux virtual machine did not really affect things, but tests would still fail for some unknown/unspecified reason, but in the test suites, not in the saml package.

Please note that this is the version as-is from the repository, with no changes done by me.",60971067,"Probably maven profile is missing.

Documentation: [Building from source](https://github.com/keycloak/keycloak/blob/master/docs/building.md)

1. You need Java JDK8 and Maven installed and configured;
2. In temrinal, change direcotry to project's root;
2. Run maven command:

`mvn -Pdistribution -pl distribution/server-dist -am -Dmaven.test.skip clean install`

Resulting release distribution will be in `./distribution/server-dist/target/`"
51674331,"Keycloak in Docker ""Failed to turn code into token""","I'm running Keycloak, keycloak Security Proxy and an ui application in a Docker-compose network. When I try to access the webpage, I get a login page, which I can use - but instead of being successfully redirected, I get the following error: 

    > Aug 03, 2018 1:13:24 PM org.keycloak.adapters.OAuthRequestAuthenticator resolveCode
    ERROR: failed to turn code into token
    java.net.ConnectException: Connection refused (Connection refused)
          at java.net.PlainSocketImpl.socketConnect(Native Method)
          at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
          at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
          at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
          at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
          at java.net.Socket.connect(Socket.java:589)

I get this error no matter what kind of application I proxy, or if I run it within Docker-compose or simply as a node. It also probably appears when I try to use python adapters, instead of the security proxy.

The whole network runs behind a company proxy, could this be the reason?

Considering that the code seems to be send (see below), it seems Keycloak can at least verify the user. But I'm stumped on how to solve the problem. Has anyone any ideas?

> http://localhost:8080/?state=84736978-afe6-43eb-a554-aedf86717415session_state=8a231709-5ef3-45fd-8e36-103e521ba49ecode=eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..4GewkGISgYEXeGPuCxupsA.V939JivWRaNltjnjT4r2CJGT4oj1HEX9iXycJFoAb_qhI4ietRc5Z2wQO6ekF9MOZ0VtMcLAyX0zASY-NPEcf3byX0INP-2zJDSF4TOEXNbMbMnVeKFgmLgQKDseUsl1ieofPVY7df8QVvpTs98VAw2_g2XwTsLemBcpxfalvMRBwViN6PyJI8A-gJJToolyDafHbzIco7bH4X4y5bzZsUh5yB6ZUMy0goBkAV_KPLepnA8X2OjEJef8GHyqgHVi.QQtjD-E_MZq72hb4g0BEbw

My proxy.json file is:

    {
       ""target-url"": ""http://localhost:7005"",
       ""bind-address"":""0.0.0.0"",
       ""http-port"":""8080"",
       ""applications"":[
          {
            ""base-path"":""/"",
            ""adapter-config"":{
                ""realm"":""realm"",
    			""resource"":""realm_ui"",
                ""auth-server-url"":""http://localhost:8800/auth"",
    			""ssl-required"":""external"",
    			""credentials"": {
    			 ""secret"":""secret""
    			},
    			""confidential-port"":0
    		},
            ""constraints"":[
                {
                   ""pattern"":""/*"",
    			   ""roles-allowed"":[
                      ""user""
                   ]
                }
             ]
          }
       ]
    }

In Keycloak:

    Access Type: confidential
    Standard Flow Enabled: ON
    Direct Access Grands: ON
    The Valid Redirect URI: * 

",51927505,"After searching for a while, I found the solution. It was a networking problem.
Keycloak OpenIDConnect Authentication flow follows 3 steps, as explained here: https://www.keycloak.org/docs/3.3/server_admin/topics/sso-protocols/oidc.html

Step 1 & 2 were completed, but upon receiving the temporary code from the browser the application was unable to connect with Keycloak. In step 1&2 it is always the browser connecting to application or Keycloak, not them speaking with each other.

This happened, because within my docker-compose file I declared networks that overwrote the automatic binding to 0.0.0.0 of Keycloak and the proxy. Additionally, the auth-server-url to connect to Keycloak must be true for the browser as well as the docker container of the Keycloak security proxy."
51154928,Maintain State Between HTTP Requests to Keycloak in JMeter,"So I am trying to automate a JMeter script that creates Keycloak users and then signs them in.

First It GETs the login page and stores the code, here is an example request:

    GET http://Keycloak.com:8001//auth/realms/REALM/protocol/openid-connect/auth?response_type=code&client_id=CLIENT&scope=openid%20profile%20email&nonce=N5b3a2da23c04a&response_mode=form_post&resource=RESOURCE&state=2SJwtlVZrswlGkw&redirect_uri=REDIRECTURI

However, when I then GET the registration page, the code changes and the tab_id also changes. How can I keep keycloak from generating a new code token with every HTTP request in a thread?

In addition, why is each HTTP request with JMeter acting like a new session instead of the next request in a series?
______________
**EDIT:**

I am using Regular Expression Extractors in order to track the code and execution variables, in addition to using a HTTP Cookie Manager and HTTP Cache Manager for the thread.

Looking at my POST request, both variables are the same as those from the previous HTTP request, and all of my cookies are being maintained, yet every time I try this automated login, I get a 400 error and the keycloak event log displays an invalid_code error.
________________
**Edit:**
As requested here is a screenshot of all my sign in requests
[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/FA36B.png",52236282,"Most probably your Regular Expression Extractor is not nested in the HTTP Request you are trying to extract data from.

If its scope is too wide, it applies to all HTTP Requests, so first time it succeeds extracting, but then for the next request that does not contain the token, the extractor runs and overwrites the old value by an empty one.

See scoping rules in JMeter:

- https://jmeter.apache.org/usermanual/test_plan.html#scoping_rules"
49890317,"Keycloak clients setting, SAML private key exposed","I know in SAML protocol, IDP and SP they hold their own key pair, and will not expose their private key to each other.

I assume the realm key below is the IDP key pair, which make sense because private key is not exposed. 
[![enter image description here][1]][1]


But when I turn on ""Client Signature Required"" in the client settings, the SAML key is generated and the private key is exposed? It means the IDP know the private key that will be used in SP application. 
[![enter image description here][2]][2]

It doesn't make sense, there must be something I got it wrong. Can someone help clarify?

  [1]: https://i.stack.imgur.com/FNJ6O.png
  [2]: https://i.stack.imgur.com/itNqn.png",50732725,"OK, I think I should know the answer.

My thought is correct, client SAML key is used to sign the SAML request, and realm key is used to sign the SAML response.

Client SAML private key should be kept in client's application side, the reason of why keycloak is keeping it, it is because keycloak provide ""installation"" function, it ease the user to download the adapter configuration. 

If private key is not kept in keycloak then user has to input the key value themselves, it then may NOT be that convenient. 

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/3iyhW.png"
41313734,Keycloak Angular 2 - Check authenticated status Keycloak object,"I'm implementing the Keycloak authentication service in my Angular 2 project. 
I use a service for logging in, logging out etc. 

Authenticating a user and logging out seems to work. I'm now trying to protect some routes. I now have a working AuthGuard. 
To check if the user is logged in (in the AuthGuard), I have a isAuthenticated() method in the service. 
This is the service: 

    import { Injectable } from '@angular/core';
    
    declare let Keycloak: any;
    
    @Injectable()
    export class KeycloakService {
      private keycloak = new Keycloak('app/keycloak/keycloak.json');
    
      constructor() {
        this.keycloak.init({onload: 'check-sso'});
        console.log(this.keycloak);
      }
    
      public login() {
        this.keycloak.login();
      }
    
      public logout() {
        this.keycloak.logout();
      }
    
      public isAuthenticated() {
        return this.keycloak.authenticated;
      }
    }

Flow: User logs in, user tries to reach protected route, AuthGuard checks if user is logged in via isAuthenticated(). 

*Note:* I don't want to authenticate the user for the complete Angular app. Only for some routes. 

**Problem**

After the user logs in, the user is redirected to the Angular app. After this, the isAuthenticated() method returns  still false. Here is why:

I logged the Keycloak object to the console. I found something I didn't understand. 

[![Keycloak object after login redirect][1]][1]


Keycloak object after login redirect

---

[![Same Keycloak object after login redirect (but expanded)][2]][2]


  [1]: https://i.stack.imgur.com/cQGlD.png
  [2]: https://i.stack.imgur.com/VfdZU.png

Same Keycloak object after login redirect (but expanded)

First the authenticated property is false. After expanding the authenticated property is true. 


**Question**

Is the way I try to maintain my Keycloak object the correct way?

**Consulted sources**

 - https://keycloak.gitbooks.io/securing-client-applications-guide/content/v/2.5/topics/oidc/javascript-adapter.html
 - https://github.com/keycloak/keycloak/tree/master/examples/demo-template/angular2-product-app/src/main/webapp/app

And others",41614688,"Basing on the community provided Angular2 example in [keycloak's github][1] you can spot some differences in interacting with keycloak js adapter.
Mainly the actual check on the authenticated (and possibly userName) is done on the promise returned from init.

      static init(): Promise<any> {
        let keycloakAuth: any = new Keycloak('keycloak.json');
        KeycloakService.auth.loggedIn = false;
    
          return new Promise((resolve, reject) => {
            keycloakAuth.init({ onLoad: 'login-required' })
              .success(() => {
                KeycloakService.auth.loggedIn = true;
                KeycloakService.auth.authz = keycloakAuth;
                KeycloakService.auth.logoutUrl = keycloakAuth.authServerUrl + ""/realms/demo/protocol/openid-connect/logout?redirect_uri=/angular2-product/index.html"";
                resolve();
              })
              .error(() => {
                reject();
              });
          });
    }

Also the official [keycloak js adapter's documentation][2] uses promise for the authenticated check

    <head>
        <script src=""keycloak.js""></script>
        <script>
            var keycloak = Keycloak();
            keycloak.init().success(function(authenticated) {
                alert(authenticated ? 'authenticated' : 'not authenticated');
            }).error(function() {
                alert('failed to initialize');
            });
        </script>
    </head>


  [1]: https://github.com/keycloak/keycloak/blob/master/examples/demo-template/angular2-product-app/src/main/webapp/app/keycloak.service.ts
  [2]: https://keycloak.gitbooks.io/securing-client-applications-guide/content/topics/oidc/javascript-adapter.html"
67279823,How to grant some users partial user management rights in Keycloak?,"Let's say I'm using one realm `mycomp` in Keycloak to handle all users (+ `master` realm for Keycloak superadmin). 

I'm have role of Customer Support (CS) that should be able to view users and manage their basic data like names, email, password reset etc.

I'm able to grant `realm-management` permissions like `manage-users` or `view-users` to any user in 3 ways:
 - assign directly
 - by creating composite role for CS
 - by creating group with and adding there CS

The problem is that giving `manage-users` rights CS end up being able to manage roles and groups so it is able to grant other users management permissions. Thats not valid for my config - it is a role of some higher level admin. 

**How to grant some users permissions to view and manage basic user data without allowing them to manage roles?** ",68106402,"So in the end of the day I finally managed to find an working solution.

Problem was that **Role** `manage-users` cant be overriten by **Policy**.

With help of Pedro Igor Silva from Keycloak (https://issues.redhat.com/browse/KEYCLOAK-18151) I managed to setup configuration that fullfills the usecase.

With Keycloak preview feature `admin_fine_grained_authz` enabled I created global composite **Role** `user-managers` and granted it `query-users` **Role** from `realm-management` client. Then I created **Policy** that grants `manage` permission on `Users` resource when user has `user-manager` role.

That works perfectly"
62530402,Spring Cloud Gateway redirects to Keycloak login page although Bearer token is set,"I am using a setup with Keycloak as Identity Provider, Spring Cloud Gateway as API Gateway and multiple Microservices.
I can receive a JWT via my Gateway (redirecting to Keycloak) via `http://localhost:8050/auth/realms/dev/protocol/openid-connect/token`.

I can use the JWT to access a resource directly located at the Keycloak server (e.g. `http://localhost:8080/auth/admin/realms/dev/users`).
But when I want to use the Gateway to relay me to the same resource (`http://localhost:8050/auth/admin/realms/dev/users`) I get the Keycloak Login form as response.

My conclusion is that there must me a misconfiguration in my Spring Cloud Gateway application.

This is the Security Configuration in the Gateway:
```
@Configuration
@EnableWebFluxSecurity
@EnableReactiveMethodSecurity
public class SecurityConfiguration {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http, ReactiveClientRegistrationRepository clientRegistrationRepository) {

        // Authenticate through configured OpenID Provider
        http.oauth2Login();

        // Also logout at the OpenID Connect provider
        http.logout(logout -> logout.logoutSuccessHandler(
                new OidcClientInitiatedServerLogoutSuccessHandler(clientRegistrationRepository)));

        //Exclude /auth from authentication
        http.authorizeExchange().pathMatchers(""/auth/realms/ahearo/protocol/openid-connect/token"").permitAll();

        // Require authentication for all requests
        http.authorizeExchange().anyExchange().authenticated();

        // Allow showing /home within a frame
        http.headers().frameOptions().mode(Mode.SAMEORIGIN);

        // Disable CSRF in the gateway to prevent conflicts with proxied service CSRF
        http.csrf().disable();
        return http.build();
    }
}
```

This is my application.yaml in the Gateway:
```
spring:
  application:
    name: gw-service
  cloud:
    gateway:
      default-filters:
        - TokenRelay
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
      routes:
        - id: auth
          uri: http://localhost:8080
          predicates:
            - Path=/auth/**

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: 'api-gw'
            client-secret: 'not-relevant-but-correct'
            authorizationGrantType: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope: openid,profile,email,resource.read
        provider:
          keycloak:
            issuerUri: http://localhost:8080/auth/realms/dev
            user-name-attribute: preferred_username

server:
  port: 8050
eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/eureka
    register-with-eureka: true
    fetch-registry: true
```

How can I make the Gateway able to know that the user is authenticated (using the JWT) and not redirect me to the login page?",66358961,"I bypassed the problem by communicating directly with Keycloak without relaying requests to it via Spring Cloud Gateway.

That's actually not a workaround but actually best practice/totally ok as far as I understand."
60814356,Authenticate flutter app with keycloak and openid_client,"I'm trying to authenticate my flutter app to keycloak through [openid_client](https://pub.dev/packages/openid_client)

following the repo example, I've wrote an authentication function like this

    authenticate() async {
      
      // parameters here just for the sake of the question
      var uri = Uri.parse('https://keycloak-url/auth/realms/myrealm');
      var clientId = 'my_client_id';
      var scopes = List<String>.of(['openid', 'profile']);
      var port = 4200;
      var redirectUri = Uri.parse('http://localhost:4200');

      var issuer = await Issuer.discover(uri);
      var client = new Client(issuer, clientId);

      urlLauncher(String url) async {
        if (await canLaunch(url)) {
          await launch(url, forceWebView: true);
        } else {
          throw 'Could not launch $url';
        }
      }

      var authenticator = new Authenticator(client,
          scopes: scopes,
          port: port,
          urlLancher: urlLauncher,
          redirectUri: redirectUri);

      var c = await authenticator.authorize();
      closeWebView();

      var token= await c.getTokenResponse();
      print(token);
      return token;
    }

when I call the function, a webview popup appears and I can login through keycloak, but when the popup closes I get this error at the `c.getTokenResponse()`:

>Exception has occurred.
NoSuchMethodError (NoSuchMethodError: The getter 'length' was called on null.
Receiver: null
Tried calling: length)

inspecting the Credential `c`, I can see that the TokenResponse has only ""state"", ""session_state"" and ""code"" fields

what am I missing?",60831989,"I've been answered on github ([link](https://github.com/appsup-dart/openid_client/issues/11#issuecomment-603232319)), so I'll copy the solution here:

-------------

On mobile devices you should use the PKCE flow. This is automatically selected when you omit the redirect uri in the Authenticator constructor.

So, it should be:

```dart
var authenticator = new Authenticator(client,
      scopes: scopes,
      port: port,
      urlLancher: urlLauncher,);
```
 
Make sure you add the uri `http://localhost:4200/` (including the trailing slash) to `Valid Redirect URIs` in keycloak.

![image](https://user-images.githubusercontent.com/11777399/77429467-fbea7980-6dd9-11ea-9104-5e337e6ab0b7.png)


Make sure you add the uri http://localhost:4200/ (including the trailing slash) to Valid Redirect URIs in keycloak."
50284945,Client secret not provided in request error with Keycloak,"I am facing the following issue after changing Access Type to confidential for the server-side client. It was working fine with public type.

Here is my adapter setting:

    <subsystem xmlns=""urn:jboss:domain:keycloak:1.1"">
    	<secure-deployment name=""appWEB.war"">
    	    <realm>demo</realm>
    	    <resource>app</resource>
    	    <public-client>true</public-client>
    	    <auth-server-url>http://localhost:8180/auth</auth-server-url>
    	    <ssl-required>EXTERNAL</ssl-required>
    	    <principal-attribute>preferred_username</principal-attribute>
    	    <use-resource-role-mappings>true</use-resource-role-mappings>
                <credential name=""secret"">b35f1121-93a4-4483-a70a-0048b95fd250</credential> 
    	</secure-deployment>
    </subsystem>

Here is the error found in log during login:

> [Server:node-00] 17:29:06,924 ERROR
> [org.keycloak.adapters.OAuthRequestAuthenticator] (default task-6)
> failed to turn code into token [Server:-node-00] 17:29:06,924 ERROR
> [org.keycloak.adapters.OAuthRequestAuthenticator] (default task-6)
> status from server: 400 [Server:node-00] 17:29:06,924 ERROR
> [org.keycloak.adapters.OAuthRequestAuthenticator] 
> {""error"":""unauthorized_client"",""error_description"":""Client secret not provided in request""}

Any thoughts? ",50290065,"Error:

    Client secret not provided in request

I guess, you didn't configure client secret in your app, which is required for confidential clients."
48517248,KEYCLOAK: Obtaining Access token by 'user name' only (without password),"I have a question regarding Keycloak and obtaining an Access Token.

**Our setup is as follows:**
·         users are created and maintained in Keycloak
·         resources, policies and permissions are also maintained in Keycloak

**Our use case is**:

As a third party application, I want to obtain authorization information (e.g. resource- and scope-based permissions) for a specific user by only providing the username to Keycloak, so I can allow or prohibit further actions.

**To be more specific**:
In our application the need to validate each request to other services based on the access token.But we have only the user name with us.

**The question is now:**

**>** How can we obtain an access token for the user by only knowing the username ?

**>**
Is there a solution to obtain an access token for such a user?
",48520121,"You don't specify in your question if the current user is logged in. Are you validating user specific actions, or you want to retrieve user roles for the application instead?

**The user is logged in and he is performing some action**

I suppose you're using some keycloak adapter. Then just retrieve the session object and you should have the extra info somewhere in there.

If not, you can just parse the request yourself. When using OpenId Connect, the access token is always sent for each of the requests, in the `Authorization` header. The token is base64 encoded, you can decode the token yourself.

**The application is performing some action for some registered user, without him logged in**

User access tokens are meant to provide permissions for users. As you say in your question: `As a third party application, I want...` so here you are not acting as a logged user, but as an application, so you need to go with client credentials instead. Just give the client permissions to list all the users and their roles (probably it's enough with the `view-users` role, see the link below) and log in with client credentials grant. Then you can handle fine grained permissions in your application business logic.

**See also:**

 - https://stackoverflow.com/questions/41756879/keycloak-client-credentials-flow-clarification
 - https://stackoverflow.com/questions/46073485/keycloak-spring-security-client-credential-grant
 - https://stackoverflow.com/questions/46470477/how-to-get-keycloak-users-via-rest-without-admin-account"
43068678,"Keycloak + Spring Security, through local login form","I am trying to integrate keycloak into my spring security layer. I have achieved that, the only issue I have yet to solve is the following:

When an endpoint is hit, that requires the user to be authenticated, the site redirects to my keycloak login page. After login, the user is redirected back to the page they initially requested. What I'm trying to achieve is: I **do not want my users redirecting from my app to the keycloak login page**, and back again, but better yet, to **login through a form on my app and ""proxy"" those captured details to keycloak** and get the login token back.

If anyone can shed light on the above, whether it be possible or not, and if so, some direction to the solution would be smashing.

pom.xml:

    <dependency>
        <groupId>org.keycloak</groupId>
        <artifactId>keycloak-spring-boot-adapter</artifactId>
        <version>2.4.0.Final</version>
    </dependency>
    <dependency>
        <groupId>org.keycloak</groupId>
        <artifactId>keycloak-tomcat8-adapter</artifactId>
        <version>2.4.0.Final</version>
    </dependency>

application.properties:

    keycloak.realm=MY_REALM
    keycloak.realmKey=MY_REALM_KEY
    keycloak.auth-server-url=MY_SERVER_URL
    keycloak.resource=MY_RESOURCE
    keycloak.ssl-required=external
    keycloak.public-client=true
    keycloak.use-resource-role-mappings=true
    
    keycloak.securityConstraints[0].securityCollections[0].name=static-resources
    keycloak.securityConstraints[0].securityCollections[0].patterns[0]=/css/*
    keycloak.securityConstraints[0].securityCollections[0].patterns[1]=/fonts/*
    keycloak.securityConstraints[0].securityCollections[0].patterns[2]=/js/*

    keycloak.securityConstraints[1].securityCollections[0].name=application
    keycloak.securityConstraints[1].securityCollections[0].authRoles[0]=MY_ROLE
    keycloak.securityConstraints[1].securityCollections[0].patterns[0]=/api/*
",43069649,"What you are trying to achieve contradicts the generell purpose of keycloak to **keep user information separated from the application itself**. Therefore there is (as fas a I know) no default/clean way to achieve this.

Instead you could consider [styling the login page][1] to fit your applications visual appearance.


  [1]: https://keycloak.gitbooks.io/documentation/server_development/topics/themes.html"
67287849,mozilla-django-oidc with keycloak on django 3,"I'm trying to connect Django (3.2) with Keycloak (12.0.2) using [mozilla-django-oidc](https://github.com/mozilla/mozilla-django-oidc) (1.2.4).

I'm getting the redirection to keycloak when clicking on the Login button (which is using `oidc_authentication_init` view as per [documentation](https://mozilla-django-oidc.readthedocs.io/en/stable/installation.html#enable-login-and-logout-functionality-in-templates)), but after successful login I'm getting this error:

```
Exception Type: HTTPError at /oidc/callback/
Exception Value: 404 Client Error: Not Found for url: http://localhost:8080/auth/realms/mycorp/protocol/openid-connect/token

```

Relevant settings for django settings are:

**`settings.py`**
```python
INSTALLED_APPS = [
    ...,
    'mozilla_django_oidc',
]
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
),

OIDC_AUTH_URI = 'http://localhost:8080/auth/realms/mycorp'
OIDC_CALLBACK_PUBLIC_URI = 'http://localhost'

LOGIN_REDIRECT_URL = OIDC_CALLBACK_PUBLIC_URI
LOGOUT_REDIRECT_URL = OIDC_AUTH_URI + '/protocol/openid-connect/logout?redirect_uri=' + OIDC_CALLBACK_PUBLIC_URI

OIDC_RP_CLIENT_ID = 'django'
OIDC_RP_CLIENT_SECRET = os.environ.get(""OIDC_CLIENT_SECRET"")
OIDC_RP_SCOPES = 'openid email profile'

# Keycloak-specific (as per http://KEYCLOAK_SERVER/auth/realms/REALM/.well-known/openid-configuration)
OIDC_OP_AUTHORIZATION_ENDPOINT = OIDC_AUTH_URI + '/protocol/openid-connect/auth'
OIDC_OP_TOKEN_ENDPOINT = OIDC_AUTH_URI + '/protocol/openid-connect/token'
OIDC_OP_USER_ENDPOINT = OIDC_AUTH_URI + '/protocol/openid-connect/userinfo'
OIDC_OP_JWKS_ENDPOINT = OIDC_AUTH_URI + '/protocol/openid-connect/certs'
```

**`urls.py`**
```python
urlpatterns = [
    ...,
    path('oidc/', include('mozilla_django_oidc.urls')),
]
```



And detailed error:
```
HTTPError at /oidc/callback/
404 Client Error: Not Found for url: http://localhost:8080/auth/realms/mycorp/protocol/openid-connect/token
Request Method:	GET
Request URL:	http://localhost/oidc/callback/?state=cBtEeSIHNNdsgMBUjPXkq2RwVSSpKsZF&session_state=a5b50fc0-0ec2-4def-8ec8-db1e4a95450f&code=864a2e21-75a7-42d8-8249-e9397be9b64b.a5b50fc0-0ec2-4def-8ec8-db1e4a95450f.2ec7cfbf-b5ee-4f9a-9d4b-012fdc0f9630
Django Version:	3.2
Exception Type:	HTTPError
Exception Value:	
404 Client Error: Not Found for url: http://localhost:8080/auth/realms/mycorp/protocol/openid-connect/token
Exception Location:	/usr/local/lib/python3.8/site-packages/requests/models.py, line 943, in raise_for_status
Python Executable:	/usr/local/bin/python
Python Version:	3.8.9
Python Path:	
['/home/maat/src',
 '/usr/local/bin',
 '/usr/local/lib/python38.zip',
 '/usr/local/lib/python3.8',
 '/usr/local/lib/python3.8/lib-dynload',
 '/usr/local/lib/python3.8/site-packages']
Server time:	Tue, 27 Apr 2021 19:08:01 +0200
```

Apparently everything is configured as explained in documentation, but I cannot see the point why it fails...
",68633418,"The 404 wasn't clear enough for me until I realised that the tests were running on docker-compose, so access to localhost wasn't the same as the host.

Running in host network mode or reaching keycloak by its domain name / host IP (see below `172.20.0.1` which is the docker network IP for the host) fixed it:

```
OIDC_AUTH_URI=http://172.20.0.1:8080/auth/realms/mycorp
OIDC_AUTHENTICATION_CALLBACK_URL=http://localhost/openid/callback
OIDC_CALLBACK_PUBLIC_URI=http://localhost/
```"
65232897,"Keycloak, spring and /sso/login URL setup",I have a spring boot app which is hidden behind reverse proxy. When user sends request to a resource without authorization he is redirected to keycloak login page with `redirect_uri` param set to e.g. `http://some_url/sso/login` (the URL is always relative to context path). I need to change this URL to something like `http://some_url/api/my_api/sso/login` so that reverse proxy knows where to redirect such request. Any idea how to achieve this? Is there any keycloak adapter configuration option to set it (I haven't found any) or some bean need to be overwritten?,65250525,"I'll answer to my question as I managed to find the solution (in case anyone in future faces similar problem). So basically two things are needed:

 1. Overwrite the KeycloakAuthenticationProcessingFilter bean with setting custom URL in the request matcher:
```
@Bean
    @Override
    protected KeycloakAuthenticationProcessingFilter keycloakAuthenticationProcessingFilter() throws Exception {
        RequestMatcher requestMatcher =
                new OrRequestMatcher(
                        new AntPathRequestMatcher(""/custom_url/sso/login""),
                        new RequestHeaderRequestMatcher(""Authorization""),
                        new QueryParamPresenceRequestMatcher(""access_token""),
                        new AdapterStateCookieRequestMatcher());

        return new KeycloakAuthenticationProcessingFilter(authenticationManagerBean(), requestMatcher);
    }
```
 2. Set proper authentication entry point:
```
@Override
    protected void configure(final HttpSecurity http) throws Exception {
        KeycloakAuthenticationEntryPoint entryPoint = (KeycloakAuthenticationEntryPoint)authenticationEntryPoint();
        entryPoint.setLoginUri(""/custom_url/sso/login"");

        super.configure(http);
        http
                .authorizeRequests()
                //...
                .and()
                .exceptionHandling()
                .authenticationEntryPoint(entryPoint)
                .and()
                .csrf().disable();


    }
```"
61719874,Keycloak theme variables,"In the base templates of the Keycloak there are multiple examples of variables, that are accessed in the Freemarker Templates. For example, in the file:
https://github.com/keycloak/keycloak/blob/master/themes/src/main/resources/theme/base/login/login.ftl

There  are fields:
>```properties.kcFormGroupClass```
>
>```realm.rememberMe```
>
>```url.registrationUrl```

Where are those hashes defined? The only thing I found in the documentation was that I can access:
>```${some.system.property} - for system properties```
>
>```${env.ENV_VAR} - for environment variables```

but I cannot find f.e. url options. I would like to display the address that the user tries to access. ",61725860,"All this entities is as instances of Java Classes that was provided for Freemarker template engine during page rendering. You can search for corresponding classes in keycloak github repo. Usually they all named like %Something%Bean e.g. LoginBean, ClientBean, UrlBean.

look here:
https://github.com/keycloak/keycloak/blob/10.0.1/services/src/main/java/org/keycloak/forms/login/freemarker/model/RealmBean.java"
53147838,How to Setup Keycloak + Spring Boot + Oauth2 within Microservice Architecture,"I've setup Keycloak and a public/front-end spring boot app successfully. Everything is working as expected. The front-end Spring Boot App is configured in Keycloak as a client (app-ui) in the realm, user's are able to login through keycloak, tokens pass successfully everything's great. Spring Security is securing endpoints and roles are being respected for endpoints.

Now, I'm trying to add a downstream Spring Boot App (Web Service) in the mix and I want it to be aware of the logged in user to be able to secure calls to it. The front-end Spring Boot App is using Feign Client to call the REST endpoints on the back-end Spring Boot App, but the back-end is not doing any authentication/authorization.

I have a couple questions I'm having trouble figuring out:

 1. How do I setup the front-end Spring Boot App to pass the authenticated user details to the back-end Spring Boot App (RequestInterceptor / RestTemplate / Feign config / Http Headers)?
 2. How do I configure the back-end Spring Boot App to use the authenticated user details it receives from the upstream Spring Boot App and what dependencies do I need to add to the back-end Spring Boot App to facilitate that (org.keycloak:keycloak-spring-boot-starter and org.springframework.boot:spring-boot-starter-security)?
 3. Is there anything I need to configure in Keycloak for the back-end Spring Boot App? Should it be registered in Keycloak as a confidential/non-public client (e.g. app-api)?
 4. Is there anything specific to configure in the back-end Spring Boot App? Does it talk to Keycloak to verify the authenticated user details it receives from the upstream callers?

I'd love to see a demo or tutorial that takes the one's I've seen about `How to integrate Keycloak and Spring Boot` one step farther to also secure any other downstream services. If I can figure this out, I'll post one.

I'm assuming this can be done with standard OAuth2 configuration on the back-end Spring Boot App, but I wasn't sure how it's recommended to achieve this architecture.

Here's the architecture I'm trying to setup:

[![Spring Boot and Keycloak Architecture][1]][1]


  [1]: https://i.stack.imgur.com/2Vl6u.jpg",53151991,"*How do I setup the front-end Spring Boot App to pass the authenticated user details to the back-end Spring Boot App (RequestInterceptor / RestTemplate / Feign config / Http Headers)?*

You need to pass bearer-token in your http request header.

*How do I configure the back-end Spring Boot App to use the authenticated user details it receives from the upstream Spring Boot App and what dependencies do I need to add to the back-end Spring Boot App to facilitate that (org.keycloak:keycloak-spring-boot-starter and org.springframework.boot:spring-boot-starter-security)?*

You need to add a new client in realm for example ""back-end-client"" and set its ""Access Type"" to 'bearer only'. You will need 'keycloak-spring-boot-starter' and 'spring-boot-starter-security' dependencies, also in your <dependencyManagement> add 'keycloak-adapter-bom' .
In your application.properties you should have below mentioned properties

    keycloak.realm =
    keycloak.auth-server-url = your keycloak url
    keycloak.ssl-required =external
    keycloak.bearer-only=true
    keycloak.resource =your client name
    keycloak.credentials.secret= your secret key
    keycloak.security-Constraints[0].authRoles[0] = user
    keycloak.security-Constraints[0].securityCollections[0].patterns[0] = /*
    keycloak.cors=true

*Is there anything I need to configure in Keycloak for the back-end Spring Boot App? Should it be registered in Keycloak as a confidential/non-public client (e.g. app-api)?*

You need to create a new client and it should be registered as ""bearer only""


you can refer this link : https://www.keycloak.org/docs/latest/securing_apps/#_spring_boot_adapter








"
61401493,Spring Boot Application not redirecting to Keycloak hosted on different server,"I have created a simple application which is authenticated by Keycloak server. I have tested the application and Keycloak server on same machine and the application runs fine and redirects me to the Keycloak for respective realm client authentication. Now I have reserved a separate server for my Keycloak (https://192.162.10.11:8443) and my Spring Boot is running on my localhost. But once I try to access the service, the app does not redirect me to Keycloak instead it given me Whitelable Error Page. Can someone please guide me what am I doing wrong. My complete code details are as below

***Application.properties***



    server.port=8081
    keycloak.realm= Myrealm
    keycloak.auth-server-url= https://192.162.10.11:8443/auth
    keycloak.ssl-required= external
    keycloak.resource= backend-app
    keycloak.public-client= true
    keycloak.confidential-port= 0

**
*My keycloak is running on https://192.162.10.11:8443 and I have access to it through browser*

**Myrealm setttings from Keyclaok:**

[![enter image description here][1]][1]


**Link that I am accessing is** 
http://localhost:8081/persons

*This link was being authenticated when Keycloak was on same machine as the application*

**MainClass Code**

    package sb.keycloak;
    
    import java.security.Principal;
    import java.util.ArrayList;
    import java.util.List;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.http.ResponseEntity;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.CrossOrigin;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    
    
    @SpringBootApplication
    @RequestMapping
    @CrossOrigin(allowCredentials=""true"")
    public class SbKeycloakApplication {
    
      @GetMapping(path = ""/persons"")
      public ResponseEntity<List<Persons>> customers(final Principal principal, final Model model) {
        final var personas = new ArrayList<Persons>();
        personas.add(new Persons(1, ""Person1""));
        personas.add(new Persons(2, ""Person2""));
        return ResponseEntity.ok(personas);
      }
    
      public static void main(final String[] args) {
        SpringApplication.run(SbKeycloakApplication.class, args);
      }
    
    }



**ERROR SCREENSHOT**

[![enter image description here][2]][2]


**EDIT**

I have also updated the IP of MyRealm to the correct IP (which is the IP where my Spring Boot Application is running from - my PC's IP) but still the same Whitelable error persists.

[![enter image description here][3]][3]


  [1]: https://i.stack.imgur.com/mhmog.png
  [2]: https://i.stack.imgur.com/3aan9.png
  [3]: https://i.stack.imgur.com/eeLJx.png

EDIT 2 (WHITELABEL ERROR ADDED AS TEXT BELOW)

    Whitelabel Error Page
    This application has no explicit mapping for /error, so you are seeing this as a fallback.
    
    Fri Apr 24 10:53:33 PKT 2020
    There was an unexpected error (type=Internal Server Error, status=500).
    No message available
    java.lang.NullPointerException
    	at org.keycloak.adapters.OAuthRequestAuthenticator.getRedirectUri(OAuthRequestAuthenticator.java:175)
    	at org.keycloak.adapters.OAuthRequestAuthenticator.loginRedirect(OAuthRequestAuthenticator.java:213)
    	at org.keycloak.adapters.OAuthRequestAuthenticator.authenticate(OAuthRequestAuthenticator.java:275)
    	at org.keycloak.adapters.RequestAuthenticator.authenticate(RequestAuthenticator.java:138)
    	at org.keycloak.adapters.springsecurity.filter.KeycloakAuthenticationProcessingFilter.attemptAuthentication(KeycloakAuthenticationProcessingFilter.java:154)
    	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter.doFilter(KeycloakPreAuthActionsFilter.java:96)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
    	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
    	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
    	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
    	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
    	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
    	at org.keycloak.adapters.tomcat.AbstractAuthenticatedActionsValve.invoke(AbstractAuthenticatedActionsValve.java:67)
    	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
    	at org.keycloak.adapters.tomcat.AbstractKeycloakAuthenticatorValve.invoke(AbstractKeycloakAuthenticatorValve.java:181)
    	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
    	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
    	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
    	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
    	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
    	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
    	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
    	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
    	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
    	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
    	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
    	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    	at java.base/java.lang.Thread.run(Thread.java:832)


**COMPILER ERROR OUTPUT**

     WARN 38292 --- [nio-8081-exec-2] o.keycloak.adapters.KeycloakDeployment   : Failed to load URLs from https://192.162.10.11:8443/auth/realms/Myrealm/.well-known/openid-configuration",67816273,"may check if it's related to certificate not trusted, which causes the ""Failed to load URLs.."" warning and in turn the NullPointerException in OAuthRequestAuthenticator.getRedirectUri()"
54110990,Assign role to user Keycloak Admin Client,"I'm having a problem trying to assign role to user via keycloak admin client. It always returns bad request. First I created a new realm in keycloak with new client. I created couple of users and assigned all roles from realm-management client to one of the users. I used credentials of that user in KeycloakBuilder.

Now admin client can create users, but assigning role to user returns 400 Bad Request.
Following is the code-snippet

    class KeycloakKonfig {
        var keycloak: Keycloak = KeycloakBuilder.builder()
            .serverUrl(""http://localhost:8080/auth"")
            .username(""username"")
            .password(""password"")
            .realm(""realm"")
            .clientId(""clientId"")
            .clientSecret(""clientSecret"")
    
            .resteasyClient(ResteasyClientBuilder().connectionPoolSize(20).register(CustomJacksonProvider()).build())
    
            .build()
    }

method body in controller

    val savedRoleRepresentation = KeycloakKonfig().keycloak.realm(""realm"").roles().get(""role"").toRepresentation()
    KeycloakKonfig().keycloak.realm(""realm"").users().get(""userId"").roles().realmLevel().add(Arrays.asList(savedRoleRepresentation))

Thanks",54249990,The problem was the keycloak version. I had Keycloak 4.5.0 which does not allow creating roles and assigning it to user via KeycloakBuilder. I switched to Keycloak 4.8.3 and everything works perfect.
46908323,Keycloak.enabled = false - returning status 500 internal error,"I have a Java Spring application that has some api GET requests and I've recently added Keycloak security to it. I added the dependency and BOM for the new 3.3.0.CR2 release and updated my `application.properties`; and this all worked fine. This new release has an `enabled` feature to disable keycloak for testing purposes, I want to make use of (see here: [Spring Boot Adapter Java][1]). However, I can't get this feature to work.

If I try to access the GET api call with `keycloak.enabled = true` (ie: my security on, the default value), I get a 401 unortharised error, as expected. 

However with `keycloak.enabled = false` I get a 500 internal error when I excpected a 200 and the GET response (this did happen before I ran Keycloak at all). Looking at the STS console I get a `nullpointerexception` in the internalBuild method on the following line with `adapterConfig` being `null`:

        if (adapterConfig.getRealm() == null) throw new RuntimeException(""Must set 'realm' in config"");

If anyone has any experience of using this feature successfully or can see anything I'm doing wrong please could you help.

For reference, my `application.properties` about Keycloak:

    keycloak.enabled=false
    keycloak.auth-server-url=http://localhost:8080/auth
    keycloak.realm=SpringBoot
    keycloak.resource=product-back
    keycloak.ssl-required = external
    keycloak.bearer-only=true
    keycloak.principal-attribute=email


**EDIT:**
Full stack trace as requested:

    java.lang.NullPointerException: null
    	at org.keycloak.adapters.KeycloakDeploymentBuilder.internalBuild(KeycloakDeploymentBuilder.java:55) ~[keycloak-adapter-core-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.KeycloakDeploymentBuilder.build(KeycloakDeploymentBuilder.java:164) ~[keycloak-adapter-core-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver.resolve(KeycloakSpringBootConfigResolver.java:37) ~[keycloak-spring-boot-adapter-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.AdapterDeploymentContext.resolveDeployment(AdapterDeploymentContext.java:88) ~[keycloak-adapter-core-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.PreAuthActionsHandler.preflightCors(PreAuthActionsHandler.java:107) ~[keycloak-adapter-core-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.PreAuthActionsHandler.handleRequest(PreAuthActionsHandler.java:79) ~[keycloak-adapter-core-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.keycloak.adapters.springsecurity.filter.KeycloakPreAuthActionsFilter.doFilter(KeycloakPreAuthActionsFilter.java:81) ~[keycloak-spring-security-adapter-3.3.0.CR2.jar:3.3.0.CR2]
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:331) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:214) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:177) ~[spring-security-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]
    	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.11.RELEASE.jar:4.3.11.RELEASE]
    	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1457) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_131]
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_131]
    	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.20.jar:8.5.20]
    	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]

  [1]: http://www.keycloak.org/docs/3.3/securing_apps/topics/oidc/java/spring-boot-adapter.html",46911206,Are you also using the Spring Security Adapter ? The `enable` was built for only the Spring Boot adapter. But I agree we should fix this. Can you open a ticket (issues.jboss.org/browse/KEYCLOAK) ? 
42828627,migrate to keycloak from spring boot security,"i want to migrate to keycloak from my old spring boot security app.Below is my security config.

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
    	@Autowired
    	private CustomUserDetailsService customUserDetailsService;
    	 @Override
    	    protected void configure(HttpSecurity http) throws Exception {
    		 http.csrf().disable();
    		 
    		 http
             .authorizeRequests()
                 .antMatchers(""/*"", ""/static/**"", ""/css/**"", ""/js/**"", ""/images/**"").permitAll()
                 .antMatchers(""/school-admin/*"").hasAuthority(""SCHOOL_ADMIN"").anyRequest().fullyAuthenticated()
                 .antMatchers(""/teacher/*"").hasAuthority(""TEACHER"").anyRequest().fullyAuthenticated()
                 .anyRequest().authenticated().and()
                 
             .formLogin()
                 .loginPage(""/login.html"").defaultSuccessUrl(""/loginSuccess.html"")
             	.failureUrl(""/login.html?error"").permitAll().and()
             	
             .logout()
    			.logoutRequestMatcher(new AntPathRequestMatcher(""/logout.html"")).logoutSuccessUrl(""/login.html?logout"");
                
    	 }
    	 
    	 @Autowired
    	    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
    		 auth.userDetailsService(customUserDetailsService).passwordEncoder(new BCryptPasswordEncoder());
    	    }
    }



I have already installed the keycloak and it is running on port 8080.The problem I found out that, we should create role and user on keycloak admin page, But what my current system is, users and roles are on my MySQL DB. I don't want to insert the users and roles on keycloak for authentication and authorization. ",42838816,"Ok, obviously the first thing is a running keycloak instance, I assume this should be doable with the online documentation. We use i.e. Keycloak on a Wildfly instance.
Next step is to define a realm and at least one client in keycloak that you will use to connect to with your spring-boot application. In you application's POM you will need to add dependencies for a keylcoak adapter like i.e.

    <dependency>
        <groupId>org.keycloak</groupId>
        <artifactId>keycloak-tomcat8-adapter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.keycloak</groupId>
        <artifactId>keycloak-spring-boot-adapter</artifactId>
    </dependency>
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
    </dependency>

The rest can be done in your application.properties, that's the place where you configure how the adapter connects to keycloak and which parts of your application should be secured. This can look like

    keycloak.realm=myrealm #realm that you have created in keycloak, contains your client
    keycloak.auth-server-url=KeycloakHOST:KeycloakPort/auth # Substitute with your settings
    keycloak.ssl-required=none
    keycloak.resource=myclient
    #keycloak.use-resource-role-mappings=true
    keycloak.enable-basic-auth=true # we use basic authentication in this example
    keycloak.credentials.secret=2dcf74ca-4e4f-44bf-9774-6c32c12783d3 # Secret generated for you client in keycloak
    keycloak.cors=true
    keycloak.cors-allowed-headers=x-requested-with,origin,content-type,accept,authorization
    keycloak.cors-allowed-methods=GET,POST,DELETE,PUT,OPTIONS
    keycloak.cors-max-age=3600
    keycloak.expose-token=true
    keycloak.bearer-only=true
    keycloak.securityConstraints[0].securityCollections[0].name=adminRule
    keycloak.securityConstraints[0].securityCollections[0].authRoles[0]=SCHOOL_ADMIN
    keycloak.securityConstraints[0].securityCollections[0].patterns[0]=/school-admin/*
    keycloak.securityConstraints[1].securityCollections[0].name=teacherRule
    keycloak.securityConstraints[1].securityCollections[0].authRoles[0]=TEACHER
    keycloak.securityConstraints[1].securityCollections[0].patterns[0]=/teacher/*

That's basically all you need to do in your spring-boot application. All other endpoints not covered by the rules above remain available to all. You can find a pretty good tutorial on that [here][1] that is the longer version what I have described.


  [1]: http://slackspace.de/articles/authentication-with-spring-boot-angularjs-and-keycloak/"
66336353,Should each device get a user in Keycloak authenticated through Resource Owner Password Credentials,"I am implementing an authentication system in Keycloak with human users and iot devices.

**Human Users:** Access the system through a spa and use the Standard Redirection Based Authentication Flow.

**IOT Devices:** The use case involves a number of high value devices which not interactive and need to transmit telemetry to the backend and access their own data as well data from associated users. My current plan is to use the Resource Owner Password Credentials Grant since the embedded system can be setup with credentials during provisioning. 

My thinking is that this would enable me to use Keycloak Groups and Roles for permission management and User <-> Device Association.

Is there anything inherently wrong with this approach?",66336659,"> My current plan is to use the Resource Owner Password Credentials
> Grant since the embedded system can be setup with credentials during
> provisioning.

From [source][1] one can read:

> The resource owner password credentials grant type is suitable in
> cases where the resource owner has a trust relationship with the
> client, such as the device operating system or a highly privileged
> application. **The authorization server should take special care when
> enabling this grant type and only allow it when other flows are not
> viable.**
> 
> **This grant type is suitable for clients capable of obtaining the
> resource owner’s credentials (username and password, typically using
> an interactive form).** It is also used to migrate existing clients
> using direct authentication schemes such as HTTP Basic or Digest
> authentication to OAuth by converting the stored credentials to an
> access token:

Does your use-case meets those constrains? 

If no, consider using The [Client Credentials Grant][2] instead:

> With machine-to-machine (M2M) applications, such as CLIs, daemons, or
> services running on your back-end, the system authenticates and
> authorizes the app rather than a user. For this scenario, typical
> authentication schemes like username + password or social logins don't
> make sense. Instead, M2M apps use the Client Credentials Flow (defined
> in OAuth 2.0 RFC 6749, section 4.4), in which they pass along their
> Client ID and Client Secret to authenticate themselves and get a
> token.


So in the latter instead of using the username and password for authentication you would be using a client secret instead.

> My thinking is that this would enable me to use Keycloak Groups and
> Roles for permission management and User <-> Device Association.

You can still add claims to the confidential client as well and use them for permission management.


  [1]: https://oauthlib.readthedocs.io/en/latest/oauth2/grants/password.html
  [2]: http://Client%20Credentials%20Flow"
50655194,In Keycloak is there a way to restrict registration for a specific email domains,"We are building a POC using keycloak server for IAM. The plan is to use realm to seperate out users for different client organizations.

We want to make sure that users registering for a domain can only do so if they have the company's email id. 

How do acheive this? Is there a way that we can limit user registration with email id ending with `@abc.com` to register for a realm.

We are using **4.0.0.beta2** for the poc.",50695471,"I can't find any standard functionality for this, but it is possible to create a custom authenticator (SPI) that checks the email address. Then, this can be added as an execution step in the ""registration"" authentication flow, and cancel the registration process if the email domain is not accepted. It probably won't yield nice in-place validation errors though, it would be some kind of error page.

Seems that there is a task related to this: https://issues.jboss.org/browse/KEYCLOAK-2966"
49329247,Scalable architecture for multi-tenant auth solution,"We're evaluating two different architectures for setting up [KeyCloak][1] to allow users to grant access to other users and third parties to tenants within our system.

I'm looking for experienced feedback on these to try and save some time with experimentation.

## First approach *Dynamic Client Registration*

In this approach we would have several static services (resource servers) that orchestrate access and then each tenant is represented via a dynamically registered client. 

We would then have a static set of roles (permissions) which are assigned between the user and client when they are granted access.

The total universe of roles is then fixed. The proliferation here is between users and clients or resource-servers and clients.

## Second approach *Dynamic Role Generation*

In this approach we're considering dynamically generating roles (permissions) for each tenant in the system. We're thinking of mirroring AWS's URN style so that the permissions look something ssl_certificate_key

They follow the general structure `urn:service:tenant:permission`

E.g.

- `urn:service-1:tenant-id-1:read`
- `urn:service-1:tenant-id-2:read`
- `urn:service-1:tenant-id-1:write`
- `urn:service-1:tenant-id-1:admin`
- `urn:service-2:tenant-id-1:read`

This is very simple and powerful but we have the potential for the JWT to proliferate in size as we connect a user or service to more and more tenants.

I feel like the first approach is more standard but requires us to add more complexity into the system since we have to deal with registering clients and guiding the user through the auth delegation flow each time they want to grant a server access to a client that they own. 
The second approach is dead simple technically but less standards compliant. 

We've been evaluating [Authorization API][2] (based on [UMA][3]) for this, but it's doesn't fit at the moment as there are number of unresolved issues on KeyCloak which have to be addressed.

 - https://issues.jboss.org/browse/KEYCLOAK-4134
 - https://issues.jboss.org/browse/KEYCLOAK-6321
 - https://issues.jboss.org/browse/KEYCLOAK-5737
 - https://issues.jboss.org/browse/KEYCLOAK-6868
 - https://issues.jboss.org/browse/KEYCLOAK-6547

What do people tend to do in the real world to address this issue?
Our system has an unlimited number of tenants but realistically each user is going to be associated with a few dozen at most. Third party applications (which are all dynamic clients) will potentially be associated with hundreds or thousands of other clients.


  [1]: http://www.keycloak.org/
  [2]: http://www.keycloak.org/docs/latest/authorization_services/index.html#_overview
  [3]: https://docs.kantarainitiative.org/uma/rec-uma-core.html",53405791,"If you'd still want to continue with Keycloak and stick to those standards, I'd recommend you to look at Keycloak [Authorization Services][1].

However, the other good solution is https://www.openpolicyagent.org/ where you can specify a policy for each tenant. It's not a part of OAuth 2.0/OpenID Connect, but
it scales nicely across multiple services because it can be deployed as a sidecar, but you'd need to build some permissions storage service with it.


UPDATE:
Check out the blog post related to this topic:
https://blog.verygoodsecurity.com/posts/building-a-fine-grained-permission-system-in-a-distributed-environment

  [1]: https://www.keycloak.org/docs/latest/authorization_services/index.html#_overview"
42912647,Realm definition in security,"I searched a lot about security realms and read a lot of documentations for identity management systems such as WSO2, Keycloak, Apache Syncope and more, but unfortunately I couldn't find the exact meaning of security realm.

I found that realm is a collection of security entities such as Users, Groups, Clients, Roles .. etc, that handles all the operations about these objects.

Can anyone please provide me with a definition for it?

Thanks  ",43335636,"Think of a realm as a hard partitioning structure that enables multi-tennancy in a single keycloak installation. 

For example unrelated organisations might be configured as realms, each organisation (realm) having their own set of users, admins, security configurations, policies, roles, clients, groups etc.

You have already effectively answered your own question.

"
42394475,Authenticate a rest api using keycloak access token (received from Authorization header in the HTTP GET request from the front end) in node js,"	var loadData = function () {

    var url = 'http://localhost:3000/users';

    var req = new XMLHttpRequest();
    req.open('GET', url, true);
    req.setRequestHeader('Accept', 'application/json');
    req.setRequestHeader('Authorization', 'Bearer ' + keycloak.token);

    req.onreadystatechange = function () {
        if (req.readyState == 4) {
            if (req.status == 200) {
                console.log('Success');
            } else if (req.status == 403) {
                console.log('Forbidden');
            }
        }
    }

    req.send();  
    };

Above is my front end code requesting the REST API and passing the keycloak token in the authorization header which will be needed for authentication at the node js server side.

Now I wanted to know how to secure my Rest Api using Keycloak and authenticate it on the basis of token received from the front end and tell whether the authentic user is requesting the rest api resource or not.

I have created a rest api in node js and used keycloak-connect npm packge. I have mapped the nodejs middleware with keycloak middleware.
    
    var express = require('express');
    var router = express.Router();
    var app = express();
    var Keycloak = require('keycloak-connect');
    var keycloak =new Keycloak();

    app.use( keycloak.middleware( {
    logout: '/logout',
    admin: '/',
    } ));

    router.get('/users',function(req, res, next) {
    var token=req.headers['authorization']; //Access token received from front end

    //Now how to authenticate this token with keycloak???

    });

I have also included the keycloak.json file in the root folder of my project.",42436437,"Look at the [keycloak.protect()](https://keycloak.gitbooks.io/securing-client-applications-guide/content/topics/oidc/nodejs-adapter.html#_protect_resources) function. Use it to authenticate your route. 

    router.get('/users',keycloak.protect(),function(req, res, next) {
    
    });"
57771277,Keycloak migrating hashed passwords,"I'm trying to migrate users from an old Drupal 6 CMS to Keycloak. I'd like to migrate the users with their old passwords and then assigning an ""Update Password"" required action to their profile.

However migrating the passwords seems problematic as I can only access them in their hashed form.

The passwords are hashed with an MD5 algorithm using no salt.
I've tried migrating them according to this page:
https://lists.jboss.org/pipermail/keycloak-user/2015-December/004212.html

Here's the JSON I'm sending to the Keycloak REST API:

    {
      ""hashedSaltedValue"" : ""password-hash"",
      ""algorithm"" : ""restcomm-md5"",
      ""type"" : ""password"",
    }

Here's a list of things I've tried

 - Included a NULL hash value
 - Included a 0 hashIteration value
 - Base64 encoded the hash
 - Converted the hash to binary and then Base64 encoding it

Has anyone ever had any luck getting this feature working?",62796015,"   The following curl command worked for me to migrate a old hashed password. Replace `{hashedSaltedValue}` with your hashed password and `{salt}` with you salt.

     token=""...""
     curl 'http://keycloak-http/auth/admin/realms/testrealm/users/f:60f0ff50-2cc5-492d-8222-04ac0a9964e1:217b93e8-2830-4392-83e3-9feceea94575' \
        -X PUT \
        -H ""Authorization: $token"" \
        -H ""Content-Type: application/json"" \
        --data '{""credentials"": [ { ""algorithm"": ""pbkdf2-sha512"", ""hashedSaltedValue"": ""{hashedpassword}"", ""hashIterations"": 30000, ""type"": ""password"", ""salt"":""{salt}""}]}'"
57671134,KeyCloak User Credentials Encryption,"I am using KeyCloak to automatically import the users included to an existing LDAP. Right now, I need to know how do the KeyCloak communicate to the LDAP. Specifically how do the KeyCloak pass the password to LDAP to authenticate the user credentials.

I tried to search all over the internet but I cannot find a forum, blog, or documentation about this. I need this to pass our security requirement.",57745967,"It depends on the protocol used. 

When adding an LDAP user federation, it is possible to use both `ldap` and `ldaps` protocols. 

When setting the `Connection URL` to `ldap://ldapserver.domain.com`,
the [ldap][1] protocol is used and Keycloak communicates to the server via port 389 (by default), which means all data pulled from the LDAP server will be through plain-text, including passwords whenever authentication requests are made.

On the other hand, setting the `Connection URL` to `ldaps://ldapserver.domain.com`, would make use of `LDAP over SSL/TLS` (not to be confused with [LDAP+STARTTLS][2], which is another way of encrypting LDAP communication) and Keycloak communicates to the server via port 636 (by default). Which would mean all communication between Keycloak and the LDAP server would be via an encrypted SSL/TLS tunnel, similiar to how a browser and an `HTTPS` website communicates.

> **14.3.4. Connect to LDAP over SSL**
> 
> When you configure a secured connection URL to your LDAP store(for
> example ldaps://myhost.com:636 ), Keycloak will use SSL for the
> communication with LDAP server. ...

Regarding passwords, which appears to be OP's specific concern, according to the documentation, passwords are sent to the provide as-is, which of course are transmitted through encrypted TLS tunnels if `ldaps` is used.

> **14.3.7. Password Hashing**
> 
> When the password of user is updated from Keycloak and sent to LDAP,
> it is always sent in plain-text. This is different from updating the
> password to built-in Keycloak database, when the hashing and salting
> is applied to the password before it is sent to DB. In the case of
> LDAP, the Keycloak relies on the LDAP server to provide hashing and
> salting of passwords.
> 
> Most of LDAP servers (Microsoft Active Directory, RHDS, FreeIPA)
> provide this by default. Some others (OpenLDAP, ApacheDS) may store
> the passwords in plain-text by default and you may need to explicitly
> enable password hashing for them. See the documentation of your LDAP
> server more details.


  [1]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol
  [2]: https://www.digitalocean.com/community/tutorials/how-to-encrypt-openldap-connections-using-starttls
  [3]: https://www.keycloak.org/docs/latest/server_admin/index.html#connect-to-ldap-over-ssl"
53630761,Keycloak for ionic app : keycloak-js with cordova-native does not work,"I am trying to use the Keycloak-js(from 4.4.0.Final) library in my ionic(4)  cordova application.
I have followed the [example][1] and instructions from the [documentation][2].
I have installed `cordova-plugin-browsertab`, `cordova-plugin-deeplinks`, `cordova-plugin-inappbrowser`.
Added `<preference name=""AndroidLaunchMode"" value=""singleTask"" />` in my `config.xml`
And this is how my modifications to config.xml looks like.

    <widget id=""org.phidatalab.radar_armt""....>
    
    <plugin name=""cordova-plugin-browsertab"" spec=""0.2.0"" />
    <plugin name=""cordova-plugin-inappbrowser"" spec=""3.0.0"" />
    <plugin name=""cordova-plugin-deeplinks"" spec=""1.1.0"" />
    <preference name=""AndroidLaunchMode"" value=""singleTask"" />
    <allow-intent href=""http://*/*"" />
    <allow-intent href=""https://*/*"" />
    <universal-links>
        <host name=""keycloak-cordova-example.exampledomain.net"" scheme=""https"">
            <path event=""keycloak"" url=""/login"" />
        </host>
    </universal-links>
    </widget>

and my service which uses `Keycloak-js` looks like below.

    static init(): Promise<any> {
      // Create a new Keycloak Client Instance
      let keycloakAuth: any = new Keycloak({
          url: 'https://exampledomain.net/auth/',
          realm: 'mighealth',
          clientId: 'armt',
    
      });
    
        return new Promise((resolve, reject) => {
          keycloakAuth.init({
              onLoad: 'login-required',
              adapter: 'cordova-native',
              responseMode: 'query',
              redirectUri: 'android-app://org.phidatalab.radar_armt/https/keycloak-cordova-example.github.io/login'
          }).success(() => {
    
              console.log(""Success"")
              resolve();
            }).error((err) => {
              reject(err);
            });
        });
      }

I can successfully build and run the application for `Android`. However, it doesn't work.
From `adb` logs I get ( For both `cordova` and `cordova-native` adapters)

    12-04 19:07:35.911 32578-32578/org.phidatalab.radar_armt D/SystemWebChromeClient: ng:///AuthModule/EnrolmentPageComponent.ngfactory.js: Line 457 : ERROR
    12-04 19:07:35.911 32578-32578/org.phidatalab.radar_armt I/chromium: [INFO:CONSOLE(457)] ""ERROR"", source: ng:///AuthModule/EnrolmentPageComponent.ngfactory.js (457)
    12-04 19:07:35.918 32578-32578/org.phidatalab.radar_armt D/SystemWebChromeClient: ng:///AuthModule/EnrolmentPageComponent.ngfactory.js: Line 457 : ERROR CONTEXT
    12-04 19:07:35.919 32578-32578/org.phidatalab.radar_armt I/chromium: [INFO:CONSOLE(457)] ""ERROR CONTEXT"", source: ng:///AuthModule/EnrolmentPageComponent.ngfactory.js (457)


If I try to run it on browser, I get `""universalLink is undefined""`.


I would really like some help to get this working. What am I missing? Any kind of help is much appreciated. 
Or is there a workaround/examples to get keycloak working for an ionic (public) client?

  [1]: https://github.com/keycloak/keycloak/tree/master/examples/cordova-native
  [2]: https://www.keycloak.org/docs/latest/securing_apps/index.html#_javascript_adapter",54370986,"I am posting my solution here, since I wasted a lot of time getting available plugin working for my environments. The implementation provided by `keycloak-js` is fairly outdated. So if you try to use it for an ionic-3 app, it just doesn't work. 

My solution to get this working is using `InAppBrowser` plugin (similar to `cordova` approach of `keycloak-js`) and follow standard Oauth2 `authorization_code` procedure. I had a look into the code of `keycloak-js` and implemented solution based on it. Thanks to `keycloak-js` too.

Here it is. 
Step1: Install `[cordova-inapp-browser][1]`. 

Step2: A sample `keycloak-auth.service.ts` could look like below. This could potentially replace keycloak-js, but only for `cordova` option. 
```
import 'rxjs/add/operator/toPromise'

import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http'
import {Injectable} from '@angular/core'
import {JwtHelperService} from '@auth0/angular-jwt'
import {StorageService} from '../../../core/services/storage.service'
import {StorageKeys} from '../../../shared/enums/storage'
import {InAppBrowser, InAppBrowserOptions} from '@ionic-native/in-app-browser';


const uuidv4 = require('uuid/v4');

@Injectable()
export class AuthService {
  URI_base: 'https://my-server-location/auth';
  keycloakConfig: any;

  constructor(
    public http: HttpClient,
    public storage: StorageService,
    private jwtHelper: JwtHelperService,
    private inAppBrowser: InAppBrowser,
  ) {
      this.keycloakConfig = {
        authServerUrl: 'https://my-server-location/auth/', //keycloak-url
        realm: 'myrealmmName', //realm-id
        clientId: 'clientId', // client-id
        redirectUri: 'http://my-demo-app/callback/',  //callback-url registered for client.
                                                      // This can be anything, but should be a valid URL
      };
  }

  public keycloakLogin(login: boolean): Promise<any> {
    return new Promise((resolve, reject) => {
      const url = this.createLoginUrl(this.keycloakConfig, login);

      const options: InAppBrowserOptions = {
        zoom: 'no',
        location: 'no',
        clearsessioncache: 'yes',
        clearcache: 'yes'
      }
      const browser = this.inAppBrowser.create(url, '_blank', options);

      const listener = browser.on('loadstart').subscribe((event: any) => {
        const callback = encodeURI(event.url);
        //Check the redirect uri
        if (callback.indexOf(this.keycloakConfig.redirectUri) > -1) {
          listener.unsubscribe();
          browser.close();
          const code = this.parseUrlParamsToObject(event.url);
          this.getAccessToken(this.keycloakConfig, code).then(
            () => {
              const token = this.storage.get(StorageKeys.OAUTH_TOKENS);
              resolve(token);
            },
            () => reject(""Count not login in to keycloak"")
          );
        }
      });

    });
  }

  parseUrlParamsToObject(url: any) {
    const hashes = url.slice(url.indexOf('?') + 1).split('&');
    return hashes.reduce((params, hash) => {
      const [key, val] = hash.split('=');
      return Object.assign(params, {[key]: decodeURIComponent(val)})
    }, {});
  }

  createLoginUrl(keycloakConfig: any, isLogin: boolean) {
    const state = uuidv4();
    const nonce = uuidv4();
    const responseMode = 'query';
    const responseType = 'code';
    const scope = 'openid';
    return this.getUrlForAction(keycloakConfig, isLogin) +
      '?client_id=' + encodeURIComponent(keycloakConfig.clientId) +
      '&state=' + encodeURIComponent(state) +
      '&redirect_uri=' + encodeURIComponent(keycloakConfig.redirectUri) +
      '&response_mode=' + encodeURIComponent(responseMode) +
      '&response_type=' + encodeURIComponent(responseType) +
      '&scope=' + encodeURIComponent(scope) +
      '&nonce=' + encodeURIComponent(nonce);
  }

  getUrlForAction(keycloakConfig: any, isLogin: boolean) {
    return isLogin ? this.getRealmUrl(keycloakConfig) + '/protocol/openid-connect/auth'
      : this.getRealmUrl(keycloakConfig) + '/protocol/openid-connect/registrations';
  }

  loadUserInfo() {
    return this.storage.get(StorageKeys.OAUTH_TOKENS).then( tokens => {
      const url = this.getRealmUrl(this.keycloakConfig) + '/protocol/openid-connect/userinfo';
      const headers = this.getAccessHeaders(tokens.access_token, 'application/json');
      return this.http.get(url, {headers: headers}).toPromise();
    })
  }

  getAccessToken(kc: any, authorizationResponse: any) {
    const URI = this.getTokenUrl();
    const body = this.getAccessTokenParams(authorizationResponse.code, kc.clientId, kc.redirectUri);
    const headers = this.getTokenRequestHeaders();

    return this.createPostRequest(URI,  body, {
      header: headers,
    }).then((newTokens: any) => {
      newTokens.iat = (new Date().getTime() / 1000) - 10; // reduce 10 sec to for delay
      this.storage.set(StorageKeys.OAUTH_TOKENS, newTokens);
    });
  }

  refresh() {
    return this.storage.get(StorageKeys.OAUTH_TOKENS)
      .then(tokens => {
        const decoded = this.jwtHelper.decodeToken(tokens.access_token)
        if (decoded.iat + tokens.expires_in < (new Date().getTime() /1000)) {
          const URI = this.getTokenUrl();
          const headers = this.getTokenRequestHeaders();
          const body = this.getRefreshParams(tokens.refresh_token, this.keycloakConfig.clientId);
          return this.createPostRequest(URI, body, {
            headers: headers
          })
        } else {
          return tokens
        }
      })
      .then(newTokens => {
        newTokens.iat = (new Date().getTime() / 1000) - 10;
        return this.storage.set(StorageKeys.OAUTH_TOKENS, newTokens)
      })
      .catch((reason) => console.log(reason))
  }

  createPostRequest(uri, body, headers) {
    return this.http.post(uri, body, headers).toPromise()
  }

  getAccessHeaders(accessToken, contentType) {
    return new HttpHeaders()
      .set('Authorization', 'Bearer ' + accessToken)
      .set('Content-Type', contentType);
  }

  getRefreshParams(refreshToken, clientId) {
    return new HttpParams()
      .set('grant_type', 'refresh_token')
      .set('refresh_token', refreshToken)
      .set('client_id', encodeURIComponent(clientId))
  }

  getAccessTokenParams(code , clientId, redirectUrl) {
    return new HttpParams()
      .set('grant_type', 'authorization_code')
      .set('code', code)
      .set('client_id', encodeURIComponent(clientId))
      .set('redirect_uri', redirectUrl);
  }

  getTokenUrl() {
    return this.getRealmUrl(this.keycloakConfig) + '/protocol/openid-connect/token';
  }

  getTokenRequestHeaders() {
    const headers = new HttpHeaders()
      .set('Content-Type', 'application/x-www-form-urlencoded');

    const clientSecret = (this.keycloakConfig.credentials || {}).secret;
    if (this.keycloakConfig.clientId && clientSecret) {
      headers.set('Authorization', 'Basic ' + btoa(this.keycloakConfig.clientId + ':' + clientSecret));
    }
    return headers;
  }

  getRealmUrl(kc: any) {
    if (kc && kc.authServerUrl) {
      if (kc.authServerUrl.charAt(kc.authServerUrl.length - 1) == '/') {
        return kc.authServerUrl + 'realms/' + encodeURIComponent(kc.realm);
      } else {
        return kc.authServerUrl + '/realms/' + encodeURIComponent(kc.realm);
      }
    } else {
      return undefined;
    }
  }
}

```
Step 3: Then you can use this service in your components to what is necessary.

```
@Component({
  selector: 'page-enrolment',
  templateUrl: 'enrolment-page.component.html'
})
export class EnrolmentPageComponent {
constructor(
    public storage: StorageService,
    private authService: AuthService,
  ) {}
  goToRegistration() {
    this.loading = true;
    this.authService.keycloakLogin(false)
      .then(() => {
        return this.authService.retrieveUserInformation(this.language)
      });
  }
}
```
Note: keycloakLogin(true) takes you to login page or keycloakLogin(false) takes you to registration page of keycloak.

I hope this helps you solve it more or less.


  [1]: https://ionicframework.com/docs/native/in-app-browser/"
47158634,Add protocol-mapper to keycloak using kcadm.sh,"I have been trying to setup my full test system in keycloak using the kcadmin cli, but I have some problems creating protocol mappers:
 
*HTTP error - 400 Bad Request*

I have been trying to implement a request using: 

http://www.keycloak.org/docs-api/3.3/rest-api/index.html
http://blog.keycloak.org/2017/01/administer-keycloak-server-from-shell.html

Am I missing something in the request:

    /opt/jboss/keycloak/bin/kcadm.sh create \
    clients/7e8ef93b-0d0f-487d-84a5-5cfaee7ddf13/protocol-mappers/models \
    -r $test_realm \
    -s config.user.attribute=tenants \
    -s config.claim.name=tenants \
    -s config.jsonType.label=String \
    -s config.id.token.claim=true \
    -s config.access.token.claim=true \
    -s config.userinfo.token.claim=true \
    -s config.multivalued=true \
    -s name=tenants \
    -s protocolMapper=oidc-usermodel-attribute-mapper

This works:

    /opt/jboss/keycloak/bin/kcadm.sh create \
    clients/7e8ef93b-0d0f-487d-84a5-5cfaee7ddf13/protocol-mappers/models \
    -r $test_realm \
    -s name=tenants1 \
    -s protocol=openid-connect \
    -s protocolMapper=oidc-usermodel-attribute-mapper",47160599,"In the failing example the following value is missing:   
``-s protocol=openid-connect``"
65714161,Keycloak: Generate access token for a user with keycloak-admin,"I have to move a legacy authentication system to Keycloak and I cannot change the actual workflow on the client. As such, I need to provide with my api (in node.js) a user creation and login system that in turns create and get access tokens from Keycloak on behalf of the user.

I'm able to create a user but I've not been able to find a way to generate an access token for that user. The only workaround I found is to create a user and set a random password, then asking to grant the user providing username and password but this means that I have to store a password on my side, which is exactly the reason why I wanted to move to Keycloak.
```
const KcAdminClient   = require('keycloak-admin').default;
const Keycloak        = require('keycloak-connect');

const _keycloakAdmin = new KcAdminClient({
  baseUrl: process.env.KEYCLOAK_SERVER_AUTH_URL,
  realm: process.env.KEYCLOAK_REALM
});
await _keycloakAdmin.auth({
  realm: process.env.KEYCLOAK_REALM,
  username: process.env.KEYCLOAK_USER,
  password: process.env.KEYCLOAK_PASSWORD,
  grantType: 'password',
  clientId: process.env.KEYCLOAK_CLIENT_ID,
});

//Create a user and set password 
const newUser = await _keycloakAdmin.users.create({
  realm: process.env.KEYCLOAK_REALM,
  username: 'something',
  email: 'someone@domain.com',
  firstName: 'Some',
  lastName: 'One',
  emailVerified: true,
  enabled: true,
});

await _keycloakAdmin.users.resetPassword({
    realm: process.env.KEYCLOAK_REALM,
    id: newUser.id,
    credential: {
        temporary: false,
        type: 'password',
        value: 'randompassword'
    }
});

//generate a token for the user
const _keycloak = new Keycloak({}, {
  clientId: process.env.KEYCLOAK_CLIENT_ID,
  serverUrl: process.env.KEYCLOAK_SERVER_AUTH_URL,
  realm: process.env.KEYCLOAK_REALM,
  credentials: {
      secret: process.env.KEYCLOAK_CLIENT_SECRET
  }
});
const grant = await _keycloak.grantManager.obtainDirectly('something', 'randompassword');
const access_token = grant.access_token.token;
```
I cannot believe doesn't exist a more elegant way to do it so I think I'm missing something fundamental in the configuration of my Keycloak client and in understanding some basic concept and naming convention. I would have expected something like

    await _keycloakAdmin.users.generateAccessToken(userId, realm, clientId, ...)

but I wasn't able to find it. I only found here on SO this unanswered question: https://stackoverflow.com/questions/62683482/keycloak-rest-api-call-to-get-access-token-of-a-user-through-admin-username-and",66776682,"The solution is quite complex and needs (at the time of writing) the activation of a ""preview"" feature of Keycloak named Token Exchange. The process is described at https://www.keycloak.org/docs/latest/securing_apps/index.html#_token-exchange and for my specific case I followed the instructions at https://www.keycloak.org/docs/latest/securing_apps/index.html#internal-token-to-internal-token-exchange.

First of all you need to enable the Token Exchange feature adding the switch `-Dkeycloak.profile=preview` to `JAVA_OPTS` when you run Keycloak. To check that Keycloak loaded preview features, have a look at your server info at `/auth/admin/master/console/#/server-info` under the section profile:
[![Keycloak Server Info Profile][1]][1]

The idea of the Token Exchange is that you get a token for an administrator of your realm and then you exchange it for a token of a ""normal"" user. 
To do so you have to create (if you don't already have) two different clients for your Keycloak realm: the first one is the ""starting client"" used by the administrator to get the token and the second is the ""target client"" for which you want the token for the ""normal"" user.

After that you need to create an admin user for your realm. You can follow the instructions at https://stackoverflow.com/questions/56743109/keycloak-create-admin-user-in-a-realm

Then you need to enable the target client to accept the token exchange. You should follow carefully the instructions at https://www.keycloak.org/docs/latest/securing_apps/index.html#_client_to_client_permission
It's a two-steps process: create the client policy that specifies which ""starting clients"" can exchange a token and then enable the permissions for the target client and attach the policy just created to the `token-exchange` permission:

[![Policy attached to token-exchange permission for target client][2]][2]

Having finished with setting up Keycloak, you can actually issue the two calls to first get the token for the administrator of the realm and then get the token for the user with a specific userId.

**Get admin token**
```
curl --location --request POST '<your_url>/auth/realms/<your_realm>/protocol/openid-connect/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=password' \
--data-urlencode 'client_id=<your_starting_client>' \
--data-urlencode 'username=<your_admin_username>' \
--data-urlencode 'password=<your_admin_password>' \
--data-urlencode 'realm=<your_realm>' \
--data-urlencode 'scope=openid'
```

**Exchange admin token for ""normal"" user token**
```
curl --location --request POST '<your_url>/auth/realms/<your_realm>/protocol/openid-connect/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:token-exchange' \
--data-urlencode 'client_id=<your_starting_client>' \
--data-urlencode 'subject_token=<your_admin_token>' \
--data-urlencode 'requested_token_type=urn:ietf:params:oauth:token-type:refresh_token' \
--data-urlencode 'audience=<your_target_client>' \
--data-urlencode 'requested_subject=<your_target_user_id>'

```

Depending on the configuration of your clients you could have to eventually specify a `client_secret` in this second call.


  [1]: https://i.stack.imgur.com/iuPZb.png
  [2]: https://i.stack.imgur.com/oHMva.png"
61618681,JS-based policy option missing in Keycloak?,"I'm trying to create a JS-based policy in Keycloak, and the documentation states: 

> To create a new JavaScript-based policy, select JavaScript in the
> dropdown list in the upper right corner of the policy listing.

but when I go to `MyClient->Authorization->Policies` and click the `CreatePolicy` dropdown in the top right corner, there is no ""JS-based policy"" alternative.

Am I missing something here? The only policy in the list is the `Default Policy` which is of type `js`, which also confuses me since that means JS-based policies should be available.

I'm running Keycloak `10.0.0`, but I've also tried with version `9.0.3`",61621524,"You need to enable scripting features: https://www.keycloak.org/docs/latest/server_installation/index.html#profiles

```
-Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled
```

Then you will be able to play with Javascript in the Keycloak console. And yes, `upload_scripts` is deprecated feature, so keep it in the mind - you will need `jar` deployment for that in the future."
58137395,How to deploy a module/provider/spi via scripting?,"Is there a way to deploy modules to Wildfly **via scripting** (as in, without manually modifying XML files)? I know about the `jboss-cli.sh` command to `add module` but is there a way to either directly modify my `standalone.xml`/`domain.xml` or do some equivalent thing that will tell Wildfly to load the module? 

---

Said another way... 

I've discovered two ways to deploy modules:

1) Hot deploy a jar directly by copying it into `$KEYCLOAK_HOME/standalone/deployments`
   (Per the README in that directory, this method is **not recommended** for production deployments *but* it works without any manual work afterward.)

2) run `jboss-cli.sh --command=""module add --name=com.example.MySpi""` then **manually** edit `standalone.xml` (or `domain.xml`) to have your module in the ""providers"" list, like so: 

    <subsystem xmlns=""urn:jboss:domain:keycloak-server:1.1"">
      <web-context>auth</web-context>
      <providers>
        ...
        <provider>module:com.example.MySpi</provider>
      </providers>
      ...
    </subsystem>



... and finally restart the server.

I'd like to use the recommended way, but without manually editing an XML file. Is there a recommended path for this?",58144078,"You can do something like
```
jboss-cli.sh --command=""/subsystem=keycloak-server:list-add(name=providers, value=module:com.example.MySpi)""
```

Basically you can script everything that is in standalone.xml with jboss-cli. To find out more how your configuration looks internally, you may try `/subsystem=keycloak-server:read-resource(recursive=true)` within jboss-cli."
63398916,Keycloak - require user to set password after email verification,"We are evaluating KeyCloak to replace our custom implementation for user registration and authentication.

Our current workflow provides a registration screen where users can self-register. On submitting the registration form, a custom validation flow is triggered, following which an email is sent to the user to verify their email and activate their account. The link in the email allows them to set a password and then sends them a welcome email.

I am using the Admin REST client API to implement this workflow. I have gotten as far as the email verification part. 

My questions:
1. **After** the user has verified their email, is there a way I can direct KeyCloak to show them a Set Password screen?
2. Authentication flows - If I am writing this custom workflow, does the authentication flow for registration set up via the admin console still apply?


",63410137,"Set **temporary= true** in the **credentials** object (auth/admin/realms/yourrealm/users) when calling the user creation API. 
Sample JSON body mentioned below. Then user will be redirected to Keycloak in the initial login to change the password.

      {
        ""createdTimestamp"": 1587754061774,
        ""username"": ""John"",
        ""enabled"": true,
        ""firstName"": ""John"",
        ""totp"": false,
        ""emailVerified"": true,
        ""disableableCredentialTypes"": [],
        ""requiredActions"": [],
        ""notBefore"": 0,
        ""groups"": [],
        ""credentials"": [{
        	""type"":""password"",
        	""value"":""1qaz@WSX"",
        	""temporary"":true
        }],
        ""access"": {
            ""manageGroupMembership"": true,
            ""view"": true,
            ""mapRoles"": true,
            ""impersonate"": true,
            ""manage"": true
        }
    }
    
"
57265755,How to get client secret from Keycloak using curl?,"I have setup Keycloak with a Client, that has Access Type confidential and generated a client secret. Now I need to get the client secret via commandline. How can i accomplish that?

Keycloak is running inside a docker container. I've tried to adapt a [similar question][1], which targets using python, but I even fail getting a token first.


  [1]: https://stackoverflow.com/questions/53538100/how-to-get-client-secret-via-keycloak-api",57285417,"You need get Access Token using below curl command for realm `myrealm`

    curl http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/token -H 'Content-Type: application/x-www-form-urlencoded' -d 'grant_type=password&username=testuser&password=test123&client_id=admin-cli'

hold `access_token` from above output.

Get the Clients and their ids using 

    curl   http://localhost:8080/auth/admin/realms/myrealm/clients -H 'Content-Type: application/json' -H  'Authorization: Bearer <<ACCESS_TOKEN>>'

Get `id` from the output, will some thing like this `""id"":""e65ba232-08ff-4f9b-84a6-bd6147340dfd""`

Then get the client secret using below command

    curl  http://localhost:8080/auth/admin/realms/myclient/clients/e65ba232-08ff-4f9b-84a6-bd6147340dfd/client-secret -H 'Content-Type: application/json' -H  'Authorization: Bearer <<ACCESS_TOKEN>>'

output will be something like this

    {""type"":""secret"",""value"":""9a16ceb5-1f26-4812-ae4d-9e8336efef91""}



"
52311757,Keycloak: Get authorization code in JSON?,"we are working on a student project. Our goal is to achieve that a user can authorize with a x509 certificate via Keycloak.

Actually, we cannot continue with receiving the authorization code in order to exchange it for a token request. Basically, we send an authorization code request and receive the authorization code by an URL parameter. But we would prefer to receive the authorization code in a JSON format. The access type of the Client is set to public.

Can someone help us please.
Thank you.",52316361,"The authorization code flow is given in the url because it is meant to survive a redirection to the keycloak login page. You access the keycloak login page using a client id and a redirect url to your application. Once the login is successful, the keycloak server redirects to your app again, providing the authorization code appended in the url itself. Then your app sends this code in order to get a token set, which is the one actually given in JSON format. 

It's not possible to get the authorization code from a REST endpoint, because it is meant to follow a web browser flow. You could still use the direct access grant in order to log in the users directly with their credentials and obtain the token set. That is however considered to be a bit weaker.

**See also:**

 - https://auth0.com/docs/api-auth/tutorials/authorization-code-grant"
70697745,Keycloak token verification fails when the backend is running in a Docker container,"I am in the early stages of building my web application. I intend to use Keycloak as the identity provider to secure the backend. On my local machine, I am running both Keycloak and my backend as docker containers but on different networks, since eventually in production, I would like to have the authentication server running Keycloak running separately from the backend e.g `account.example.com` and `api.example.com` respectively

Locally, my Keycloak container can be accessed via the base URL `http://localhost:8080/auth` and the backend via `http://test.localhost:8000/`

I have created a client in the Keycloak realm whose access type is confidential. I am generating the token using the authorization code grant type.[![enter image description here][1]][1]

Each REST API endpoint on the backend would therefore verify the token passed to the authorization header and then call the Keycloak server to verify the token before processing the request.

The issue that I am currently experiencing is that the token verification fails with the response

```
{""error"":""invalid_token"",""error_description"":""Token verification failed""}'
```

After investigation, apparently, it's because I am calling the Keycloak server from the backend API container. If I generate the token using curl within the backend docker container, the token I receive is being verified fine, but a token generated outside the container is not.

I am using `python-keycloak` as a wrapper for Keycloak REST API

    from keycloak import KeycloakOpenID


    self._keycloak = KeycloakOpenID(
                server_url='http://host.docker.internal:8080/auth/',
                realm_name='myrealm',
                client_id='myclient',
                client_secret_key='mysecret,
            )

    if ""HTTP_AUTHORIZATION"" not in request.META:
           
            return JsonResponse(
                {""detail"": NotAuthenticated.default_detail},
                status=NotAuthenticated.status_code,
            )

     auth_header = request.META.get(""HTTP_AUTHORIZATION"").split()
     token = auth_header[1] if len(auth_header) == 2 else auth_header[0]

        
        try:
            self.keycloak.userinfo(token)
        except KeycloakInvalidTokenError as e:
            # print(e)
            return JsonResponse(
                {""detail"": AuthenticationFailed.default_detail},
                status=AuthenticationFailed.status_code,
            )

How do I resolve this and have token verification working on my local machine


  [1]: https://i.stack.imgur.com/zfIKD.png",70708121,"Your token is invalid, because the issuer (`iss`) in the token does not match the issuer that is expected by your backend service.

Your backend (or an adapter/framework within your backend) will use OIDC discovery protocol to determine the expected issuer. For this, it will call `https://keycloak-container-name/auth/realms/<your-realm>/.well-known/openid-configuration`. This will return metadata like this:

```json
{
  ""issuer"":""https://keycloak-container-name/auth/realms/<your-realm>"",
  ...
}
```

Keycloak will determine the host part of the issuer (`keycloak-container-name` in this case) based on the request. So, if your backend queries the discovery endpoint wiht `keycloak-container-name` from within the docker network, the host part will be `your-container-name`. Your backend will expect the issuer to be `https://keycloak-container-name/auth/realms/<your-realm>` in this case.

Now, if you want to query a token from your frontend, your frontend will send the request to `http://localhost:8080/auth/...`. Since the issuer will be determined based on the request, the issuer in that token will be `https://localhost:8080/auth/realms/<your-realm>` in this case.
This does not match the expected issuer `https://keycloak-container-name/auth/realms/<your-realm>` and therefore the token will be rejected as invalid.

You can also verify this by calling the OIDC discovery endpoint via `http://localhost:8080/auth/realms/<your-realm>/.well-known/openid-configuration`. You will get a response like this:

```json
{
  ""issuer"":""http://localhost:8080/auth/realms/<your-realm>"",
  ...
}
```

To fix this you can set the `Frontend URL` in your realm to `http://localhost:8080/auth`. With this setting the issuer will no longer be determined in the request, but will be fixed `http://localhost:8080/auth/realms/<your-realm>`.
You can check this from within your backend container by issuing a request to `https://keycloak-container-name/auth/realms/<your-realm>/.well-known/openid-configuration`. This will return metadata like this now:

```json
{
  ""issuer"":""http://localhost:8080/auth/realms/<your-realm>"",
  ...
}
```

If you do not want to configure this for every realm seperately, you may instead configure the [default hostname provider][1] server-wide.


  [1]: https://www.keycloak.org/docs/16.1/server_installation/#_hostname"
69103060,Keycloak: Add Client Roles to Service Account Roles with Java API client,"I want to add client roles for a service account for an existing Keycloak client (service user is enabled on this client).
I have managed to do this via the web panel (see screenshot). 

However, I need to do this role assignment using Keycloak Java API client. I know how to connect the client and the general functionality of the Keycloak Java client.

Specifically, I want to add the client roles *realm-management.view-users* and *realm-managment.query-users* to the service account of the client ""*platform-administration*"". 

[![Screenshot from Keycloak web panel][1]][1]



  [1]: https://i.stack.imgur.com/PXVBR.png",69103952,"Okay I figured it out myself. What really helps, if you don't know how the API functions are, is to open the Developer Console of the browser, open the Keycloak web panel, perform the actions and then look at the API calls in the network tab.

    RealmResource realm = keycloak.realm(""realmName"");

    String realmManagementId = realm.clients().findByClientId(""realm-management"").get(0).getId();

    String platformAdministrationId = realm.clients().findByClientId(""platform-administration"").get(0).getId();

    String serviceUserId = realm.clients().get(platformAdministrationId).getServiceAccountUser().getId();

    List<RoleRepresentation> availableRoles = realm.users().get(serviceUserId).roles().clientLevel(realmManagementId).listAvailable();

    List<RoleRepresentation> rolesToAssign = availableRoles.stream().filter(r -> ""view-users"".equalsIgnoreCase(r.getName()) || ""query-users"".equalsIgnoreCase(r.getName())).collect(    Collectors.toList());
    realm.users().get(serviceUserId).roles().clientLevel(realmManagementId).add(rolesToAssign);
"
65517230,How to set user attribute value in Keycloak using API?,"How I can set user attribute value using Keycloak Rest API?

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/wyu13.png",65517641,"**Update:** The `/auth` path was removed starting with [Keycloak 17 Quarkus distribution][1]. So you might need to remove the `/auth` from the endpoint calls presented on this answer.

----

To set a user attribute using the [Keycloak Admin REST API][2]; you use the endpoint:

    PUT <KEYCLOAK_HOST>/auth/admin/realms/<YOUR_REALM>/users/<USER_ID>

with the payload

    {""attributes"":{""<ATTRIBUTE_NAME>"":[""<ATTRIBUTE_VALUE>""]}}

the `<USER_ID>` you can get it using the endpoint:

    GET <YOUR_KEYCLOAK_DOMAIN>/auth/admin/realms/<YOUR_REALM>/users/?username=<THE_USERNAME>

from the `JSON` response, extract the field `id`.

---

**Step-by-Step:**

You can get that information using the [Keycloak Admin REST API][2]; to call that API, you need an access token from a user with the proper permissions. For now, I will be using the `admin` user from the `master` realm:

```sh
curl https://${KEYCLOAK_HOST}/auth/realms/master/protocol/openid-connect/token \
    -d ""client_id=admin-cli"" \
    -d ""username=$ADMIN_NAME"" \
    -d ""password=$ADMIN_PASSWORD"" \
    -d ""grant_type=password""
```

You will get a JSON response with the admin's token. Extract the value of property `access_token` from that response. Let us save it in the variable `$ACCESS_TOKEN` for later reference.

To [get the user id][3] from your realm `$REALM_NAME`:

```sh
curl -X GET https://${KEYCLOAK_HOST}/auth/admin/realms/${REALM_NAME}/users/?username=${USERNAME}&exact=true \
     -H ""Content-Type: application/json"" \
     -H ""Authorization: bearer $ACCESS_TOKEN""
```

From the response extract the user `id` for example as follows 

    jq -r .[].id

Or even cleaner is to passed to the 

To [set the user][4] attribute:
```sh
curl -X PUT https://${KEYCLOAK_HOST}/auth/admin/realms/${REALM_NAME}/users/${USER_ID} \
     -H ""Content-Type: application/json"" \
     -H ""Authorization: bearer $ACCESS_TOKEN"" \
     -d '{""attributes"":{""<ATTRIBUTE_NAME>"":[""<ATTRIBUTE_VALUE>""]}}'
```

You can also have a look at [setUser][5] script on my GitHub repo.

  [1]: https://stackoverflow.com/a/71902419/1366871
  [2]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_authentication_management_resource
  [3]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_getusers
  [4]: https://www.keycloak.org/docs-api/19.0.3/rest-api/index.html#_updateuser
  [5]: https://github.com/dreamcrash/Keycloak/blob/main/scripts/setUser"
