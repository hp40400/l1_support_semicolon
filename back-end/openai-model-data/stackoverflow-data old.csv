QuestionId,QuestionTitle,QuestionBody,AcceptedAnswerId,AcceptedAnswerBody
42186537,"Resources, scopes, permissions and policies in keycloak","I want to create a fairly simple role-based access control system using Keycloak's authorizaion system. The system Keycloak is replacing allows us to create a user, who is a member of one or more groups. In this legacy system, a user is given ""permission"" to access each of about 250 ""capabilities"" either through group membership (where groups are assigned permissions) or a direct grant of a permission to the user.

I would like to map the legacy system to keycloak authorizations.It should be simple for me to map each capability in the existing system to a keycloak resource and a set of keycloak scopes. For example, a viewAccount capability would obviously map to an account resource and a view scope; and viewTransaction maps to a ""transaction resource... but is it best practice to create just one view scope, and use it across multiple resources (account, transaction, etc)? Or should I create a viewAccount scope, a viewTransaction scope, etc? Similarly, I'm a little confused about permissions. For each practical combination of resource and scope, is it usual practice to create a permission? If there are multiple permissions matching a given resource/scope, what does Keycloak do? I'm guessing that the intention of Keycloak is to allow me to configure a matrix of permissions against resources and scopes, so for example I could have permission to access ""accounts"" and permission for view scope, so therefore I would have permission to view accounts? I ask because the result of all this seems to be that my old viewAccount capability ends up creating an Account resource, with View scope, and a viewAccount permission, which seems to get me back where I was. Which is fine, if it's correct. Finally, obviously I need a set of policies that determine if viewAccount should be applied. But am I right that this means I need a policy for each of the legacy groups that a user could belong to? For example, if I have a helpdesk role, then I need a helpdesk membership policy, which I could then add to the viewAccount permission. Is this correct? Thanks, Mark",58906945,"Full transparency- I am by no means a Keycloak/OAuth/OIDC expert and what I know is mostly from reading the docs, books, good ol' YouTube and playing around with the tool. 
This post will be comprised of two parts: 1. I'll attempt to answer all your questions to the best of my ability 2. I'll show you all how you can play around with policies/scopes/permissions in Keycloak without needing to deploy a separate app in order to better understand some of the core concepts in this thread. Do note though that this is mostly meant to get you all started. I'm using `Keycloak 8.0.0`.# Part ISome terminology before we get started: * In Keycloak, you can create 2 types of permissions: [Resource-Based](https://www.keycloak.org/docs/latest/authorization_services/#_permission_create_resource) and [Scope-Based](https://www.keycloak.org/docs/latest/authorization_services/#_permission_create_scope).
* Simply put, for `Resource-Based` permissions, you apply it directly to your resource 
* For `Scoped-Based` permission, you apply it to your scope(s) or scope(s) **and** resource. 
> is it best practice to create just one ""view"" scope, and use it across multiple resources (account, transaction, etc)? Or should I create a ""viewAccount"" scope, a ""viewTransaction"" scope, etc?
Scopes represent a set of rights at a protected resource. In your case, you have 2 resources: `account` and `transaction`, so I would lean towards the second approach. 
In the long run, having a global `view` scope associated with all your resources (e.g. `account`, `transaction`, `customer`, `settlement`...) makes authorization difficult to both manage and adapt to security requirement changes. 
Here are a few examples that you can check out to get a feel for design
* [Slack API](https://api.slack.com/docs/oauth-scopes)
* [Box API](https://developer.box.com/en/guides/api-calls/permissions-and-errors/scopes/)
* [Stripe](https://stripe.com/docs/connect/oauth-reference) 
Do note though - I am not claiming that you shouldn't share scopes across resources. Matter of fact, `Keycloak` allows this for resources with the same `type`. You could for instance need both `viewAccount` and `viewTransaction` scope to read a transaction under a given account (after all you might need access to the account to view transactions). Your requirements and standards will heavily influence your design. 
> For each practical combination of resource and scope, is it usual practice to create a permission?
Apologies, I don't fully understand the question so I'll be a bit broad. In order to grant/deny access to a `resource`, you need to:* Define your [policies](https://www.keycloak.org/docs/latest/authorization_services/index.html#_policy_overview) * Define your [permissions](https://www.keycloak.org/docs/latest/authorization_services/index.html#_permission_overview)
* Apply your policies to your permissions
* Associate your permissions to a `scope` or `resource` (or both)for policy enforcement to take effect. See [Authorization Process](https://www.keycloak.org/docs/latest/authorization_services/index.html#the-authorization-process). How you go about setting all this up is entirely up to you. You could for instance: 
 * Define individual policies, and tie each policy under the appropriate permission.
 * Better yet, define individual policies, then group all your related policies under an `aggregated` policy (a policy of policies) and then associate that aggregated policy with the `scope-based` permission. You could have that `scoped-based` permission apply to both the resource and all its associated scope.
 * Or, you could further break apart your permissions by leveraging the two separate types. You could create permissions solely for your resources via the `resource-based` permission type, and separately associate other permissions solely with a scope via the `scope-based` permission type. 
You have options.
>  If there are multiple permissions matching a given resource/scope, what does Keycloak do? 
This depends on 
1. The resource server's  `Decision Strategy`
2. Each permission's `Decision Strategy`
3. Each policy's `Logic` value. 
The `Logic` value is similar with Java's `!` operator. It can either be `Positive` or `Negative`. When the `Logic` is `Positive`, the policy's final evaluation remains unchanged. When its `Negative`, the final result is negated (e.g. if a policy evaluates to false and its `Logic` is `Negative`, then it will be `true`). To keep things simple, let's assume that the `Logic` is always set to `Positive`. 
The `Decision Strategy` is what we really want to tackle. The `Decision Strategy` can either be `Unanimous` or `Affirmative`. From the docs, 
> **Decision Strategy**
> This configurations changes how the policy evaluation engine decides whether or not a resource or scope should be granted based on the outcome from all evaluated permissions. **Affirmative** means that at least one permission must evaluate to a positive decision in order grant access to a resource and its scopes. **Unanimous** means that all permissions must evaluate to a positive decision in order for the final decision to be also positive. As an example, if two permissions for a same resource or scope are in conflict (one of them is granting access and the other is denying access), the permission to the resource or scope will be granted if the chosen strategy is Affirmative. Otherwise, a single deny from any permission will also deny access to the resource or scope.
Let's use an example to better understand the above. Suppose you have a resource with 2 permissions and someone is trying to access that resource (remember, the `Logic` is `Positive` for all policies). Now: 
1. `Permission One` has a `Decision Strategy` set to `Affirmative`. It also has 3 policies where they each evaluate to: * `true` Since one of the policies is set to `true`, `Permission One` is set to `true` (Affirmative - only 1 needs to be `true`).
2. `Permission Two` has a `Decision Strategy` set to `Unanimous` with 2 policies: * `true` * `false` 
In this case `Permission Two` is `false` since one policy is false (Unanimous - they all need to be `true`). 
3. Now comes the **final** evaluation. If the resource server's `Decision Strategy` is set to `Affirmative`, access to that resource would be granted because `Permission One` is `true`. If on the other hand, the resource server's `Decision Strategy` is set to `Unanimous`, access would be denied."
111,Test 1,Test 11,12323,Test Accept Answar
